<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>ClickHouse Knowledge Base Feed</title>
        <link>https://clickhouse.com/docs/knowledgebase</link>
        <description>Feed of articles posted to the ClickHouse Knowledge Base</description>
        <lastBuildDate>Tue, 21 Mar 2023 20:59:31 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <copyright>Copyright &amp;copy; 2016&amp;ndash;2023 ClickHouse, Inc. ClickHouse Docs provided under the Creative Commons CC BY-NC-SA 4.0 license. ClickHouse&amp;reg; is a registered trademark of ClickHouse, Inc.</copyright>
        <item>
            <title><![CDATA[Are Materialized Views inserted synchronously?]]></title>
            <link>https://clickhouse.com/docs/knowledgebase/are_materialized_views_inserted_asynchronously</link>
            <guid>https://clickhouse.com/docs/knowledgebase/are_materialized_views_inserted_asynchronously</guid>
            <pubDate>Tue, 21 Mar 2023 20:59:31 GMT</pubDate>
            <description><![CDATA[Question: When a source table has new rows inserted into it, those new rows are also sent to all of the materialized views of that source table. Are inserts into Materialized Views performed synchronously, meaning that once the insert is acknowledged successfully from the server to the client, it means that all Materialized Views have been fully updated and available for queries?]]></description>
            <content:encoded><![CDATA[<p><strong>Question:</strong> When a source table has new rows inserted into it, those new rows are also sent to all of the materialized views of that source table. Are inserts into Materialized Views performed synchronously, meaning that once the insert is acknowledged successfully from the server to the client, it means that all Materialized Views have been fully updated and available for queries?</p><p><strong>Answer:</strong></p><ol><li>When an <code>INSERT</code> succeeds, the data is inserted both to the table and all materialized views.</li><li>The insert is not atomic with respect to materialized views. At the moment of time when the <code>INSERT</code> is in progress, concurrent clients may see the intermediate state, when the data is inserted to the main table, but not to materialized views, or vice versa.</li><li>If you are using <a href="https://clickhouse.com/docs/en/optimize/asynchronous-inserts/" target="_blank" rel="noopener noreferrer">async inserts</a>, they collect the data and perform a regular insert under the hood, returning the same type of answer to the client as for regular inserts. If the client received success from an async insert with the option <code>wait_for_async_insert</code> (as by default), the data is inserted into both the table and all of its materialized views.</li></ol><p><strong>Question:</strong> How about chained/cascaded materialized views?</p><p><strong>Answer:</strong>
The same rules apply - an <code>INSERT</code> with a successful response means that the data was inserted into every materialized view in the chain. The insert is non-atomic.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Synchronous data reading]]></title>
            <link>https://clickhouse.com/docs/knowledgebase/async_vs_optimize_read_in_order</link>
            <guid>https://clickhouse.com/docs/knowledgebase/async_vs_optimize_read_in_order</guid>
            <pubDate>Tue, 21 Mar 2023 20:59:31 GMT</pubDate>
            <description><![CDATA[The new setting allow_asynchronous_read_from_io_pool_for_merge_tree allows the number of reading threads (streams) to be higher than the number of threads in the rest of the query execution pipeline.]]></description>
            <content:encoded><![CDATA[<p>Normally the <a href="https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads" target="_blank" rel="noopener noreferrer">max_threads</a> setting <a href="https://clickhouse.com/company/events/query-performance-introspection" target="_blank" rel="noopener noreferrer">controls</a> the number of parallel reading threads and parallel query processing threads:</p><p><img loading="lazy" src="https://user-images.githubusercontent.com/97666923/212138072-5410b684-d00d-4218-93c5-6f49523928a5.png" alt="Untitled scene" class="img_ev3q"></p><p>The data is read 'in order', column after column, from disk.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="asynchronous-data-reading">Asynchronous data reading<a href="#asynchronous-data-reading" class="hash-link" aria-label="Direct link to Asynchronous data reading" title="Direct link to Asynchronous data reading">​</a></h3><p>The new setting <a href="https://github.com/ClickHouse/ClickHouse/pull/43260" target="_blank" rel="noopener noreferrer">allow_asynchronous_read_from_io_pool_for_merge_tree</a> allows the number of reading threads (streams) to be higher than the number of threads in the rest of the query execution pipeline to <strong>speed up cold queries on low-CPU ClickHouse Cloud services</strong>, and to <strong>increase performance for I/O bound queries</strong>.
When the setting is enabled, then the amount of reading threads is controlled by the <a href="https://github.com/ClickHouse/ClickHouse/pull/43260" target="_blank" rel="noopener noreferrer">max_streams_for_merge_tree_reading</a> setting:</p><p><img loading="lazy" src="https://user-images.githubusercontent.com/97666923/212138124-82efba35-7948-4c16-8c44-cba5f0c5c5ae.png" alt="Untitled scene" class="img_ev3q"></p><p>The data is read asynchronously, in parallel from different columns.</p><p>Note that there is also the <a href="https://github.com/ClickHouse/ClickHouse/pull/43260" target="_blank" rel="noopener noreferrer">max_streams_to_max_threads_ratio</a> setting for configuring the ratio between the number of reading threads (streams) and the number of threads in the rest of the query execution pipeline.
But in benchmarks it did <a href="https://github.com/ClickHouse/product/issues/637#issuecomment-1302644078" target="_blank" rel="noopener noreferrer">not</a> help as <a href="https://github.com/ClickHouse/product/issues/637#issuecomment-1347067863" target="_blank" rel="noopener noreferrer">much</a> as the <code>max_streams_for_merge_tree_reading</code> setting</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="benchmarks">Benchmarks<a href="#benchmarks" class="hash-link" aria-label="Direct link to Benchmarks" title="Direct link to Benchmarks">​</a></h3><p><a href="https://github.com/ClickHouse/product/issues/637#issuecomment-1347067863" target="_blank" rel="noopener noreferrer">Here</a> and <a href="https://github.com/ClickHouse/product/issues/637#issuecomment-1360369066" target="_blank" rel="noopener noreferrer">here</a> are some benchmarks regarding speeding up a cold query on a ClickHouse Cloud service.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-about-optimize_read_in_order">What about optimize_read_in_order?<a href="#what-about-optimize_read_in_order" class="hash-link" aria-label="Direct link to What about optimize_read_in_order?" title="Direct link to What about optimize_read_in_order?">​</a></h3><p>With the <a href="https://clickhouse.com/docs/en/sql-reference/statements/select/order-by/#optimization-of-data-reading" target="_blank" rel="noopener noreferrer">optimize_read_in_order optimization</a>, ClickHouse can <a href="https://clickhouse.com/blog/clickhouse-faster-queries-with-projections-and-primary-indexes" target="_blank" rel="noopener noreferrer">skip</a> resorting data in memory if the queries sort order reflects the physical order of data on disk, <strong>but that requires reading the data in order (in contrast to asynchronous reading)</strong>:</p><p><img loading="lazy" src="https://user-images.githubusercontent.com/97666923/212138180-1a4e29d5-43f1-4bfa-a1d6-df2824417508.png" alt="Untitled scene" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="optimize_read_in_order-has-precedence-over-asynchronous-reading">optimize_read_in_order has precedence over asynchronous reading<a href="#optimize_read_in_order-has-precedence-over-asynchronous-reading" class="hash-link" aria-label="Direct link to optimize_read_in_order has precedence over asynchronous reading" title="Direct link to optimize_read_in_order has precedence over asynchronous reading">​</a></h3><p>When ClickHouse sees that <code>optimize_read_in_order optimization</code> can be applied, then the <code>allow_asynchronous_read_from_io_pool_for_merge_tree</code> setting will be ignored / disabled.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-demonstrating-all-of-the-above">Example demonstrating all of the above<a href="#example-demonstrating-all-of-the-above" class="hash-link" aria-label="Direct link to Example demonstrating all of the above" title="Direct link to Example demonstrating all of the above">​</a></h3><ul><li><p>Create and load the <a href="https://clickhouse.com/docs/en/getting-started/example-datasets/uk-price-paid" target="_blank" rel="noopener noreferrer">UK Property Price Paid table</a></p></li><li><p>Check set value of max_threads (by default the amount of CPU cores that ClickHouse sees on the node executing the query</p></li></ul><div class="codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">SELECT getSetting('max_threads');</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─getSetting('max_threads')─┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│                        10 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└───────────────────────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Check query pipeline with default amount of threads for both reading and processing the data</li></ul><div class="codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">EXPLAIN PIPELINE</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SELECT *</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">FROM uk_price_paid;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─explain──────────────────────┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ (Expression)                 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ ExpressionTransform × 10     │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   (ReadFromMergeTree)        │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   MergeTreeThread × 10 0 → 1 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└──────────────────────────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Check query pipeline with 60 async reading threads and default amount of threads for the rest of the query execution pipeline</li></ul><div class="codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">EXPLAIN PIPELINE</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SELECT *</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">FROM uk_price_paid</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SETTINGS</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    allow_asynchronous_read_from_io_pool_for_merge_tree = 1,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_streams_for_merge_tree_reading = 60;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─explain────────────────────────┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ (Expression)                   │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ ExpressionTransform × 10       │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   (ReadFromMergeTree)          │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   Resize 60 → 10               │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│     MergeTreeThread × 60 0 → 1 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└────────────────────────────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Check query pipeline with 20 threads for both reading and processing the data</li></ul><div class="codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">EXPLAIN PIPELINE</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SELECT *</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">FROM uk_price_paid</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SETTINGS</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_threads = 20;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─explain──────────────────────┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ (Expression)                 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ ExpressionTransform × 20     │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   (ReadFromMergeTree)        │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   MergeTreeThread × 20 0 → 1 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└──────────────────────────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Check query pipeline with 60 async reading threads and 20 threads for the rest of the query execution pipeline</li></ul><div class="codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">EXPLAIN PIPELINE</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SELECT *</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">FROM uk_price_paid</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SETTINGS</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_threads = 20,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    allow_asynchronous_read_from_io_pool_for_merge_tree = 1,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_streams_for_merge_tree_reading = 60;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─explain────────────────────────┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ (Expression)                   │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ ExpressionTransform × 20       │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   (ReadFromMergeTree)          │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   Resize 60 → 20               │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│     MergeTreeThread × 60 0 → 1 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└────────────────────────────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Check query pipeline with 60 async reading threads and 20 threads for the rest of the query execution pipeline
when <code>optimize_read_in_order optimization</code> can be applied</li></ul><div class="codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">EXPLAIN PIPELINE</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SELECT *</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">FROM uk_price_paid</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ORDER BY postcode1, postcode2</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SETTINGS</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_threads = 20,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    allow_asynchronous_read_from_io_pool_for_merge_tree= 1,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_streams_for_merge_tree_reading= 60;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─explain───────────────────────────┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ (Expression)                      │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ ExpressionTransform               │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   (Sorting)                       │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   MergingSortedTransform 20 → 1   │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│     (Expression)                  │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│     ExpressionTransform × 20      │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│       (ReadFromMergeTree)         │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│       MergeTreeInOrder × 20 0 → 1 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└───────────────────────────────────┘</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">-- note that this is equivalent to disabling allow_asynchronous_read_from_io_pool_for_merge_tree</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">EXPLAIN PIPELINE</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SELECT *</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">FROM uk_price_paid</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ORDER BY postcode1, postcode2</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SETTINGS</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_threads = 20,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    allow_asynchronous_read_from_io_pool_for_merge_tree = 0,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_streams_for_merge_tree_reading = 0;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─explain───────────────────────────┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ (Expression)                      │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ ExpressionTransform               │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   (Sorting)                       │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   MergingSortedTransform 20 → 1   │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│     (Expression)                  │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│     ExpressionTransform × 20      │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│       (ReadFromMergeTree)         │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│       MergeTreeInOrder × 20 0 → 1 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└───────────────────────────────────┘</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">-- note that you can enforce allow_asynchronous_read_from_io_pool_for_merge_tree by disabling optimize_read_in_order</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">EXPLAIN PIPELINE</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SELECT *</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">FROM uk_price_paid</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ORDER BY</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    postcode1 ASC,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    postcode2 ASC</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SETTINGS</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_threads = 20,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    allow_asynchronous_read_from_io_pool_for_merge_tree = 1,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_streams_for_merge_tree_reading = 60,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    optimize_read_in_order = 0;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─explain──────────────────────────────┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ (Expression)                         │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ ExpressionTransform                  │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   (Sorting)                          │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│   MergingSortedTransform 20 → 1      │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│     MergeSortingTransform × 20       │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│       (Expression)                   │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│       ExpressionTransform × 20       │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│         (ReadFromMergeTree)          │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│         Resize 60 → 20               │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│           MergeTreeThread × 60 0 → 1 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└──────────────────────────────────────┘</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[It's Pi Day! Let's calculate pi using SQL]]></title>
            <link>https://clickhouse.com/docs/knowledgebase/calculate-pi-using-sql</link>
            <guid>https://clickhouse.com/docs/knowledgebase/calculate-pi-using-sql</guid>
            <pubDate>Tue, 21 Mar 2023 20:59:31 GMT</pubDate>
            <description><![CDATA[Happy Pi Day! We thought it would be fun to calculate pi using SQL queries in ClickHouse. Here is what we came up with so far...]]></description>
            <content:encoded><![CDATA[<p>Happy Pi Day! We thought it would be fun to calculate pi using SQL queries in ClickHouse. Here is what we came up with so far...</p><ol><li>This one uses the ClickHouse <code>numbers_mt</code> table function to return 1B rows and only takes 40ms to compute the calculation:</li></ol><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">sum</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">number </span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">number </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">AS</span><span class="token plain"> pi</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> numbers_mt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1000000000.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌────────────────pi─┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ </span><span class="token number" style="color:rgb(181, 206, 168)">3.141592652589797</span><span class="token plain"> │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└───────────────────┘</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">row</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">set</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> Elapsed: </span><span class="token number" style="color:rgb(181, 206, 168)">0.432</span><span class="token plain"> sec</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> Processed </span><span class="token number" style="color:rgb(181, 206, 168)">1.00</span><span class="token plain"> billion </span><span class="token keyword" style="color:rgb(86, 156, 214)">rows</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">8.00</span><span class="token plain"> GB </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2.32</span><span class="token plain"> billion </span><span class="token keyword" style="color:rgb(86, 156, 214)">rows</span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">18.53</span><span class="token plain"> GB</span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li>The following example also processes 1B numbers, just not as quickly:</li></ol><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">sum</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">number </span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">number </span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">number </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">number </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">number </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">number </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">number </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">number </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">AS</span><span class="token plain"> pi</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> numbers_mt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10000000000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─────────────────pi─┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ </span><span class="token number" style="color:rgb(181, 206, 168)">3.1415926525808087</span><span class="token plain"> │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└────────────────────┘</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">row</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">set</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> Elapsed: </span><span class="token number" style="color:rgb(181, 206, 168)">9.825</span><span class="token plain"> sec</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> Processed </span><span class="token number" style="color:rgb(181, 206, 168)">10.00</span><span class="token plain"> billion </span><span class="token keyword" style="color:rgb(86, 156, 214)">rows</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">80.00</span><span class="token plain"> GB </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1.02</span><span class="token plain"> billion </span><span class="token keyword" style="color:rgb(86, 156, 214)">rows</span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">8.14</span><span class="token plain"> GB</span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="3"><li>This one is obviously our favorite in ClickHouse (and the most accurate!):</li></ol><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> pi</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌──────────────pi</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">─┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ </span><span class="token number" style="color:rgb(181, 206, 168)">3.141592653589793</span><span class="token plain"> │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└───────────────────┘</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">row</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">set</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> Elapsed: </span><span class="token number" style="color:rgb(181, 206, 168)">0.008</span><span class="token plain"> sec</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="4"><li>Someone knew their trigonometry with this one:</li></ol><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> asin</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">AS</span><span class="token plain"> pi</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌────────────────pi─┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ </span><span class="token number" style="color:rgb(181, 206, 168)">3.141592653589793</span><span class="token plain"> │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└───────────────────┘</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">row</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">set</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> Elapsed: </span><span class="token number" style="color:rgb(181, 206, 168)">0.005</span><span class="token plain"> sec</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="5"><li>Here is a handy API that lets you specify the number of digits you want:</li></ol><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> url</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'https://api.pi.delivery/v1/pi?start=0&amp;numberOfDigits=100'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'JSONEachRow'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌───────────────content─┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ </span><span class="token number" style="color:rgb(181, 206, 168)">3.1415926535897933</span><span class="token plain">e99 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└───────────────────────┘</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">row</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">set</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> Elapsed: </span><span class="token number" style="color:rgb(181, 206, 168)">0.556</span><span class="token plain"> sec</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="6"><li>This one is clever  - it uses ClickHouse distance functions:</li></ol><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">WITH</span><span class="token plain"> random_points </span><span class="token keyword" style="color:rgb(86, 156, 214)">AS</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">rand64</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> pow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">64</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> rand64</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> pow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">64</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">AS</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">point</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> numbers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1000000000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> countIf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">L2Norm</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token keyword" style="color:rgb(86, 156, 214)">point</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">count</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">AS</span><span class="token plain"> pi</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> random_points</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌──────────pi─┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ </span><span class="token number" style="color:rgb(181, 206, 168)">3.141627208</span><span class="token plain"> │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└─────────────┘</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">row</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">set</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> Elapsed: </span><span class="token number" style="color:rgb(181, 206, 168)">4.742</span><span class="token plain"> sec</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> Processed </span><span class="token number" style="color:rgb(181, 206, 168)">1.00</span><span class="token plain"> billion </span><span class="token keyword" style="color:rgb(86, 156, 214)">rows</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">8.00</span><span class="token plain"> GB </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">210.88</span><span class="token plain"> million </span><span class="token keyword" style="color:rgb(86, 156, 214)">rows</span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1.69</span><span class="token plain"> GB</span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="7"><li>If you're a physicist, you will be content with this one:</li></ol><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">22</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─────divide</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">22</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">─┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ </span><span class="token number" style="color:rgb(181, 206, 168)">3.142857142857143</span><span class="token plain"> │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└───────────────────┘</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="8"><li>Another indirect mehthod (this one came from Alexey Milovidov) that is accurate to 7 decimal places - and it's quick:</li></ol><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">WITH</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">AS</span><span class="token plain"> length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">number </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1000000000.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> length </span><span class="token keyword" style="color:rgb(86, 156, 214)">AS</span><span class="token plain"> x</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> pow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">avg</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">exp</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">x </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">AS</span><span class="token plain"> pi</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> numbers_mt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1000000000.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─────────────────pi─┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ </span><span class="token number" style="color:rgb(181, 206, 168)">3.1415926890388595</span><span class="token plain"> │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└────────────────────┘</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">row</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">set</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> Elapsed: </span><span class="token number" style="color:rgb(181, 206, 168)">1.245</span><span class="token plain"> sec</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> Processed </span><span class="token number" style="color:rgb(181, 206, 168)">1.00</span><span class="token plain"> billion </span><span class="token keyword" style="color:rgb(86, 156, 214)">rows</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">8.00</span><span class="token plain"> GB </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">803.25</span><span class="token plain"> million </span><span class="token keyword" style="color:rgb(86, 156, 214)">rows</span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6.43</span><span class="token plain"> GB</span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_WoCw"><div class="alert-icon admonitionIcon_Ibzs"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div><div class="alert-content admonitionContent_vXIg"><div class="admonitionHeading_TMsN">note</div><p>If you have any more, we'd love for you to contribute. Thanks!</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is a columnar database?]]></title>
            <link>https://clickhouse.com/docs/knowledgebase/columnar-database</link>
            <guid>https://clickhouse.com/docs/knowledgebase/columnar-database</guid>
            <pubDate>Tue, 21 Mar 2023 20:59:31 GMT</pubDate>
            <description><![CDATA[A columnar database stores the data of each column independently. This allows reading data from disk only for those columns that are used in any given query.]]></description>
            <content:encoded><![CDATA[<p>A columnar database stores the data of each column independently. This allows reading data from disk only for those columns that are used in any given query. The cost is that operations that affect whole rows become proportionally more expensive. The synonym for a columnar database is a column-oriented database management system. ClickHouse is a typical example of such a system.</p><p>Key columnar database advantages are:</p><ul><li>Queries that use only a few columns out of many.</li><li>Aggregating queries against large volumes of data.</li><li>Column-wise data compression.</li></ul><p>Here is the illustration of the difference between traditional row-oriented systems and columnar databases when building reports:</p><p><strong>Traditional row-oriented</strong>
<img loading="lazy" alt="Traditional row-oriented" src="/docs/assets/images/row-oriented-3e6fd5aa48e3075202d242b4799da8fa.gif#" width="630" height="258" class="img_ev3q"></p><p><strong>Columnar</strong>
<img loading="lazy" alt="Columnar" src="/docs/assets/images/column-oriented-d082e49b7743d4ded32c7952bfdb028f.gif#" width="630" height="258" class="img_ev3q"></p><p>A columnar database is the preferred choice for analytical applications because it allows having many columns in a table just in case, but to not pay the cost for unused columns on read query execution time (a traditional OLTP database reads all of the data during queries as the data is stored in rows and not columns). Column-oriented databases are designed for big data processing and data warehousing, they often natively scale using distributed clusters of low-cost hardware to increase throughput. ClickHouse does it with combination of <a href="https://clickhouse.com/docs/en/engines/table-engines/special/distributed" target="_blank" rel="noopener noreferrer">distributed</a> and <a href="https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/replication" target="_blank" rel="noopener noreferrer">replicated</a> tables.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to configure a setting for a user]]></title>
            <link>https://clickhouse.com/docs/knowledgebase/configure-a-user-setting</link>
            <guid>https://clickhouse.com/docs/knowledgebase/configure-a-user-setting</guid>
            <pubDate>Tue, 21 Mar 2023 20:59:31 GMT</pubDate>
            <description><![CDATA[There are several ways to define a setting for a user in ClickHouse, depending on the use case and how long you want the setting to be configured. Let's look at a few scenarios...]]></description>
            <content:encoded><![CDATA[<p>There are several ways to define a setting for a user in ClickHouse, depending on the use case and how long you want the setting to be configured. Let's look at a few scenarios...</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="configure-a-setting-for-a-single-query">Configure a setting for a single query<a href="#configure-a-setting-for-a-single-query" class="hash-link" aria-label="Direct link to Configure a setting for a single query" title="Direct link to Configure a setting for a single query">​</a></h2><p>A <code>SELECT</code> query can contain a <code>SETTINGS</code> clause where you can define any number of settings. The settings are only applied for that particular query. For example:</p><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> my_table</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SETTINGS max_threads </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The maximum number of threads will be 8 for this particular query.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="configure-a-setting-for-a-session">Configure a setting for a session<a href="#configure-a-setting-for-a-session" class="hash-link" aria-label="Direct link to Configure a setting for a session" title="Direct link to Configure a setting for a session">​</a></h2><p>You can define a setting for the lifetime of a client session using a <code>SET</code> clause. This is handy for ad-hoc testing or for when you want a setting to live for the lifetime of a few queries - but not longer.</p><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SET</span><span class="token plain"> max_threads </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> my_table</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="configure-a-setting-for-a-particular-user">Configure a setting for a particular user<a href="#configure-a-setting-for-a-particular-user" class="hash-link" aria-label="Direct link to Configure a setting for a particular user" title="Direct link to Configure a setting for a particular user">​</a></h2><p>Use <code>ALTER USER</code> to define a setting just for one user. For example:</p><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">ALTER</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">USER</span><span class="token plain"> my_user_name SETTINGS max_threads </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You can verify it worked by logging out of your client, logging back in, then use the <code>getSetting</code> function:</p><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> getSetting</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'max_threads'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Code: 279. DB::NetException: All connection tries failed.]]></title>
            <link>https://clickhouse.com/docs/knowledgebase/connection_timeout_remote_remoteSecure</link>
            <guid>https://clickhouse.com/docs/knowledgebase/connection_timeout_remote_remoteSecure</guid>
            <pubDate>Tue, 21 Mar 2023 20:59:31 GMT</pubDate>
            <description><![CDATA[When using the `remote` or `remoteSecure` table functions on a node that is located more than 100ms (latency wise) away from the remote node, it is common to encounter the following timeout error.]]></description>
            <content:encoded><![CDATA[<p><strong>Problem</strong>
<a href="https://clickhouse.com/docs/en/sql-reference/table-functions/remote/" target="_blank" rel="noopener noreferrer"><code>remote()</code> or <code>remoteSecure()</code></a> table function allows the access of remote table from another ClickHouse node.</p><p>When using these functions on a node that is located more than 100ms (latency wise) away from the remote node, it is common to encounter the following timeout error.</p><div class="codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">4776d4bd8190 :) SELECT * FROM remoteSecure('HOSTNAME.us-east-2.aws.clickhouse.cloud', DATABASE, TABLE, 'USER', 'USER_PASSWORD')</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SELECT *</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">FROM remoteSecure('HOSTNAME.us-east-2.aws.clickhouse.cloud', DATABASE, TABLE, 'USER', 'USER_PASSWORD')</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Query id: 2bd6ddd0-66d9-4d19-830f-87e3cec3724b</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">0 rows in set. Elapsed: 1.213 sec.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Received exception from server (version 22.6.9):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Code: 519. DB::Exception: Received from localhost:9000. DB::NetException. DB::NetException: All attempts to get table structure failed. Log:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Code: 279. DB::NetException: All connection tries failed. Log:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Code: 209. DB::NetException: Timeout: connect timed out: 18.218.245.169:9440 (hc7d963h1t.us-east-2.aws.clickhouse.cloud:9440, connection timeout 100 ms). (SOCKET_TIMEOUT) (version 22.6.9.11 (official build))</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Code: 209. DB::NetException: Timeout: connect timed out: 18.218.245.169:9440 (hc7d963h1t.us-east-2.aws.clickhouse.cloud:9440, connection timeout 100 ms). (SOCKET_TIMEOUT) (version 22.6.9.11 (official build))</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Code: 209. DB::NetException: Timeout: connect timed out: 18.218.245.169:9440 (hc7d963h1t.us-east-2.aws.clickhouse.cloud:9440, connection timeout 100 ms). (SOCKET_TIMEOUT) (version 22.6.9.11 (official build))</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">. (ALL_CONNECTION_TRIES_FAILED) (version 22.6.9.11 (official build))</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">. (NO_REMOTE_SHARD_AVAILABLE)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>Workaround</strong>
To get increase the connection timeout, set <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/Settings.h#L67" target="_blank" rel="noopener noreferrer"><code>connect_timeout_with_failover_secure_ms</code></a> to a higher value (e.g. 1 second) from the default 100ms.</p><div class="codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">4776d4bd8190 :) SELECT * FROM remoteSecure('HOSTNAME.us-east-2.aws.clickhouse.cloud:9440', DATABASE, TABLE, 'USER', 'USER_PASSWORD') SETTINGS connect_timeout_with_failover_secure_ms = 1000</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SELECT *</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">FROM remoteSecure('HOSTNAME.us-east-2.aws.clickhouse.cloud:9440', DATABASE, TABLE, 'USER', 'USER_PASSWORD')</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">SETTINGS connect_timeout_with_failover_secure_ms = 1000</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Query id: 8e2f4d41-307b-4e61-abb8-809190023247</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">┌─x─┐</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">│ 1 │</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">└───┘</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">1 row in set. Elapsed: 2.403 sec.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What does “ClickHouse” mean?]]></title>
            <link>https://clickhouse.com/docs/knowledgebase/dbms-naming</link>
            <guid>https://clickhouse.com/docs/knowledgebase/dbms-naming</guid>
            <pubDate>Tue, 21 Mar 2023 20:59:31 GMT</pubDate>
            <description><![CDATA[It’s a combination of **Click**stream and Data ware**House**. It comes from the original use case at Yandex.Metrica, where ClickHouse was supposed to keep records of all clicks by people from all over the Internet, and it still does the job.]]></description>
            <content:encoded><![CDATA[<p>It’s a combination of “<strong>Click</strong>stream” and “Data ware<strong>House</strong>”. It comes from the original use case at Yandex.Metrica, where ClickHouse was supposed to keep records of all clicks by people from all over the Internet, and it still does the job. You can read more about this use case on <a href="https://clickhouse.com/docs/en/about-us/history" target="_blank" rel="noopener noreferrer">ClickHouse history</a> page.</p><p>This two-part meaning has two consequences:</p><ul><li>The only correct way to write Click<strong>H</strong>ouse is with capital H.</li><li>If you need to abbreviate it, use <strong>CH</strong>. For some historical reasons, abbreviating as CK is also popular in China, mostly because one of the first talks about ClickHouse in Chinese used this form.</li></ul><div class="theme-admonition theme-admonition-info alert alert--info admonition_WoCw"><div class="alert-icon admonitionIcon_Ibzs"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></div><div class="alert-content admonitionContent_vXIg"><div class="admonitionHeading_TMsN">info</div><p>Many years after ClickHouse got its name, this approach of combining two words that are meaningful on their own has been highlighted as the best way to name a database in a <a href="https://www.cs.cmu.edu/~pavlo/blog/2020/03/on-naming-a-database-management-system.html" target="_blank" rel="noopener noreferrer">research by Andy Pavlo</a>, an Associate Professor of Databases at Carnegie Mellon University. ClickHouse shared his “best database name of all time” award with Postgres.</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Is it possible to delete old records from a ClickHouse table?]]></title>
            <link>https://clickhouse.com/docs/knowledgebase/delete-old-data</link>
            <guid>https://clickhouse.com/docs/knowledgebase/delete-old-data</guid>
            <pubDate>Tue, 21 Mar 2023 20:59:31 GMT</pubDate>
            <description><![CDATA[The short answer is “yes”. ClickHouse has multiple mechanisms that allow freeing up disk space by removing old data. Each mechanism is aimed for different scenarios.]]></description>
            <content:encoded><![CDATA[<p>The short answer is “yes”. ClickHouse has multiple mechanisms that allow freeing up disk space by removing old data. Each mechanism is aimed for different scenarios.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ttl">TTL<a href="#ttl" class="hash-link" aria-label="Direct link to TTL" title="Direct link to TTL">​</a></h2><p>ClickHouse allows to automatically drop values when some condition happens. This condition is configured as an expression based on any columns, usually just static offset for any timestamp column.</p><p>The key advantage of this approach is that it does not need any external system to trigger, once TTL is configured, data removal happens automatically in background.</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_WoCw"><div class="alert-icon admonitionIcon_Ibzs"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div><div class="alert-content admonitionContent_vXIg"><div class="admonitionHeading_TMsN">note</div><p>TTL can also be used to move data not only to <a href="https://en.wikipedia.org/wiki/Null_device" target="_blank" rel="noopener noreferrer">/dev/null</a>, but also between different storage systems, like from SSD to HDD.</p></div></div><p>More details on <a href="https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree#table_engine-mergetree-ttl" target="_blank" rel="noopener noreferrer">configuring TTL</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="delete-from">DELETE FROM<a href="#delete-from" class="hash-link" aria-label="Direct link to DELETE FROM" title="Direct link to DELETE FROM">​</a></h2><p><a href="https://clickhouse.com/docs/en/sql-reference/statements/delete" target="_blank" rel="noopener noreferrer">DELETE FROM</a> allows standard DELETE queries to be run in ClickHouse. The rows targeted in the filter clause are marked as deleted, and removed from future result sets.  Cleanup of the rows happens asynchronously.</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_WoCw"><div class="alert-icon admonitionIcon_Ibzs"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div><div class="alert-content admonitionContent_vXIg"><div class="admonitionHeading_TMsN">note</div><p>DELETE FROM is an experimental feature and must be enabled with:</p><div class="codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">SET allow_experimental_lightweight_delete = true;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="alter-delete">ALTER DELETE<a href="#alter-delete" class="hash-link" aria-label="Direct link to ALTER DELETE" title="Direct link to ALTER DELETE">​</a></h2><p>ALTER DELETE removes rows using asynchronous batch operations. Unlike DELETE FROM, queries run after the ALTER DELETE and before the batch operations complete will include the rows targeted for deletion.  For more details see the <a href="https://clickhouse.com/docs/en/sql-reference/statements/alter/delete" target="_blank" rel="noopener noreferrer">ALTER DELETE</a> docs.</p><p><code>ALTER DELETE</code> can be issued to flexibly remove old data. If you need to do it regularly, the main downside will be the need to have an external system to submit the query. There are also some performance considerations since mutations rewrite complete parts even there is only a single row to be deleted.</p><p>This is the most common approach to make your system based on ClickHouse <a href="https://gdpr-info.eu" target="_blank" rel="noopener noreferrer">GDPR</a>-compliant.</p><p>More details on <a href="https://clickhouse.com/docs/en/sql-reference/statements/alter/#alter-mutations" target="_blank" rel="noopener noreferrer">mutations</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="drop-partition">DROP PARTITION<a href="#drop-partition" class="hash-link" aria-label="Direct link to DROP PARTITION" title="Direct link to DROP PARTITION">​</a></h2><p><code>ALTER TABLE ... DROP PARTITION</code> provides a cost-efficient way to drop a whole partition. It’s not that flexible and needs proper partitioning scheme configured on table creation, but still covers most common cases. Like mutations need to be executed from an external system for regular use.</p><p>More details on <a href="https://clickhouse.com/docs/en/sql-reference/statements/alter/partition/#alter_drop-partition" target="_blank" rel="noopener noreferrer">manipulating partitions</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="truncate">TRUNCATE<a href="#truncate" class="hash-link" aria-label="Direct link to TRUNCATE" title="Direct link to TRUNCATE">​</a></h2><p>It’s rather radical to drop all data from a table, but in some cases it might be exactly what you need.</p><p>More details on <a href="https://clickhouse.com/docs/en/sql-reference/statements/truncate" target="_blank" rel="noopener noreferrer">table truncation</a>.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[DB::Exception: Too many parts (600). Merges are processing significantly slower than inserts]]></title>
            <link>https://clickhouse.com/docs/knowledgebase/exception-too-many-parts</link>
            <guid>https://clickhouse.com/docs/knowledgebase/exception-too-many-parts</guid>
            <pubDate>Tue, 21 Mar 2023 20:59:31 GMT</pubDate>
            <description><![CDATA[The main requirement about inserting into Clickhouse: you should never send too many INSERT statements per second. Ideally - one insert per second / per few seconds.]]></description>
            <content:encoded><![CDATA[<p>The main requirement about inserting into Clickhouse: you should never send too many <code>INSERT</code> statements per second. Ideally - one insert per second / per few seconds.</p><p>So you can insert 100K rows per second but only with one big bulk <code>INSERT</code> statement. When you send hundreds / thousands insert statements per second to *MergeTree table you will always get some errors, and it can not be changed by adjusting some settings.</p><p>If you can't combine lot of inserts into one big bulk insert statement outside - then you should create Buffer table before *MergeTree table.</p><ol><li><p>Each insert create a folder in  <code>/var/lib/clickhouse/.../table_name/</code>. Inside that folder there are 2 files per each column - one with data (compressed), second with index. Data is physically sorted by primary key inside those files. Those folders are called '<strong>parts</strong>'.</p></li><li><p>ClickHouse merges those smaller parts to bigger parts in the background. It chooses parts to merge according to some rules. After merging two (or more) parts one bigger part is being created and old parts are queued to be removed. The settings you list allow finetuning the rules of merging parts. The goal of merging process - is to leave one big part for each partition (or few big parts per partition which are not worth to merge because they are too big). Please check also that <a href="https://github.com/yandex/ClickHouse/issues/1661#issuecomment-352739726" target="_blank" rel="noopener noreferrer">comment</a>.</p></li><li><p>If you create new parts too fast (for example by doing lot of small inserts) and ClickHouse is not able to merge them with proper speed (so new parts come faster than ClickHouse can merge them) - then you get the exception 'Merges are processing significantly slower than inserts'. You can try to increase the limit but you can get the situation then you get filesystem problems caused by the too big number of files / directories (like inodes limit).</p></li><li><p>If you insert to lot of partitions at once the problem is multiplied by the number of partitions affected by insert.</p></li><li><p>You can try to adjust the behaviour of clickhouse with one of the listed settings, or with max_insert_block_size / max_block_size  / insert_format_max_block_size / max_client_network_bandwidth.  But: the better solution is just to insert data in expected tempo. The expected tempo is: <strong>one insert per 1-2 sec, each insert containing 10K-500K rows of data</strong>.</p></li><li><p>So proper solution to solve "Merges are processing significantly slower than inserts"  is to adjust the number of inserts per second and number of rows in each insert. Use batch insert to combine small inserts into one bigger if data comes row-by-row. Throttle huge inserts if you have too much data to insert at once. Don't change clickhouse internals, unless you really understand well what does they it mean.</p></li><li><p>If your data comes faster than 500K rows per second - most probably you need more servers in the cluster to serve that traffic, not the adjustment of settings.</p></li><li><p>The speed of background merges usually depends on storage speed, used compression settings, and mergetree option, i.e. merge algorithm - plain merge / aggregating / summing / collapsing etc. &amp;  used soring key.</p></li></ol>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Execute SYSTEM statements on all nodes in ClickHouse Cloud]]></title>
            <link>https://clickhouse.com/docs/knowledgebase/execute-system-queries-in-cloud</link>
            <guid>https://clickhouse.com/docs/knowledgebase/execute-system-queries-in-cloud</guid>
            <pubDate>Tue, 21 Mar 2023 20:59:31 GMT</pubDate>
            <description><![CDATA[In order to execute the same query on all nodes of a ClickHouse Cloud service, we can use clusterAllReplicas.]]></description>
            <content:encoded><![CDATA[<p>In order to execute the same query on all nodes of a ClickHouse Cloud service, we can use <a href="https://clickhouse.com/docs/en/sql-reference/table-functions/cluster/" target="_blank" rel="noopener noreferrer">clusterAllReplicas</a>.</p><p>For example, in order to get entries from a (node-local) system table from all nodes, you can use:</p><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">SELECT</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">FROM</span><span class="token plain"> clusterAllReplicas</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token keyword" style="color:rgb(86, 156, 214)">default</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> system</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token keyword" style="color:rgb(86, 156, 214)">TABLE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Similarly, you can execute the same <a href="https://clickhouse.com/docs/en/sql-reference/statements/system/" target="_blank" rel="noopener noreferrer">SYSTEM statement</a> on all nodes with a single statement, by using the <a href="https://clickhouse.com/docs/en/sql-reference/distributed-ddl/" target="_blank" rel="noopener noreferrer">ON CLUSTER</a> clause:</p><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">SYSTEM </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">ON</span><span class="token plain"> CLUSTER </span><span class="token keyword" style="color:rgb(86, 156, 214)">default</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>For example for <a href="https://clickhouse.com/docs/en/sql-reference/statements/system/#drop-filesystem-cache" target="_blank" rel="noopener noreferrer">dropping the filesystem cache</a> from all nodes, you can use:</p><div class="language-sql codeBlockContainer_APcc theme-code-block"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">SYSTEM </span><span class="token keyword" style="color:rgb(86, 156, 214)">DROP</span><span class="token plain"> FILESYSTEM CACHE </span><span class="token keyword" style="color:rgb(86, 156, 214)">ON</span><span class="token plain"> CLUSTER </span><span class="token keyword" style="color:rgb(86, 156, 214)">default</span><span class="token punctuation" style="color:rgb(212, 212, 212)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>
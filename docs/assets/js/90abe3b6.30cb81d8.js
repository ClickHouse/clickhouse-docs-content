"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[42687],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,f=c["".concat(i,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:o,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},72941:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={},l="Export MySQL data to Parquet, CSV or JSON",s={permalink:"/docs/knowledgebase/mysql-to-parquet-csv-json",source:"@site/knowledgebase/mysql-to-parquet-csv-json.md",title:"Export MySQL data to Parquet, CSV or JSON",description:"The clickhouse-local tool makes it quick and easy to read data from MySQL and output the data into lots of different formats, including Parquet, CSV, and JSON. We are going to:",date:"2023-03-22T17:26:21.000Z",formattedDate:"March 22, 2023",tags:[],readingTime:1.665,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"Does ClickHouse support multi-region replication?",permalink:"/docs/knowledgebase/en/faq/operations/multi-region-replication"},nextItem:{title:"What does \u201c\u043d\u0435 \u0442\u043e\u0440\u043c\u043e\u0437\u0438\u0442\u201d mean?",permalink:"/docs/knowledgebase/en/faq/general/ne-tormozit"}},i={authorsImageUrls:[]},p=[{value:"Export MySQL to Parquet",id:"export-mysql-to-parquet",level:2},{value:"Export MySQL to CSV",id:"export-mysql-to-csv",level:2},{value:"Export MySQL to JSON",id:"export-mysql-to-json",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," tool makes it quick and easy to read data from MySQL and output the data into lots of different formats, including Parquet, CSV, and JSON. We are going to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/table-functions/mysql"},(0,o.kt)("inlineCode",{parentName:"a"},"mysql")," table function")," to read the data"),(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"INTO OUTFILE _filename_ FORMAT")," clause and specify the desired output format")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," tool is a part of the ClickHouse binary. Download it using the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://clickhouse.com/ | sh\n")),(0,o.kt)("h2",{id:"export-mysql-to-parquet"},"Export MySQL to Parquet"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"mysql")," table function creates a table based on the results of a query sent to a MySQL instance. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"SELECT *\nFROM\n   mysql(\n    'localhost:3306',\n    'my_sql_database',\n    'my_sql_table',\n    'user',\n    'password'\n);\n")),(0,o.kt)("p",null,"We can pipe the output of this query to a file using ",(0,o.kt)("inlineCode",{parentName:"p"},"INTO OUTFILE"),". Use ",(0,o.kt)("inlineCode",{parentName:"p"},"FORMAT")," to specify the format of the file to be created. Let's grab the entire contents of a MySQL table, and send its contents to a Parquet file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./clickhouse local -q \"SELECT * FROM\n   mysql(\n    'localhost:3306',\n    'my_sql_database',\n    'my_sql_table',\n    'user',\n    'password'\n)\nINTO OUTFILE 'my_output_file.parquet'\"\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Because the name of the output file has a ",(0,o.kt)("inlineCode",{parentName:"p"},".parquet")," extension, ClickHouse assumes we want the Parquet format, so notice we omitted the ",(0,o.kt)("inlineCode",{parentName:"p"},"FORMAT Parquet")," clause.")),(0,o.kt)("h2",{id:"export-mysql-to-csv"},"Export MySQL to CSV"),(0,o.kt)("p",null,"It's the same as for Parquet, except this time we use a ",(0,o.kt)("inlineCode",{parentName:"p"},".csv")," extension on the filename. ClickHouse will realize we want a comma-separated output and that's how the data will be written to the file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./clickhouse local -q \"SELECT * FROM\n   mysql(\n    'localhost:3306',\n    'my_sql_database',\n    'my_sql_table',\n    'user',\n    'password'\n)\nINTO OUTFILE 'my_output_file.csv'\"\n")),(0,o.kt)("h2",{id:"export-mysql-to-json"},"Export MySQL to JSON"),(0,o.kt)("p",null,"To go from MySQL to JSON, just change the extension on the filename to ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonl")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ndjson"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./clickhouse local -q \"SELECT * FROM\n   mysqlql(\n    'localhost:3306',\n    'my_sql_database',\n    'my_sql_table',\n    'user',\n    'password'\n)\nINTO OUTFILE 'my_output_file.ndjson'\"\n")),(0,o.kt)("p",null,"It's impressive how simple yet powerful the ",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," tool really is. You can easily read data from a database like MySQL and output it into ",(0,o.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/formats/"},"all types of different output formats"),"."))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[6135],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=a.createContext({}),o=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=o(n),m=l,k=d["".concat(c,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(k,s(s({ref:t},u),{},{components:n})):a.createElement(k,s({ref:t},u))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:l,s[1]=i;for(var o=2;o<r;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},99173:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>o});var a=n(87462),l=(n(67294),n(3905));const r={slug:"/en/development/building_and_benchmarking_deflate_qpl",sidebar_position:73,sidebar_label:"Building and Benchmarking DEFLATE_QPL",description:"How to build Clickhouse and run benchmark with DEFLATE_QPL Codec"},s="Build Clickhouse with DEFLATE_QPL",i={unversionedId:"en/development/building_and_benchmarking_deflate_qpl",id:"en/development/building_and_benchmarking_deflate_qpl",title:"Build Clickhouse with DEFLATE_QPL",description:"How to build Clickhouse and run benchmark with DEFLATE_QPL Codec",source:"@site/docs/en/development/building_and_benchmarking_deflate_qpl.md",sourceDirName:"en/development",slug:"/en/development/building_and_benchmarking_deflate_qpl",permalink:"/docs/en/development/building_and_benchmarking_deflate_qpl",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/development/building_and_benchmarking_deflate_qpl.md",tags:[],version:"current",sidebarPosition:73,frontMatter:{slug:"/en/development/building_and_benchmarking_deflate_qpl",sidebar_position:73,sidebar_label:"Building and Benchmarking DEFLATE_QPL",description:"How to build Clickhouse and run benchmark with DEFLATE_QPL Codec"},sidebar:"docs",previous:{title:"Third-Party Libraries",permalink:"/docs/en/development/contrib"},next:{title:"Integrating Rust libraries",permalink:"/docs/en/development/integrating_rust_libraries"}},c={},o=[{value:"Files list",id:"files-list",level:2},{value:"Run benchmark automatically for Star Schema:",id:"run-benchmark-automatically-for-star-schema",level:2},{value:"Definition",id:"definition",level:2},{value:"Environment",id:"environment",level:2},{value:"Generate raw data",id:"generate-raw-data",level:2},{value:"Database setup",id:"database-setup",level:2},{value:"Benchmark with single instance",id:"benchmark-with-single-instance",level:2},{value:"Benchmark with multi-instances",id:"benchmark-with-multi-instances",level:2},{value:"Tips",id:"tips",level:2}],u={toc:o},d="wrapper";function p(e){let{components:t,...n}=e;return(0,l.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"build-clickhouse-with-deflate_qpl"},"Build Clickhouse with DEFLATE_QPL"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Make sure your target machine meet the QPL required ",(0,l.kt)("a",{parentName:"li",href:"https://intel.github.io/qpl/documentation/get_started_docs/installation.html#prerequisites"},"Prerequisites")),(0,l.kt)("li",{parentName:"ul"},"Pass the following flag to CMake when building ClickHouse, depending on the capabilities of your target machine:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cmake -DENABLE_AVX2=1 -DENABLE_QPL=1 ..\n")),(0,l.kt)("p",null,"or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cmake -DENABLE_AVX512=1 -DENABLE_QPL=1 ..\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For generic requirements, please refer to Clickhouse generic ",(0,l.kt)("a",{parentName:"li",href:"/docs/en/development/build"},"build instructions"))),(0,l.kt)("h1",{id:"run-benchmark-with-deflate_qpl"},"Run Benchmark with DEFLATE_QPL"),(0,l.kt)("h2",{id:"files-list"},"Files list"),(0,l.kt)("p",null,"The folders ",(0,l.kt)("inlineCode",{parentName:"p"},"benchmark_sample")," under ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/ClickHouse/tree/master/contrib/qpl-cmake"},"qpl-cmake")," give example to run benchmark with python scripts:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"client_scripts")," contains python scripts for running typical benchmark, for example:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"client_stressing_test.py"),": The python script for query stress test with ","[1~4]"," server instances."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"queries_ssb.sql"),": The file lists all queries for ",(0,l.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/getting-started/example-datasets/star-schema/"},"Star Schema Benchmark")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allin1_ssb.sh"),": This shell script executes benchmark workflow all in one automatically.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"database_files")," means it will store database files according to lz4/deflate/zstd codec."),(0,l.kt)("h2",{id:"run-benchmark-automatically-for-star-schema"},"Run benchmark automatically for Star Schema:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./benchmark_sample/client_scripts\n$ sh run_ssb.sh\n")),(0,l.kt)("p",null,"After complete, please check all the results in this folder:",(0,l.kt)("inlineCode",{parentName:"p"},"./output/")),(0,l.kt)("p",null,"In case you run into failure, please manually run benchmark as below sections."),(0,l.kt)("h2",{id:"definition"},"Definition"),(0,l.kt)("p",null,"[CLICKHOUSE_EXE]"," means the path of clickhouse executable program."),(0,l.kt)("h2",{id:"environment"},"Environment"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"CPU: Sapphire Rapid"),(0,l.kt)("li",{parentName:"ul"},"OS Requirements refer to ",(0,l.kt)("a",{parentName:"li",href:"https://intel.github.io/qpl/documentation/get_started_docs/installation.html#system-requirements"},"System Requirements for QPL")),(0,l.kt)("li",{parentName:"ul"},"IAA Setup refer to ",(0,l.kt)("a",{parentName:"li",href:"https://intel.github.io/qpl/documentation/get_started_docs/installation.html#accelerator-configuration"},"Accelerator Configuration")),(0,l.kt)("li",{parentName:"ul"},"Install python modules:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install clickhouse_driver numpy\n")),(0,l.kt)("p",null,"[Self-check for IAA]"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ accel-config list | grep -P 'iax|state'\n")),(0,l.kt)("p",null,"Expected output like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'    "dev":"iax1",\n    "state":"enabled",\n            "state":"enabled",\n')),(0,l.kt)("p",null,"If you see nothing output, it means IAA is not ready to work. Please check IAA setup again."),(0,l.kt)("h2",{id:"generate-raw-data"},"Generate raw data"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./benchmark_sample\n$ mkdir rawdata_dir && cd rawdata_dir\n")),(0,l.kt)("p",null,"Use ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/getting-started/example-datasets/star-schema"},(0,l.kt)("inlineCode",{parentName:"a"},"dbgen"))," to generate 100 million rows data with the parameters:\n-s 20"),(0,l.kt)("p",null,"The files like ",(0,l.kt)("inlineCode",{parentName:"p"},"*.tbl")," are expected to output under ",(0,l.kt)("inlineCode",{parentName:"p"},"./benchmark_sample/rawdata_dir/ssb-dbgen"),":"),(0,l.kt)("h2",{id:"database-setup"},"Database setup"),(0,l.kt)("p",null,"Set up database with LZ4 codec"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/lz4\n$ [CLICKHOUSE_EXE] server -C config_lz4.xml >&/dev/null&\n$ [CLICKHOUSE_EXE] client\n")),(0,l.kt)("p",null,"Here you should see the message ",(0,l.kt)("inlineCode",{parentName:"p"},"Connected to ClickHouse server")," from console which means client successfully setup connection with server."),(0,l.kt)("p",null,"Complete below three steps mentioned in ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/getting-started/example-datasets/star-schema"},"Star Schema Benchmark")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Creating tables in ClickHouse"),(0,l.kt)("li",{parentName:"ul"},"Inserting data. Here should use ",(0,l.kt)("inlineCode",{parentName:"li"},"./benchmark_sample/rawdata_dir/ssb-dbgen/*.tbl")," as input data."),(0,l.kt)("li",{parentName:"ul"},"Converting \u201cstar schema\u201d to de-normalized \u201cflat schema\u201d")),(0,l.kt)("p",null,"Set up database with with IAA Deflate codec"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/deflate\n$ [CLICKHOUSE_EXE] server -C config_deflate.xml >&/dev/null&\n$ [CLICKHOUSE_EXE] client\n")),(0,l.kt)("p",null,"Complete three steps same as lz4 above"),(0,l.kt)("p",null,"Set up database with with ZSTD codec"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/zstd\n$ [CLICKHOUSE_EXE] server -C config_zstd.xml >&/dev/null&\n$ [CLICKHOUSE_EXE] client\n")),(0,l.kt)("p",null,"Complete three steps same as lz4 above"),(0,l.kt)("p",null,"[self-check]","\nFor each codec(lz4/zstd/deflate), please execute below query to make sure the databases are created successfully:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select count() from lineorder_flat\n")),(0,l.kt)("p",null,"You are expected to see below output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"\u250c\u2500\u2500\u2500count()\u2500\u2510\n\u2502 119994608 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"[Self-check for IAA Deflate codec]","\nAt the first time you execute insertion or query from client, clickhouse server console is expected to print this log:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Hardware-assisted DeflateQpl codec is ready!\n")),(0,l.kt)("p",null,"If you never find this, but see another log as below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Initialization of hardware-assisted DeflateQpl codec failed\n")),(0,l.kt)("p",null,"That means IAA devices is not ready, you need check IAA setup again."),(0,l.kt)("h2",{id:"benchmark-with-single-instance"},"Benchmark with single instance"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Before start benchmark, Please disable C6 and set CPU frequency governor to be ",(0,l.kt)("inlineCode",{parentName:"li"},"performance"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cpupower idle-set -d 3\n$ cpupower frequency-set -g performance\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To eliminate impact of memory bound on cross sockets, we use ",(0,l.kt)("inlineCode",{parentName:"li"},"numactl")," to bind server on one socket and client on another socket."),(0,l.kt)("li",{parentName:"ul"},"Single instance means single server connected with single client")),(0,l.kt)("p",null,"Now run benchmark for LZ4/Deflate/ZSTD respectively:"),(0,l.kt)("p",null,"LZ4:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/lz4 \n$ numactl -m 0 -N 0 [CLICKHOUSE_EXE] server -C config_lz4.xml >&/dev/null&\n$ cd ./client_scripts\n$ numactl -m 1 -N 1 python3 client_stressing_test.py queries_ssb.sql 1 > lz4.log\n")),(0,l.kt)("p",null,"IAA deflate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/deflate\n$ numactl -m 0 -N 0 [CLICKHOUSE_EXE] server -C config_deflate.xml >&/dev/null&\n$ cd ./client_scripts\n$ numactl -m 1 -N 1 python3 client_stressing_test.py queries_ssb.sql 1 > deflate.log\n")),(0,l.kt)("p",null,"ZSTD:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/zstd\n$ numactl -m 0 -N 0 [CLICKHOUSE_EXE] server -C config_zstd.xml >&/dev/null&\n$ cd ./client_scripts\n$ numactl -m 1 -N 1 python3 client_stressing_test.py queries_ssb.sql 1 > zstd.log\n")),(0,l.kt)("p",null,"Now three logs should be output as expected:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"lz4.log\ndeflate.log\nzstd.log\n")),(0,l.kt)("p",null,"How to check performance metrics:"),(0,l.kt)("p",null,"We focus on QPS, please search the keyword: ",(0,l.kt)("inlineCode",{parentName:"p"},"QPS_Final")," and collect statistics"),(0,l.kt)("h2",{id:"benchmark-with-multi-instances"},"Benchmark with multi-instances"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To reduce impact of memory bound on too much threads, We recommend run benchmark with multi-instances."),(0,l.kt)("li",{parentName:"ul"},"Multi-instance means multiple\uff082 or 4\uff09servers connected with respective client."),(0,l.kt)("li",{parentName:"ul"},"The cores of one socket need to be divided equally and assigned to the servers respectively."),(0,l.kt)("li",{parentName:"ul"},"For multi-instances, must create new folder for each codec and insert dataset by following the similar steps as single instance.")),(0,l.kt)("p",null,"There are 2 differences: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For client side, you need launch clickhouse with the assigned port during table creation and data insertion."),(0,l.kt)("li",{parentName:"ul"},"For server side, you need launch clickhouse with the specific xml config file in which port has been assigned. All customized xml config files for multi-instances has been provided under ./server_config.")),(0,l.kt)("p",null,"Here we assume there are 60 cores per socket and take 2 instances for example.\nLaunch server for first instance\nLZ4:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/lz4\n$ numactl -C 0-29,120-149 [CLICKHOUSE_EXE] server -C config_lz4.xml >&/dev/null&\n")),(0,l.kt)("p",null,"ZSTD:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/zstd\n$ numactl -C 0-29,120-149 [CLICKHOUSE_EXE] server -C config_zstd.xml >&/dev/null&\n")),(0,l.kt)("p",null,"IAA Deflate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/deflate\n$ numactl -C 0-29,120-149 [CLICKHOUSE_EXE] server -C config_deflate.xml >&/dev/null&\n")),(0,l.kt)("p",null,"[Launch server for second instance]"),(0,l.kt)("p",null,"LZ4:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir && mkdir lz4_s2 && cd lz4_s2\n$ cp ../../server_config/config_lz4_s2.xml ./\n$ numactl -C 30-59,150-179 [CLICKHOUSE_EXE] server -C config_lz4_s2.xml >&/dev/null&\n")),(0,l.kt)("p",null,"ZSTD:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir && mkdir zstd_s2 && cd zstd_s2\n$ cp ../../server_config/config_zstd_s2.xml ./\n$ numactl -C 30-59,150-179 [CLICKHOUSE_EXE] server -C config_zstd_s2.xml >&/dev/null&\n")),(0,l.kt)("p",null,"IAA Deflate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir && mkdir deflate_s2 && cd deflate_s2\n$ cp ../../server_config/config_deflate_s2.xml ./\n$ numactl -C 30-59,150-179 [CLICKHOUSE_EXE] server -C config_deflate_s2.xml >&/dev/null&\n")),(0,l.kt)("p",null,"Creating tables && Inserting data for second instance"),(0,l.kt)("p",null,"Creating tables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ [CLICKHOUSE_EXE] client -m --port=9001 \n")),(0,l.kt)("p",null,"Inserting data:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ [CLICKHOUSE_EXE] client --query "INSERT INTO [TBL_FILE_NAME] FORMAT CSV" < [TBL_FILE_NAME].tbl  --port=9001\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"[TBL_FILE_NAME]"," represents the name of a file named with the regular expression: *. tbl under ",(0,l.kt)("inlineCode",{parentName:"li"},"./benchmark_sample/rawdata_dir/ssb-dbgen"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--port=9001")," stands for the assigned port for server instance which is also defined in config_lz4_s2.xml/config_zstd_s2.xml/config_deflate_s2.xml. For even more instances, you need replace it with the value: 9002/9003 which stand for s3/s4 instance respectively. If you don't assign it, the port is 9000 by default which has been used by first instance.")),(0,l.kt)("p",null,"Benchmarking with 2 instances"),(0,l.kt)("p",null,"LZ4:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/lz4\n$ numactl -C 0-29,120-149 [CLICKHOUSE_EXE] server -C config_lz4.xml >&/dev/null&\n$ cd ./database_dir/lz4_s2\n$ numactl -C 30-59,150-179 [CLICKHOUSE_EXE] server -C config_lz4_s2.xml >&/dev/null&\n$ cd ./client_scripts\n$ numactl -m 1 -N 1 python3 client_stressing_test.py queries_ssb.sql 2  > lz4_2insts.log\n")),(0,l.kt)("p",null,"ZSTD:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/zstd\n$ numactl -C 0-29,120-149 [CLICKHOUSE_EXE] server -C config_zstd.xml >&/dev/null&\n$ cd ./database_dir/zstd_s2\n$ numactl -C 30-59,150-179 [CLICKHOUSE_EXE] server -C config_zstd_s2.xml >&/dev/null& \n$ cd ./client_scripts\n$ numactl -m 1 -N 1 python3 client_stressing_test.py queries_ssb.sql 2 > zstd_2insts.log\n")),(0,l.kt)("p",null,"IAA deflate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ./database_dir/deflate\n$ numactl -C 0-29,120-149 [CLICKHOUSE_EXE] server -C config_deflate.xml >&/dev/null&\n$ cd ./database_dir/deflate_s2\n$ numactl -C 30-59,150-179 [CLICKHOUSE_EXE] server -C config_deflate_s2.xml >&/dev/null&\n$ cd ./client_scripts\n$ numactl -m 1 -N 1 python3 client_stressing_test.py queries_ssb.sql 2 > deflate_2insts.log\n")),(0,l.kt)("p",null,"Here the last argument: ",(0,l.kt)("inlineCode",{parentName:"p"},"2")," of client_stressing_test.py stands for the number of instances. For more instances, you need replace it with the value: 3 or 4. This script support up to 4 instances/"),(0,l.kt)("p",null,"Now three logs should be output as expected:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"lz4_2insts.log\ndeflate_2insts.log\nzstd_2insts.log\n")),(0,l.kt)("p",null,"How to check performance metrics:"),(0,l.kt)("p",null,"We focus on QPS, please search the keyword: ",(0,l.kt)("inlineCode",{parentName:"p"},"QPS_Final")," and collect statistics"),(0,l.kt)("p",null,"Benchmark setup for 4 instances is similar with 2 instances above.\nWe recommend use 2 instances benchmark data as final report for review."),(0,l.kt)("h2",{id:"tips"},"Tips"),(0,l.kt)("p",null,"Each time before launch new clickhouse server, please make sure no background clickhouse process running, please check and kill old one:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ ps -aux| grep clickhouse\n$ kill -9 [PID]\n")),(0,l.kt)("p",null,"By comparing the query list in ./client_scripts/queries_ssb.sql with official ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/getting-started/example-datasets/star-schema"},"Star Schema Benchmark"),", you will find 3 queries are not included: Q1.2/Q1.3/Q3.4 . This is because cpu utilization% is very low <10% for these queries which means cannot demonstrate performance differences."))}p.isMDXComponent=!0}}]);
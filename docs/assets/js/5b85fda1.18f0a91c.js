"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[57084],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>f});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=r.createContext({}),p=function(e){var a=r.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},c=function(e){var a=p(e.components);return r.createElement(l.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(t),u=n,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return t?r.createElement(f,s(s({ref:a},c),{},{components:t})):r.createElement(f,s({ref:a},c))}));function f(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[d]="string"==typeof e?e:n,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},60597:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(87462),n=(t(67294),t(3905));const o={sidebar_label:"Avro, Arrow and ORC",sidebar_position:5,slug:"/en/integrations/data-formats/arrow-avro-orc"},s="Working with Avro, Arrow, and ORC data in ClickHouse",i={unversionedId:"en/integrations/data-ingestion/data-formats/arrow-avro-orc",id:"en/integrations/data-ingestion/data-formats/arrow-avro-orc",title:"Working with Avro, Arrow, and ORC data in ClickHouse",description:"Apache has released multiple data formats actively used in analytics environments, including the popular Avro, Arrow, and Orc. ClickHouse supports importing and exporting data using any from that list.",source:"@site/docs/en/integrations/data-ingestion/data-formats/arrow-avro-orc.md",sourceDirName:"en/integrations/data-ingestion/data-formats",slug:"/en/integrations/data-formats/arrow-avro-orc",permalink:"/docs/en/integrations/data-formats/arrow-avro-orc",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/data-ingestion/data-formats/arrow-avro-orc.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Avro, Arrow and ORC",sidebar_position:5,slug:"/en/integrations/data-formats/arrow-avro-orc"},sidebar:"docs",previous:{title:"Parquet",permalink:"/docs/en/integrations/data-formats/parquet"},next:{title:"View all formats...",permalink:"/docs/en/interfaces/formats"}},l={},p=[{value:"Importing and exporting in Avro format",id:"importing-and-exporting-in-avro-format",level:2},{value:"Avro and ClickHouse data types",id:"avro-and-clickhouse-data-types",level:3},{value:"Avro messages in Kafka",id:"avro-messages-in-kafka",level:3},{value:"Working with Arrow format",id:"working-with-arrow-format",level:2},{value:"Arrow data streaming",id:"arrow-data-streaming",level:3},{value:"Importing and exporting ORC data",id:"importing-and-exporting-orc-data",level:2},{value:"Further reading",id:"further-reading",level:2}],c={toc:p},d="wrapper";function m(e){let{components:a,...o}=e;return(0,n.kt)(d,(0,r.Z)({},c,o,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"working-with-avro-arrow-and-orc-data-in-clickhouse"},"Working with Avro, Arrow, and ORC data in ClickHouse"),(0,n.kt)("p",null,"Apache has released multiple data formats actively used in analytics environments, including the popular ",(0,n.kt)("a",{parentName:"p",href:"https://avro.apache.org/"},"Avro"),", ",(0,n.kt)("a",{parentName:"p",href:"https://arrow.apache.org/"},"Arrow"),", and ",(0,n.kt)("a",{parentName:"p",href:"https://orc.apache.org/"},"Orc"),". ClickHouse supports importing and exporting data using any from that list."),(0,n.kt)("h2",{id:"importing-and-exporting-in-avro-format"},"Importing and exporting in Avro format"),(0,n.kt)("p",null,"ClickHouse supports reading and writing ",(0,n.kt)("a",{parentName:"p",href:"https://avro.apache.org/"},"Apache Avro")," data files, which are widely used in Hadoop systems."),(0,n.kt)("p",null,"To import from an ",(0,n.kt)("a",{target:"_blank",href:t(5266).Z},"avro file"),", we should use ",(0,n.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-avro"},"Avro")," format in the ",(0,n.kt)("inlineCode",{parentName:"p"},"INSERT")," statement:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO sometable\nFROM INFILE 'data.avro'\nFORMAT Avro\n")),(0,n.kt)("p",null,"With the ",(0,n.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/files/#file"},"file()")," function, we can also explore Avro files before actually importing data:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT path, hits\nFROM file('data.avro', Avro)\nORDER BY hits DESC\nLIMIT 5;\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500hits\u2500\u2510\n\u2502 Amy_Poehler     \u2502 62732 \u2502\n\u2502 Adam_Goldberg   \u2502 42338 \u2502\n\u2502 Aaron_Spelling  \u2502 25128 \u2502\n\u2502 Absence_seizure \u2502 18152 \u2502\n\u2502 Ammon_Bundy     \u2502 11890 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,"To export to Avro file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable\nINTO OUTFILE 'export.avro'\nFORMAT Avro;\n")),(0,n.kt)("h3",{id:"avro-and-clickhouse-data-types"},"Avro and ClickHouse data types"),(0,n.kt)("p",null,"Consider ",(0,n.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data_types-matching"},"data types matching")," when importing or exporting Avro files. Use explicit type casting to convert when loading data from Avro files:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    date,\n    toDate(date)\nFROM file('data.avro', Avro)\nLIMIT 3;\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500date\u2500\u252c\u2500toDate(date)\u2500\u2510\n\u2502 16556 \u2502   2015-05-01 \u2502\n\u2502 16556 \u2502   2015-05-01 \u2502\n\u2502 16556 \u2502   2015-05-01 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("h3",{id:"avro-messages-in-kafka"},"Avro messages in Kafka"),(0,n.kt)("p",null,"When Kafka messages use Avro format, ClickHouse can read such streams using ",(0,n.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-avro-confluent"},"AvroConfluent")," format and ",(0,n.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/integrations/kafka"},"Kafka")," engine:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE some_topic_stream\n(\n    field1 UInt32,\n    field2 String\n)\nENGINE = Kafka() SETTINGS\nkafka_broker_list = 'localhost',\nkafka_topic_list = 'some_topic',\nkafka_group_name = 'some_group',\nkafka_format = 'AvroConfluent';\n")),(0,n.kt)("h2",{id:"working-with-arrow-format"},"Working with Arrow format"),(0,n.kt)("p",null,"Another columnar format is ",(0,n.kt)("a",{parentName:"p",href:"https://arrow.apache.org/"},"Apache Arrow"),", also supported by ClickHouse for import and export. To import data from an ",(0,n.kt)("a",{target:"_blank",href:t(85963).Z},"Arrow file"),", we use the ",(0,n.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-arrow"},"Arrow")," format:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO sometable\nFROM INFILE 'data.arrow'\nFORMAT Arrow\n")),(0,n.kt)("p",null,"Exporting to Arrow file works the same way:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM sometable\nINTO OUTFILE 'export.arrow'\nFORMAT Arrow\n")),(0,n.kt)("p",null,"Also, check ",(0,n.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-types-matching-arrow"},"data types matching")," to know if any should be converted manually."),(0,n.kt)("h3",{id:"arrow-data-streaming"},"Arrow data streaming"),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-arrow-stream"},"ArrowStream")," format can be used to work with Arrow streaming (used for in-memory processing). ClickHouse can read and write Arrow streams."),(0,n.kt)("p",null,"To demonstrate how ClickHouse can stream Arrow data, let's pipe it to the following python script (it reads input stream in Arrow streaming format and outputs the result as a Pandas table):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"import sys, pyarrow as pa\n\nwith pa.ipc.open_stream(sys.stdin.buffer) as reader:\n  print(reader.read_pandas())\n")),(0,n.kt)("p",null,"Now we can stream data from ClickHouse by piping its output to the script:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'clickhouse-client -q "SELECT path, hits FROM some_data LIMIT 3 FORMAT ArrowStream" | python3 arrow.py\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-response"},"                           path  hits\n0       b'Akiba_Hebrew_Academy'   241\n1           b'Aegithina_tiphia'    34\n2  b'1971-72_Utah_Stars_season'     1\n")),(0,n.kt)("p",null,"ClickHouse can read Arrow streams as well using the same ArrowStream format:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},'arrow-stream | clickhouse-client -q "INSERT INTO sometable FORMAT ArrowStream"\n')),(0,n.kt)("p",null,"We've used ",(0,n.kt)("inlineCode",{parentName:"p"},"arrow-stream")," as a possible source of Arrow streaming data."),(0,n.kt)("h2",{id:"importing-and-exporting-orc-data"},"Importing and exporting ORC data"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://orc.apache.org/"},"Apache ORC")," format is a columnar storage format typically used for Hadoop. ClickHouse supports importing as well as exporting ",(0,n.kt)("a",{target:"_blank",href:t(93605).Z},"Orc data")," using ",(0,n.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-format-orc"},"ORC format"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM sometable\nINTO OUTFILE 'data.orc'\nFORMAT ORC;\n\nINSERT INTO sometable\nFROM INFILE 'data.orc'\nFORMAT ORC;\n")),(0,n.kt)("p",null,"Also, check ",(0,n.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#data-types-matching-orc"},"data types matching")," as well as ",(0,n.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats/#parquet-format-settings"},"additional settings")," to tune export and import."),(0,n.kt)("h2",{id:"further-reading"},"Further reading"),(0,n.kt)("p",null,"ClickHouse introduces support for many formats, both text, and binary, to cover various scenarios and platforms. Explore more formats and ways to work with them in the following articles:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/en/integrations/data-formats/csv-tsv"},"CSV and TSV formats")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/en/integrations/data-formats/json"},"JSON formats")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/en/integrations/data-formats/templates-regexp"},"Regex and templates")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/en/integrations/data-formats/binary-native"},"Native and binary formats")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/en/integrations/data-formats/sql"},"SQL formats"))),(0,n.kt)("p",null,"And also check ",(0,n.kt)("a",{parentName:"p",href:"https://clickhouse.com/blog/extracting-converting-querying-local-files-with-sql-clickhouse-local"},"clickhouse-local")," - a portable full-featured tool to work on local/remote files without the need for Clickhouse server."))}m.isMDXComponent=!0},85963:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/files/data-e34efb7c41390a44e4db06cf14dd539b.arrow"},5266:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/files/data-a7ef352ad979099ce4ec4baf4fa54710.avro"},93605:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/files/data-9ff869bfbcdf168bdfe4eb08f7a8fd50.orc"}}]);
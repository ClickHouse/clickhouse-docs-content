"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[57263],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>k});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),s=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},d=function(t){var e=s(t.components);return a.createElement(p.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),u=s(n),c=r,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||l;return n?a.createElement(k,i(i({ref:e},d),{},{components:n})):a.createElement(k,i({ref:e},d))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[u]="string"==typeof t?t:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},17914:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={sidebar_label:"Java",sidebar_position:1,keywords:["clickhouse","java","jdbc","client","integrate","r2dbc"],description:"Options for connecting to ClickHouse from Java",slug:"/en/integrations/java"},i="Java Language Client Options for ClickHouse",o={unversionedId:"en/integrations/language-clients/java/index",id:"en/integrations/language-clients/java/index",title:"Java Language Client Options for ClickHouse",description:"Options for connecting to ClickHouse from Java",source:"@site/docs/en/integrations/language-clients/java/index.md",sourceDirName:"en/integrations/language-clients/java",slug:"/en/integrations/java",permalink:"/docs/en/integrations/java",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/language-clients/java/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Java",sidebar_position:1,keywords:["clickhouse","java","jdbc","client","integrate","r2dbc"],description:"Options for connecting to ClickHouse from Java",slug:"/en/integrations/java"},sidebar:"docs",previous:{title:"Nodejs",permalink:"/docs/en/integrations/language-clients/nodejs"},next:{title:"Python",permalink:"/docs/en/integrations/python"}},p={},s=[{value:"Java Client",id:"java-client",level:2},{value:"Environment requirements",id:"environment-requirements",level:3},{value:"Compatibility with ClickHouse",id:"compatibility-with-clickhouse",level:3},{value:"Installation",id:"installation",level:3},{value:"Supported data types",id:"supported-data-types",level:3},{value:"Driver API",id:"driver-api",level:3},{value:"Connect to ClickHouse",id:"connect-to-clickhouse",level:4},{value:"Query",id:"query",level:4},{value:"Streaming Query",id:"streaming-query",level:4},{value:"Insert",id:"insert",level:4},{value:"Multiple queries",id:"multiple-queries",level:4},{value:"JDBC Driver",id:"jdbc-driver",level:2},{value:"Environment requirements",id:"environment-requirements-1",level:3},{value:"Compatibility with ClickHouse",id:"compatibility-with-clickhouse-1",level:3},{value:"Installation",id:"installation-1",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Supported data types",id:"supported-data-types-1",level:3},{value:"Driver API",id:"driver-api-1",level:3},{value:"Connect to ClickHouse",id:"connect-to-clickhouse-1",level:4},{value:"Query",id:"query-1",level:4},{value:"Insert",id:"insert-1",level:4},{value:"With input table function",id:"with-input-table-function",level:5},{value:"Insert",id:"insert-2",level:5},{value:"Insert with placeholders",id:"insert-with-placeholders",level:5},{value:"Advanced API",id:"advanced-api",level:3},{value:"Handling DateTime and time zones",id:"handling-datetime-and-time-zones",level:4},{value:"Handling AggregateFunction",id:"handling-aggregatefunction",level:4},{value:"R2DBC driver",id:"r2dbc-driver",level:2},{value:"Environment requirements",id:"environment-requirements-2",level:3},{value:"Compatibility with ClickHouse",id:"compatibility-with-clickhouse-2",level:3},{value:"Installation",id:"installation-2",level:3},{value:"Supported data types",id:"supported-data-types-2",level:3},{value:"Driver API",id:"driver-api-2",level:3},{value:"Connect to ClickHouse",id:"connect-to-clickhouse-2",level:4},{value:"Query",id:"query-2",level:4},{value:"Insert",id:"insert-3",level:4}],d={toc:s},u="wrapper";function m(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java-language-client-options-for-clickhouse"},"Java Language Client Options for ClickHouse"),(0,r.kt)("p",null,"There are three options for connecting to ClickHouse using Java:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#java-client"},"Java client")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#jdbc-driver"},"JDBC Driver")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#r2dbc-driver"},"R2DBC Driver"))),(0,r.kt)("h2",{id:"java-client"},"Java Client"),(0,r.kt)("p",null,"Provides the most flexible and performant way to integrate your app with ClickHouse."),(0,r.kt)("h3",{id:"environment-requirements"},"Environment requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://openjdk.java.net"},"OpenJDK")," version >= 17")),(0,r.kt)("h3",{id:"compatibility-with-clickhouse"},"Compatibility with ClickHouse"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Client version"),(0,r.kt)("th",{parentName:"tr",align:null},"ClickHouse"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.4.0"),(0,r.kt)("td",{parentName:"tr",align:null},"20.7+")))),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>com.clickhouse</groupId>\n    \x3c!-- or clickhouse-grpc-client if you prefer gRPC --\x3e\n    <artifactId>clickhouse-http-client</artifactId>\n    <version>0.4.0</version>\n</dependency>\n")),(0,r.kt)("h3",{id:"supported-data-types"},"Supported data types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Format"),(0,r.kt)("th",{parentName:"tr",align:null},"Support"),(0,r.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"AggregatedFunction"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"limited to ",(0,r.kt)("inlineCode",{parentName:"td"},"groupBitmap"),", and known to have issue with 64bit bitmap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Array(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bool"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DateTime","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Decimal","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SET output_format_decimal_trailing_zeros=1")," in 21.9+ for consistency")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Enum","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"can be treated as both string and integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Geo Types"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Point, Ring, Polygon, and MultiPolygon")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int","*",", UInt","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt64 is mapped to ",(0,r.kt)("inlineCode",{parentName:"td"},"long"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IPv","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nested(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Object('JSON')"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SimpleAggregateFunction"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*","String"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tuple(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UUID"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"driver-api"},"Driver API"),(0,r.kt)("h4",{id:"connect-to-clickhouse"},"Connect to ClickHouse"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"URL Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"protocol://host[:port][/database][?param[=value][&param[=value]][#tag[,tag]]"),", for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:8443?ssl=true&sslmode=NONE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"http://(https://explorer@play.clickhouse.com:443")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tcp://localhost?!auto_discovery#experimental),(grpc://localhost#experimental)?failover=3#test"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ClickHouseNodes servers = ClickHouseNodes.of(\n    "jdbc:ch:http://server1.domain,server2.domain,server3.domain/my_db"\n    + "?load_balancing_policy=random&health_check_interval=5000&failover=2");\n')),(0,r.kt)("h4",{id:"query"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ClickHouseResponse response = client.connect(endpoint) // or client.connect(endpoints)\n    // you\'ll have to parse response manually if using a different format\n    .format(ClickHouseFormat.RowBinaryWithNamesAndTypes)\n    .query("select * from numbers(:limit)")\n    .params(1000).executeAndWait()) {\n            ClickHouseResponseSummary summary = response.getSummary();\n            long totalRows = summary.getTotalRowsToRead();\n')),(0,r.kt)("h4",{id:"streaming-query"},"Streaming Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ClickHouseResponse response = client.connect(endpoint) // or client.connect(endpoints)\n    // you\'ll have to parse response manually if using a different format\n    .format(ClickHouseFormat.RowBinaryWithNamesAndTypes)\n    .query("select * from numbers(:limit)")\n    .params(1000).executeAndWait()) {\n    for (ClickHouseRecord r : response.records()) {\n        int num = r.getValue(0).asInteger();\n        // type conversion\n        String str = r.getValue(0).asString();\n        LocalDate date = r.getValue(0).asDate();\n    }\n')),(0,r.kt)("h4",{id:"insert"},"Insert"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"try (ClickHouseClient client = ClickHouseClient.newInstance(ClickHouseProtocol.HTTP)) {\n    ClickHouseRequest<?> request = client.connect(servers).format(ClickHouseFormat.RowBinaryWithNamesAndTypes);\n    // load data into a table and wait until it's completed\n    request.write()\n        .query(\"insert into my_table select c2, c3 from input('c1 UInt8, c2 String, c3 Int32')\")\n        .data(myInputStream).execute().thenAccept(response -> {\n            response.close();\n        });\n")),(0,r.kt)("h4",{id:"multiple-queries"},"Multiple queries"),(0,r.kt)("p",null,"Execute multiple queries in a worker thread one after another within same session:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CompletableFuture<List<ClickHouseResponseSummary>> future = ClickHouseClient.send(servers.get(),\n    "create database if not exists my_base",\n    "use my_base",\n    "create table if not exists test_table(s String) engine=Memory",\n    "insert into test_table values(\'1\')(\'2\')(\'3\')",\n    "select * from test_table limit 1",\n    "truncate table test_table",\n    "drop table if exists test_table");\n\n// block current thread until queries completed, and then retrieve summaries\nList<ClickHouseResponseSummary> results = future.get();\n')),(0,r.kt)("h2",{id:"jdbc-driver"},"JDBC Driver"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"clickhouse-jdbc")," implements the standard JDBC interface. Being built on top of ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/integrations/sql-clients/clickhouse-client-local"},"clickhouse-client"),", it\nprovides additional features like custom type mapping, transaction support, and standard synchronous ",(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE")," statements, etc., so that it can be easily used with legacy applications and tools."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"clickhouse-jdbc")," API is synchronous, and generally, it has more overheads(e.g., SQL parsing and type mapping/conversion, etc.).\nConsider ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/integrations/sql-clients/clickhouse-client-local"},"clickhouse-client")," when performance is critical or if you prefer a more direct way to access ClickHouse."),(0,r.kt)("h3",{id:"environment-requirements-1"},"Environment requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://openjdk.java.net"},"OpenJDK")," version >= 17")),(0,r.kt)("h3",{id:"compatibility-with-clickhouse-1"},"Compatibility with ClickHouse"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Client version"),(0,r.kt)("th",{parentName:"tr",align:null},"ClickHouse"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.4.0"),(0,r.kt)("td",{parentName:"tr",align:null},"20.7+")))),(0,r.kt)("h3",{id:"installation-1"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>com.clickhouse</groupId>\n    <artifactId>clickhouse-jdbc</artifactId>\n    <version>0.4.0</version>\n    \x3c!-- use uber jar with all dependencies included, change classifier to http for smaller jar --\x3e\n    <classifier>all</classifier>\n    <exclusions>\n        <exclusion>\n            <groupId>*</groupId>\n            <artifactId>*</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n")),(0,r.kt)("h3",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Driver Class"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"com.clickhouse.jdbc.ClickHouseDriver")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"URL Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"jdbc:(ch|clickhouse)[:<protocol>]://endpoint1[,endpoint2,...][/<database>][?param1=value1&param2=value2][#tag1,tag2,...]"),", for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jdbc:ch://localhost")," is same as ",(0,r.kt)("inlineCode",{parentName:"li"},"jdbc:clickhouse:http://localhost:8123")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jdbc:ch:https://localhost")," is same as ",(0,r.kt)("inlineCode",{parentName:"li"},"jdbc:clickhouse:http://localhost:8443?ssl=true&sslmode=STRICT")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jdbc:ch:grpc://localhost")," is same as ",(0,r.kt)("inlineCode",{parentName:"li"},"jdbc:clickhouse:grpc://localhost:9100"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Connection Properties"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"continueBatchOnError"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to continue batch processing when error occurred")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"createDatabaseIfNotExist"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to create database if it does not exist")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"custom_http_headers"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"comma separated custom http headers, for example: ",(0,r.kt)("inlineCode",{parentName:"td"},"User-Agent=client1,X-Gateway-Id=123"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"custom_http_params"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"comma separated custom http query parameters, for example: ",(0,r.kt)("inlineCode",{parentName:"td"},"extremes=0,max_result_rows=100"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nullAsDefault"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")," - treat null value as is and throw exception when inserting null into non-nullable column; ",(0,r.kt)("inlineCode",{parentName:"td"},"1")," - treat null value as is and disable null-check for inserting; ",(0,r.kt)("inlineCode",{parentName:"td"},"2")," - replace null to default value of corresponding data type for both query and insert")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jdbcCompliance"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to support standard synchronous UPDATE/DELETE and fake transaction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"typeMappings"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Customize mapping between ClickHouse data type and Java class, which will affect result of both ",(0,r.kt)("a",{parentName:"td",href:"https://docs.oracle.com/javase/8/docs/api/java/sql/ResultSetMetaData.html#getColumnType-int-"},"getColumnType()")," and ",(0,r.kt)("a",{parentName:"td",href:"https://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html#getObject-java.lang.String-java.lang.Class-"},"getObject(Class<?>)"),". For example: ",(0,r.kt)("inlineCode",{parentName:"td"},"UInt128=java.lang.String,UInt256=java.lang.String"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"wrapperObject"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether ",(0,r.kt)("a",{parentName:"td",href:"https://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html#getObject-int-"},"getObject()")," should return java.sql.Array / java.sql.Struct for Array / Tuple.")))),(0,r.kt)("p",null,"Note: please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-java/blob/main/clickhouse-jdbc/src/main/java/com/clickhouse/jdbc/JdbcConfig.java"},"JDBC specific configuration")," for more."),(0,r.kt)("h3",{id:"supported-data-types-1"},"Supported data types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Format"),(0,r.kt)("th",{parentName:"tr",align:null},"Support"),(0,r.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"AggregatedFunction"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"limited to ",(0,r.kt)("inlineCode",{parentName:"td"},"groupBitmap"),", and known to have issue with 64bit bitmap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Array(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bool"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DateTime","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Decimal","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SET output_format_decimal_trailing_zeros=1")," in 21.9+ for consistency")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Enum","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"can be treated as both string and integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Geo Types"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Point, Ring, Polygon, and MultiPolygon")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int","*",", UInt","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt64 is mapped to ",(0,r.kt)("inlineCode",{parentName:"td"},"long"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IPv","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nested(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Object('JSON')"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SimpleAggregateFunction"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*","String"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tuple(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UUID"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"driver-api-1"},"Driver API"),(0,r.kt)("h4",{id:"connect-to-clickhouse-1"},"Connect to ClickHouse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String url = "jdbc:ch://my-server/system"; // use http protocol and port 8123 by default\n// String url = "jdbc:ch://my-server:8443/system?ssl=true&sslmode=strict&&sslrootcert=/mine.crt";\nProperties properties = new Properties();\n// properties.setProperty("ssl", "true");\n// properties.setProperty("sslmode", "NONE"); // NONE to trust all servers; STRICT for trusted only\nClickHouseDataSource dataSource = new ClickHouseDataSource(url, new Properties());\ntry (Connection conn = dataSource.getConnection("default", "password");\n    Statement stmt = conn.createStatement()) {\n}\n')),(0,r.kt)("h4",{id:"query-1"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\ntry (Connection conn = dataSource.getConnection(...);\n    Statement stmt = conn.createStatement()) {\n    ResultSet rs = stmt.executeQuery("select * from numbers(50000)");\n    while(rs.next()) {\n        // ...\n    }\n}\n')),(0,r.kt)("h4",{id:"insert-1"},"Insert"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"PreparedStatement")," instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"Statement")),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("a",{parentName:"li",href:"/en/sql-reference/table-functions/input/"},"input function")," whenever possible"))),(0,r.kt)("h5",{id:"with-input-table-function"},"With input table function"),(0,r.kt)("p",null,"Recommended way with the best performance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'try (PreparedStatement ps = conn.prepareStatement(\n    "insert into mytable select col1, col2 from input(\'col1 String, col2 DateTime64(3), col3 Int32\')")) {\n    // the column definition will be parsed so the driver knows there are 3 parameters: col1, col2 and col3\n    ps.setString(1, "test"); // col1\n    ps.setObject(2, LocalDateTime.now()); // col2, setTimestamp is slow and not recommended\n    ps.setInt(3, 123); // col3\n    ps.addBatch(); // parameters will be write into buffered stream immediately in binary format\n    ...\n    ps.executeBatch(); // stream everything on-hand into ClickHouse\n}\n')),(0,r.kt)("h5",{id:"insert-2"},"Insert"),(0,r.kt)("p",null,"It's easier to use but slower performance compare to input function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'try (PreparedStatement ps = conn.prepareStatement("insert into mytable(* except (description))")) {\n    // the driver will issue query "select * except (description) from mytable where 0" for type inferring\n    // since description column is excluded, we know there are only two parameters: col1 and col2\n    ps.setString(1, "test"); // id\n    ps.setObject(2, LocalDateTime.now()); // timestamp\n    ps.addBatch(); // parameters will be write into buffered stream immediately in binary format\n    ...\n    ps.executeBatch(); // stream everything on-hand into ClickHouse\n}\n')),(0,r.kt)("h5",{id:"insert-with-placeholders"},"Insert with placeholders"),(0,r.kt)("p",null,"Not recommended as it's based on a large SQL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Note: "insert into mytable values(?,?,?)" is treated as "insert into mytable"\ntry (PreparedStatement ps = conn.prepareStatement("insert into mytable values(trim(?),?,?)")) {\n    ps.setString(1, "test"); // id\n    ps.setObject(2, LocalDateTime.now()); // timestamp\n    ps.setString(3, null); // description\n    ps.addBatch(); // append parameters to the query\n    ...\n    ps.executeBatch(); // issue the composed query: insert into mytable values(...)(...)...(...)\n}\n')),(0,r.kt)("h3",{id:"advanced-api"},"Advanced API"),(0,r.kt)("h4",{id:"handling-datetime-and-time-zones"},"Handling DateTime and time zones"),(0,r.kt)("p",null,"Please to use ",(0,r.kt)("inlineCode",{parentName:"p"},"java.time.LocalDateTime")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"java.time.OffsetDateTime")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"java.sql.Timestamp"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"java.time.LocalDate")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"java.sql.Date"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'try (PreparedStatement ps = conn.prepareStatement("select date_time from mytable where date_time > ?")) {\n    ps.setObject(2, LocalDateTime.now());\n    ResultSet rs = ps.executeQuery();\n    while(rs.next()) {\n        LocalDateTime dateTime = (LocalDateTime) rs.getObject(1);\n    }\n    ...\n}\n')),(0,r.kt)("h4",{id:"handling-aggregatefunction"},"Handling AggregateFunction"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"  As of now, only ",(0,r.kt)("inlineCode",{parentName:"p"},"groupBitmap")," is supported.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// batch insert using input function\ntry (ClickHouseConnection conn = newConnection(props);\n        Statement s = conn.createStatement();\n        PreparedStatement stmt = conn.prepareStatement(\n                "insert into test_batch_input select id, name, value from input(\'id Int32, name Nullable(String), desc Nullable(String), value AggregateFunction(groupBitmap, UInt32)\')")) {\n    s.execute("drop table if exists test_batch_input;"\n            + "create table test_batch_input(id Int32, name Nullable(String), value AggregateFunction(groupBitmap, UInt32))engine=Memory");\n    Object[][] objs = new Object[][] {\n            new Object[] { 1, "a", "aaaaa", ClickHouseBitmap.wrap(1, 2, 3, 4, 5) },\n            new Object[] { 2, "b", null, ClickHouseBitmap.wrap(6, 7, 8, 9, 10) },\n            new Object[] { 3, null, "33333", ClickHouseBitmap.wrap(11, 12, 13) }\n    };\n    for (Object[] v : objs) {\n        stmt.setInt(1, (int) v[0]);\n        stmt.setString(2, (String) v[1]);\n        stmt.setString(3, (String) v[2]);\n        stmt.setObject(4, v[3]);\n        stmt.addBatch();\n    }\n    int[] results = stmt.executeBatch();\n    ...\n}\n\n// use bitmap as query parameter\ntry (PreparedStatement stmt = conn.prepareStatement(\n    "SELECT bitmapContains(my_bitmap, toUInt32(1)) as v1, bitmapContains(my_bitmap, toUInt32(2)) as v2 from {tt \'ext_table\'}")) {\n    stmt.setObject(1, ClickHouseExternalTable.builder().name("ext_table")\n            .columns("my_bitmap AggregateFunction(groupBitmap,UInt32)").format(ClickHouseFormat.RowBinary)\n            .content(new ByteArrayInputStream(ClickHouseBitmap.wrap(1, 3, 5).toBytes()))\n            .asTempTable()\n            .build());\n    ResultSet rs = stmt.executeQuery();\n    Assert.assertTrue(rs.next());\n    Assert.assertEquals(rs.getInt(1), 1);\n    Assert.assertEquals(rs.getInt(2), 0);\n    Assert.assertFalse(rs.next());\n}\n')),(0,r.kt)("h2",{id:"r2dbc-driver"},"R2DBC driver"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://r2dbc.io/"},"R2DBC")," wrapper of async Java client for ClickHouse."),(0,r.kt)("h3",{id:"environment-requirements-2"},"Environment requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://openjdk.java.net"},"OpenJDK")," version >= 17")),(0,r.kt)("h3",{id:"compatibility-with-clickhouse-2"},"Compatibility with ClickHouse"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Client version"),(0,r.kt)("th",{parentName:"tr",align:null},"ClickHouse"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.4.0"),(0,r.kt)("td",{parentName:"tr",align:null},"20.7+")))),(0,r.kt)("h3",{id:"installation-2"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>com.clickhouse</groupId>\n    \x3c!-- change to clickhouse-r2dbc_0.9.1 for SPI 0.9.1.RELEASE --\x3e\n    <artifactId>clickhouse-r2dbc</artifactId>\n    <version>0.4.0</version>\n    \x3c!-- use uber jar with all dependencies included, change classifier to http or grpc for smaller jar --\x3e\n    <classifier>all</classifier>\n    <exclusions>\n        <exclusion>\n            <groupId>*</groupId>\n            <artifactId>*</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n")),(0,r.kt)("h3",{id:"supported-data-types-2"},"Supported data types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Format"),(0,r.kt)("th",{parentName:"tr",align:null},"Support"),(0,r.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"AggregatedFunction"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"limited to ",(0,r.kt)("inlineCode",{parentName:"td"},"groupBitmap"),", and known to have issue with 64bit bitmap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Array(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bool"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DateTime","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Decimal","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SET output_format_decimal_trailing_zeros=1")," in 21.9+ for consistency")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Enum","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"can be treated as both string and integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Geo Types"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"Point, Ring, Polygon, and MultiPolygon")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int","*",", UInt","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt64 is mapped to ",(0,r.kt)("inlineCode",{parentName:"td"},"long"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IPv","*"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nested(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Object('JSON')"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SimpleAggregateFunction"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*","String"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tuple(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UUID"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"driver-api-2"},"Driver API"),(0,r.kt)("h4",{id:"connect-to-clickhouse-2"},"Connect to ClickHouse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ConnectionFactory connectionFactory = ConnectionFactories\n    .get("r2dbc:clickhouse:http://{username}:{password}@{host}:{port}/{database}");\n\n    Mono.from(connectionFactory.create())\n        .flatMapMany(connection -> connection\n')),(0,r.kt)("h4",{id:"query-2"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'connection\n    .createStatement("select domain, path,  toDate(cdate) as d, count(1) as count from clickdb.clicks where domain = :domain group by domain, path, d")\n    .bind("domain", domain)\n    .execute())\n    .flatMap(result -> result\n    .map((row, rowMetadata) -> String.format("%s%s[%s]:%d", row.get("domain", String.class),\n        row.get("path", String.class),\n        row.get("d", LocalDate.class),\n        row.get("count", Long.class)))\n    )\n    .doOnNext(System.out::println)\n    .subscribe();\n')),(0,r.kt)("h4",{id:"insert-3"},"Insert"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'connection\n    .createStatement("insert into clickdb.clicks values (:domain, :path, :cdate, :count)")\n    .bind("domain", click.getDomain())\n    .bind("path", click.getPath())\n    .bind("cdate", LocalDateTime.now())\n    .bind("count", 1)\n    .execute();\n')))}m.isMDXComponent=!0}}]);
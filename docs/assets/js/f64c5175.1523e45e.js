"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[36433],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),f=a,b=m["".concat(s,".").concat(f)]||m[f]||p[f]||l;return n?r.createElement(b,i(i({ref:t},u),{},{components:n})):r.createElement(b,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},56:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),i=["components"],o={slug:"/en/sql-reference/table-functions/merge",sidebar_position:38,sidebar_label:"merge"},s="merge",c={unversionedId:"en/sql-reference/table-functions/merge",id:"en/sql-reference/table-functions/merge",title:"merge",description:"Creates a temporary Merge table. The table structure is taken from the first table encountered that matches the regular expression.",source:"@site/docs/en/sql-reference/table-functions/merge.md",sourceDirName:"en/sql-reference/table-functions",slug:"/en/sql-reference/table-functions/merge",permalink:"/docs/en/sql-reference/table-functions/merge",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/table-functions/merge.md",tags:[],version:"current",sidebarPosition:38,frontMatter:{slug:"/en/sql-reference/table-functions/merge",sidebar_position:38,sidebar_label:"merge"},sidebar:"english",previous:{title:"file",permalink:"/docs/en/sql-reference/table-functions/file"},next:{title:"numbers",permalink:"/docs/en/sql-reference/table-functions/numbers"}},u={},p=[],m={toc:p};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"merge"},"merge"),(0,l.kt)("p",null,"Creates a temporary ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/special/merge"},"Merge")," table. The table structure is taken from the first table encountered that matches the regular expression."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"merge('db_name', 'tables_regexp')\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"db_name")," \u2014 Possible values:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"database name, "),(0,l.kt)("li",{parentName:"ul"},"constant expression that returns a string with a database name, for example, ",(0,l.kt)("inlineCode",{parentName:"li"},"currentDatabase()"),","),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"REGEXP(expression)"),", where ",(0,l.kt)("inlineCode",{parentName:"li"},"expression")," is a regular expression to match the DB names."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"tables_regexp")," \u2014 A regular expression to match the table names in the specified DB or DBs."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/en/engines/table-engines/special/merge"},"Merge")," table engine")))}f.isMDXComponent=!0}}]);
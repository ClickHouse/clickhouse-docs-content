"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[55233],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),c=r,f=p["".concat(l,".").concat(c)]||p[c]||m[c]||o;return n?a.createElement(f,i(i({ref:t},d),{},{components:n})):a.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},42038:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const o={slug:"/en/sql-reference/data-types/domains/",sidebar_position:56,sidebar_label:"Domains"},i="Domains",s={unversionedId:"en/sql-reference/data-types/domains/index",id:"en/sql-reference/data-types/domains/index",title:"Domains",description:"Domains are special-purpose types that add some extra features atop of existing base type, but leaving on-wire and on-disc format of the underlying data type intact. At the moment, ClickHouse does not support user-defined domains.",source:"@site/docs/en/sql-reference/data-types/domains/index.md",sourceDirName:"en/sql-reference/data-types/domains",slug:"/en/sql-reference/data-types/domains/",permalink:"/docs/en/sql-reference/data-types/domains/",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/data-types/domains/index.md",tags:[],version:"current",sidebarPosition:56,frontMatter:{slug:"/en/sql-reference/data-types/domains/",sidebar_position:56,sidebar_label:"Domains"},sidebar:"sqlreference",previous:{title:"Interval",permalink:"/docs/en/sql-reference/data-types/special-data-types/interval"},next:{title:"IPv4",permalink:"/docs/en/sql-reference/data-types/domains/ipv4"}},l={},u=[{value:"Extra Features of Domains",id:"extra-features-of-domains",level:3},{value:"Limitations",id:"limitations",level:3}],d={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"domains"},"Domains"),(0,r.kt)("p",null,"Domains are special-purpose types that add some extra features atop of existing base type, but leaving on-wire and on-disc format of the underlying data type intact. At the moment, ClickHouse does not support user-defined domains."),(0,r.kt)("p",null,"You can use domains anywhere corresponding base type can be used, for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a column of a domain type"),(0,r.kt)("li",{parentName:"ul"},"Read/write values from/to domain column"),(0,r.kt)("li",{parentName:"ul"},"Use it as an index if a base type can be used as an index"),(0,r.kt)("li",{parentName:"ul"},"Call functions with values of domain column")),(0,r.kt)("h3",{id:"extra-features-of-domains"},"Extra Features of Domains"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Explicit column type name in ",(0,r.kt)("inlineCode",{parentName:"li"},"SHOW CREATE TABLE")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"DESCRIBE TABLE")),(0,r.kt)("li",{parentName:"ul"},"Input from human-friendly format with ",(0,r.kt)("inlineCode",{parentName:"li"},"INSERT INTO domain_table(domain_column) VALUES(...)")),(0,r.kt)("li",{parentName:"ul"},"Output to human-friendly format for ",(0,r.kt)("inlineCode",{parentName:"li"},"SELECT domain_column FROM domain_table")),(0,r.kt)("li",{parentName:"ul"},"Loading data from an external source in the human-friendly format: ",(0,r.kt)("inlineCode",{parentName:"li"},"INSERT INTO domain_table FORMAT CSV ..."))),(0,r.kt)("h3",{id:"limitations"},"Limitations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Can\u2019t convert index column of base type to domain type via ",(0,r.kt)("inlineCode",{parentName:"li"},"ALTER TABLE"),"."),(0,r.kt)("li",{parentName:"ul"},"Can\u2019t implicitly convert string values into domain values when inserting data from another column or table."),(0,r.kt)("li",{parentName:"ul"},"Domain adds no constrains on stored values.")))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[93177],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=c(n),p=i,u=m["".concat(l,".").concat(p)]||m[p]||h[p]||s;return n?a.createElement(u,o(o({ref:t},d),{},{components:n})):a.createElement(u,o({ref:t},d))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},47853:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return h}});var a=n(87462),i=n(63366),s=(n(67294),n(3905)),o=["components"],r={slug:"/en/getting-started/example-datasets/github",sidebar_label:"GitHub Repo Analysis",description:"Analyze the ClickHouse GitHub repo or any repository of your choosing"},l="ClickHouse GitHub data",c={unversionedId:"en/getting-started/example-datasets/github",id:"en/getting-started/example-datasets/github",title:"ClickHouse GitHub data",description:"Analyze the ClickHouse GitHub repo or any repository of your choosing",source:"@site/docs/en/getting-started/example-datasets/github.md",sourceDirName:"en/getting-started/example-datasets",slug:"/en/getting-started/example-datasets/github",permalink:"/docs/en/getting-started/example-datasets/github",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/getting-started/example-datasets/github.md",tags:[],version:"current",frontMatter:{slug:"/en/getting-started/example-datasets/github",sidebar_label:"GitHub Repo Analysis",description:"Analyze the ClickHouse GitHub repo or any repository of your choosing"},sidebar:"english",previous:{title:"GitHub Events",permalink:"/docs/en/getting-started/example-datasets/github-events"},next:{title:'New York Public Library "What\'s on the Menu?" Dataset',permalink:"/docs/en/getting-started/example-datasets/menus"}},d={},h=[{value:"History of a single file",id:"history-of-a-single-file",level:2},{value:"Find the current active files",id:"find-the-current-active-files",level:2},{value:"List files with most modifications",id:"list-files-with-most-modifications",level:2},{value:"What day of the week do commits usually occur?",id:"what-day-of-the-week-do-commits-usually-occur",level:2},{value:"History of subdirectory/file - number of lines, commits and contributors over time",id:"history-of-subdirectoryfile---number-of-lines-commits-and-contributors-over-time",level:2},{value:"List files with maximum number of authors",id:"list-files-with-maximum-number-of-authors",level:2},{value:"Oldest lines of code in the repository",id:"oldest-lines-of-code-in-the-repository",level:2},{value:"Files with longest history",id:"files-with-longest-history",level:2},{value:"Distribution of contributors with respect to docs and code over the month",id:"distribution-of-contributors-with-respect-to-docs-and-code-over-the-month",level:2},{value:"Authors with the most diverse impact",id:"authors-with-the-most-diverse-impact",level:2},{value:"Favorite files for an author",id:"favorite-files-for-an-author",level:2},{value:"Largest files with lowest number of authors",id:"largest-files-with-lowest-number-of-authors",level:2},{value:"Commits and lines of code distribution by time; by weekday, by author; for specific subdirectories",id:"commits-and-lines-of-code-distribution-by-time-by-weekday-by-author-for-specific-subdirectories",level:2},{value:"Matrix of authors that shows what authors tends to rewrite another authors code",id:"matrix-of-authors-that-shows-what-authors-tends-to-rewrite-another-authors-code",level:2},{value:"Who is the highest percentage contributor per day of week?",id:"who-is-the-highest-percentage-contributor-per-day-of-week",level:2},{value:"Distribution of code age across repository",id:"distribution-of-code-age-across-repository",level:2},{value:"What percentage of code for an author has been removed by other authors?",id:"what-percentage-of-code-for-an-author-has-been-removed-by-other-authors",level:2},{value:"List files that were rewritten most number of times?",id:"list-files-that-were-rewritten-most-number-of-times",level:2},{value:"What weekday does the code have the highest chance to stay in the repository?",id:"what-weekday-does-the-code-have-the-highest-chance-to-stay-in-the-repository",level:2},{value:"Files sorted by average code age",id:"files-sorted-by-average-code-age",level:2},{value:"Who tends to write more tests / CPP code / comments?",id:"who-tends-to-write-more-tests--cpp-code--comments",level:2},{value:"How does an authors commits change over time with respect to code/comments percentage?",id:"how-does-an-authors-commits-change-over-time-with-respect-to-codecomments-percentage",level:2},{value:"What is the average time before code will be rewritten and the median (half-life of code decay)?",id:"what-is-the-average-time-before-code-will-be-rewritten-and-the-median-half-life-of-code-decay",level:2},{value:"What is the worst time to write code in sense that the code has highest chance to be re-written?",id:"what-is-the-worst-time-to-write-code-in-sense-that-the-code-has-highest-chance-to-be-re-written",level:2},{value:"Which authors code is the most sticky?",id:"which-authors-code-is-the-most-sticky",level:2},{value:"Most consecutive days of commits by an author",id:"most-consecutive-days-of-commits-by-an-author",level:2},{value:"Line by line commit history of a file",id:"line-by-line-commit-history-of-a-file",level:2},{value:"Git blame",id:"git-blame",level:2}],m={toc:h};function p(e){var t=e.components,r=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"clickhouse-github-data"},"ClickHouse GitHub data"),(0,s.kt)("p",null,"This dataset contains all of the commits and changes for the ClickHouse repository. It can be generated using the native ",(0,s.kt)("inlineCode",{parentName:"p"},"git-import")," tool distributed with ClickHouse. "),(0,s.kt)("p",null,"The generated data provides a ",(0,s.kt)("inlineCode",{parentName:"p"},"tsv")," file for each of the following tables:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"commits")," - commits with statistics;"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"file_changes")," - files changed in every commit with the info about the change and statistics;"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"line_changes")," - every changed line in every changed file in every commit with full info about the line and the information about the previous change of this line.")),(0,s.kt)("p",null,"As of November 8th, 2022, each TSV is approximately the following size and number of rows:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"commits")," - 7.8M - 266,051 rows"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"file_changes")," - 53M - 266,051 rows"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"line_changes")," - 2.7G - 7,535,157 rows")),(0,s.kt)("h1",{id:"table-of-contents"},"Table of Contents"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clickhouse-github-data"},"ClickHouse GitHub data")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#table-of-contents"},"Table of Contents")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#generating-the-data"},"Generating the data")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#downloading-and-inserting-the-data"},"Downloading and inserting the data")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#queries"},"Queries"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#history-of-a-single-file"},"History of a single file")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#find-the-current-active-files"},"Find the current active files")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#list-files-with-most-modifications"},"List files with most modifications")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#what-day-of-the-week-do-commits-usually-occur"},"What day of the week do commits usually occur?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#history-of-subdirectoryfile---number-of-lines-commits-and-contributors-over-time"},"History of subdirectory/file - number of lines, commits and contributors over time")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#list-files-with-maximum-number-of-authors"},"List files with maximum number of authors")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#oldest-lines-of-code-in-the-repository"},"Oldest lines of code in the repository")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#files-with-longest-history"},"Files with longest history")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#distribution-of-contributors-with-respect-to-docs-and-code-over-the-month"},"Distribution of contributors with respect to docs and code over the month")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#authors-with-the-most-diverse-impact"},"Authors with the most diverse impact")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#favorite-files-for-an-author"},"Favorite files for an author")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#largest-files-with-lowest-number-of-authors"},"Largest files with lowest number of authors")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#commits-and-lines-of-code-distribution-by-time-by-weekday-by-author-for-specific-subdirectories"},"Commits and lines of code distribution by time; by weekday, by author; for specific subdirectories")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#matrix-of-authors-that-shows-what-authors-tends-to-rewrite-another-authors-code"},"Matrix of authors that shows what authors tends to rewrite another authors code")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#who-is-the-highest-percentage-contributor-per-day-of-week"},"Who is the highest percentage contributor per day of week?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#distribution-of-code-age-across-repository"},"Distribution of code age across repository")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#what-percentage-of-code-for-an-author-has-been-removed-by-other-authors"},"What percentage of code for an author has been removed by other authors?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#list-files-that-were-rewritten-most-number-of-times"},"List files that were rewritten most number of times?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#what-weekday-does-the-code-have-the-highest-chance-to-stay-in-the-repository"},"What weekday does the code have the highest chance to stay in the repository?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#files-sorted-by-average-code-age"},"Files sorted by average code age")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#who-tends-to-write-more-tests--cpp-code--comments"},"Who tends to write more tests / CPP code / comments?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#how-does-an-authors-commits-change-over-time-with-respect-to-codecomments-percentage"},"How does an authors commits change over time with respect to code/comments percentage?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#what-is-the-average-time-before-code-will-be-rewritten-and-the-median-half-life-of-code-decay"},"What is the average time before code will be rewritten and the median (half-life of code decay)?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#what-is-the-worst-time-to-write-code-in-sense-that-the-code-has-highest-chance-to-be-re-written"},"What is the worst time to write code in sense that the code has highest chance to be re-written?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#which-authors-code-is-the-most-sticky"},"Which authors code is the most sticky?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#most-consecutive-days-of-commits-by-an-author"},"Most consecutive days of commits by an author")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#line-by-line-commit-history-of-a-file"},"Line by line commit history of a file")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#unsolved-questions"},"Unsolved Questions"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#git-blame"},"Git blame"))))),(0,s.kt)("h1",{id:"generating-the-data"},"Generating the data"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@github.com:ClickHouse/ClickHouse.git\ncd ClickHouse\nclickhouse git-import --skip-paths 'generated\\.cpp|^(contrib|docs?|website|libs/(libcityhash|liblz4|libdivide|libvectorclass|libdouble-conversion|libcpuid|libzstd|libfarmhash|libmetrohash|libpoco|libwidechar_width))/' --skip-commits-with-messages '^Merge branch '\n")),(0,s.kt)("p",null,"This will take around 3 minutes (as of November 8th 2022) to complete for the ClickHouse repository."),(0,s.kt)("p",null,"A full list of available options can be obtained from the tools native help."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"clickhouse git-import -h\n")),(0,s.kt)("p",null,"This help also provides the DDL for each of the above tables e.g."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"CREATE TABLE git.commits\n(\n    hash String,\n    author LowCardinality(String),\n    time DateTime,\n    message String,\n    files_added UInt32,\n    files_deleted UInt32,\n    files_renamed UInt32,\n    files_modified UInt32,\n    lines_added UInt32,\n    lines_deleted UInt32,\n    hunks_added UInt32,\n    hunks_removed UInt32,\n    hunks_changed UInt32\n) ENGINE = MergeTree ORDER BY time;\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"These queries should work on any repository. Feel free to explore and report your findings")," Some guidelines with respect to execution times (as of November 2022):"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Linux - ",(0,s.kt)("inlineCode",{parentName:"li"},"~/clickhouse git-import")," - 160 mins")),(0,s.kt)("h1",{id:"downloading-and-inserting-the-data"},"Downloading and inserting the data"),(0,s.kt)("p",null,"Generated files for the following repositories can be found below:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"ClickHouse (Nov 8th 2022)",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/clickhouse/commits.tsv.xz"},"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/clickhouse/commits.tsv.xz")," - 2.5 MB"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/clickhouse/file_changes.tsv.xz"},"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/clickhouse/file_changes.tsv.xz")," - 4.5MB"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/clickhouse/line_changes.tsv.xz"},"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/clickhouse/line_changes.tsv.xz")," - 127.4 MB"))),(0,s.kt)("li",{parentName:"ul"},"Linux (Nov 8th 2022)",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/linux/commits.tsv.xz"},"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/linux/commits.tsv.xz")," - 2.5 MB"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/linux/file_changes.tsv.xz"},"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/linux/file_changes.tsv.xz")," - 4.5MB"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/linux/line_changes.tsv.xz"},"https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/linux/line_changes.tsv.xz")," - 127.4 MB")))),(0,s.kt)("p",null,"To insert this data, prepare the database by executing the following queries:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"DROP DATABASE IF EXISTS git;\nCREATE DATABASE git;\n\nCREATE TABLE git.commits\n(\n    hash String,\n    author LowCardinality(String),\n    time DateTime,\n    message String,\n    files_added UInt32,\n    files_deleted UInt32,\n    files_renamed UInt32,\n    files_modified UInt32,\n    lines_added UInt32,\n    lines_deleted UInt32,\n    hunks_added UInt32,\n    hunks_removed UInt32,\n    hunks_changed UInt32\n) ENGINE = MergeTree ORDER BY time;\n\nCREATE TABLE git.file_changes\n(\n    change_type Enum('Add' = 1, 'Delete' = 2, 'Modify' = 3, 'Rename' = 4, 'Copy' = 5, 'Type' = 6),\n    path LowCardinality(String),\n    old_path LowCardinality(String),\n    file_extension LowCardinality(String),\n    lines_added UInt32,\n    lines_deleted UInt32,\n    hunks_added UInt32,\n    hunks_removed UInt32,\n    hunks_changed UInt32,\n\n    commit_hash String,\n    author LowCardinality(String),\n    time DateTime,\n    commit_message String,\n    commit_files_added UInt32,\n    commit_files_deleted UInt32,\n    commit_files_renamed UInt32,\n    commit_files_modified UInt32,\n    commit_lines_added UInt32,\n    commit_lines_deleted UInt32,\n    commit_hunks_added UInt32,\n    commit_hunks_removed UInt32,\n    commit_hunks_changed UInt32\n) ENGINE = MergeTree ORDER BY time;\n\nCREATE TABLE git.line_changes\n(\n    sign Int8,\n    line_number_old UInt32,\n    line_number_new UInt32,\n    hunk_num UInt32,\n    hunk_start_line_number_old UInt32,\n    hunk_start_line_number_new UInt32,\n    hunk_lines_added UInt32,\n    hunk_lines_deleted UInt32,\n    hunk_context LowCardinality(String),\n    line LowCardinality(String),\n    indent UInt8,\n    line_type Enum('Empty' = 0, 'Comment' = 1, 'Punct' = 2, 'Code' = 3),\n\n    prev_commit_hash String,\n    prev_author LowCardinality(String),\n    prev_time DateTime,\n\n    file_change_type Enum('Add' = 1, 'Delete' = 2, 'Modify' = 3, 'Rename' = 4, 'Copy' = 5, 'Type' = 6),\n    path LowCardinality(String),\n    old_path LowCardinality(String),\n    file_extension LowCardinality(String),\n    file_lines_added UInt32,\n    file_lines_deleted UInt32,\n    file_hunks_added UInt32,\n    file_hunks_removed UInt32,\n    file_hunks_changed UInt32,\n\n    commit_hash String,\n    author LowCardinality(String),\n    time DateTime,\n    commit_message String,\n    commit_files_added UInt32,\n    commit_files_deleted UInt32,\n    commit_files_renamed UInt32,\n    commit_files_modified UInt32,\n    commit_lines_added UInt32,\n    commit_lines_deleted UInt32,\n    commit_hunks_added UInt32,\n    commit_hunks_removed UInt32,\n    commit_hunks_changed UInt32\n) ENGINE = MergeTree ORDER BY time;\n")),(0,s.kt)("p",null,"Insert the data using ",(0,s.kt)("inlineCode",{parentName:"p"},"INSERT INTO SELECT")," and the ",(0,s.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/integrations/s3/s3-table-functions/"},"s3 function"),". For example, below, we insert the ClickHouse files into each of their respective tables:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"commits")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO git.commits SELECT *\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/clickhouse/commits.tsv.xz', 'TSV', 'hash String,author LowCardinality(String), time DateTime, message String, files_added UInt32, files_deleted UInt32, files_renamed UInt32, files_modified UInt32, lines_added UInt32, lines_deleted UInt32, hunks_added UInt32, hunks_removed UInt32, hunks_changed UInt32')\n\n0 rows in set. Elapsed: 1.826 sec. Processed 62.78 thousand rows, 8.50 MB (34.39 thousand rows/s., 4.66 MB/s.)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"file_changes")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO git.file_changes SELECT *\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/clickhouse/file_changes.tsv.xz', 'TSV', 'change_type Enum(\\'Add\\' = 1, \\'Delete\\' = 2, \\'Modify\\' = 3, \\'Rename\\' = 4, \\'Copy\\' = 5, \\'Type\\' = 6), path LowCardinality(String), old_path LowCardinality(String), file_extension LowCardinality(String), lines_added UInt32, lines_deleted UInt32, hunks_added UInt32, hunks_removed UInt32, hunks_changed UInt32, commit_hash String, author LowCardinality(String), time DateTime, commit_message String, commit_files_added UInt32, commit_files_deleted UInt32, commit_files_renamed UInt32, commit_files_modified UInt32, commit_lines_added UInt32, commit_lines_deleted UInt32, commit_hunks_added UInt32, commit_hunks_removed UInt32, commit_hunks_changed UInt32')\n\n0 rows in set. Elapsed: 2.688 sec. Processed 266.05 thousand rows, 48.30 MB (98.97 thousand rows/s., 17.97 MB/s.)\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"line_changes")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO git.line_changes SELECT *\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/github/commits/clickhouse/line_changes.tsv.xz', 'TSV', '    sign Int8, line_number_old UInt32, line_number_new UInt32, hunk_num UInt32, hunk_start_line_number_old UInt32, hunk_start_line_number_new UInt32, hunk_lines_added UInt32,\\n    hunk_lines_deleted UInt32, hunk_context LowCardinality(String), line LowCardinality(String), indent UInt8, line_type Enum(\\'Empty\\' = 0, \\'Comment\\' = 1, \\'Punct\\' = 2, \\'Code\\' = 3), prev_commit_hash String, prev_author LowCardinality(String), prev_time DateTime, file_change_type Enum(\\'Add\\' = 1, \\'Delete\\' = 2, \\'Modify\\' = 3, \\'Rename\\' = 4, \\'Copy\\' = 5, \\'Type\\' = 6),\\n    path LowCardinality(String), old_path LowCardinality(String), file_extension LowCardinality(String), file_lines_added UInt32, file_lines_deleted UInt32, file_hunks_added UInt32, file_hunks_removed UInt32, file_hunks_changed UInt32, commit_hash String,\\n    author LowCardinality(String), time DateTime, commit_message String, commit_files_added UInt32, commit_files_deleted UInt32, commit_files_renamed UInt32, commit_files_modified UInt32, commit_lines_added UInt32, commit_lines_deleted UInt32, commit_hunks_added UInt32, commit_hunks_removed UInt32, commit_hunks_changed UInt32')\n\n0 rows in set. Elapsed: 50.535 sec. Processed 7.54 million rows, 2.09 GB (149.11 thousand rows/s., 41.40 MB/s.)\n")),(0,s.kt)("h1",{id:"queries"},"Queries"),(0,s.kt)("p",null,"The tool suggests several queries via its help output. We have answered these in addition to some additional supplementary questions of interest:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#clickhouse-github-data"},"ClickHouse GitHub data")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#table-of-contents"},"Table of Contents")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#generating-the-data"},"Generating the data")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#downloading-and-inserting-the-data"},"Downloading and inserting the data")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#queries"},"Queries"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#history-of-a-single-file"},"History of a single file")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#find-the-current-active-files"},"Find the current active files")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#list-files-with-most-modifications"},"List files with most modifications")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#what-day-of-the-week-do-commits-usually-occur"},"What day of the week do commits usually occur?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#history-of-subdirectoryfile---number-of-lines-commits-and-contributors-over-time"},"History of subdirectory/file - number of lines, commits and contributors over time")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#list-files-with-maximum-number-of-authors"},"List files with maximum number of authors")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#oldest-lines-of-code-in-the-repository"},"Oldest lines of code in the repository")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#files-with-longest-history"},"Files with longest history")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#distribution-of-contributors-with-respect-to-docs-and-code-over-the-month"},"Distribution of contributors with respect to docs and code over the month")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#authors-with-the-most-diverse-impact"},"Authors with the most diverse impact")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#favorite-files-for-an-author"},"Favorite files for an author")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#largest-files-with-lowest-number-of-authors"},"Largest files with lowest number of authors")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#commits-and-lines-of-code-distribution-by-time-by-weekday-by-author-for-specific-subdirectories"},"Commits and lines of code distribution by time; by weekday, by author; for specific subdirectories")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#matrix-of-authors-that-shows-what-authors-tends-to-rewrite-another-authors-code"},"Matrix of authors that shows what authors tends to rewrite another authors code")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#who-is-the-highest-percentage-contributor-per-day-of-week"},"Who is the highest percentage contributor per day of week?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#distribution-of-code-age-across-repository"},"Distribution of code age across repository")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#what-percentage-of-code-for-an-author-has-been-removed-by-other-authors"},"What percentage of code for an author has been removed by other authors?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#list-files-that-were-rewritten-most-number-of-times"},"List files that were rewritten most number of times?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#what-weekday-does-the-code-have-the-highest-chance-to-stay-in-the-repository"},"What weekday does the code have the highest chance to stay in the repository?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#files-sorted-by-average-code-age"},"Files sorted by average code age")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#who-tends-to-write-more-tests--cpp-code--comments"},"Who tends to write more tests / CPP code / comments?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#how-does-an-authors-commits-change-over-time-with-respect-to-codecomments-percentage"},"How does an authors commits change over time with respect to code/comments percentage?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#what-is-the-average-time-before-code-will-be-rewritten-and-the-median-half-life-of-code-decay"},"What is the average time before code will be rewritten and the median (half-life of code decay)?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#what-is-the-worst-time-to-write-code-in-sense-that-the-code-has-highest-chance-to-be-re-written"},"What is the worst time to write code in sense that the code has highest chance to be re-written?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#which-authors-code-is-the-most-sticky"},"Which authors code is the most sticky?")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#most-consecutive-days-of-commits-by-an-author"},"Most consecutive days of commits by an author")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#line-by-line-commit-history-of-a-file"},"Line by line commit history of a file")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#unsolved-questions"},"Unsolved Questions"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#git-blame"},"Git blame"))))),(0,s.kt)("p",null,"These queries are of approximately increasing complexity vs. the tool's arbitrary order."),(0,s.kt)("h2",{id:"history-of-a-single-file"},"History of a single file"),(0,s.kt)("p",null,"The simplest of queries. Here we look at all commit messages for the ",(0,s.kt)("inlineCode",{parentName:"p"},"StorageReplicatedMergeTree.cpp"),". Since these are likely more interesting, we sort by the most recent messages first."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    time,\n    substring(commit_hash, 1, 11) AS commit,\n    change_type,\n    author,\n    path,\n    old_path,\n    lines_added,\n    lines_deleted,\n    commit_message\nFROM git.file_changes\nWHERE path = 'src/Storages/StorageReplicatedMergeTree.cpp'\nORDER BY time DESC\nLIMIT 10\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500commit\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500change_type\u2500\u252c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500old_path\u2500\u252c\u2500lines_added\u2500\u252c\u2500lines_deleted\u2500\u252c\u2500commit_message\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2022-10-30 16:30:51 \u2502 c68ab231f91 \u2502 Modify      \u2502 Alexander Tokmakov \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502          \u2502          13 \u2502            10 \u2502 fix accessing part in Deleting state             \u2502\n\u2502 2022-10-23 16:24:20 \u2502 b40d9200d20 \u2502 Modify      \u2502 Anton Popov        \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502          \u2502          28 \u2502            30 \u2502 better semantic of constsness of DataPartStorage \u2502\n\u2502 2022-10-23 01:23:15 \u2502 56e5daba0c9 \u2502 Modify      \u2502 Anton Popov        \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502          \u2502          28 \u2502            44 \u2502 remove DataPartStorageBuilder                    \u2502\n\u2502 2022-10-21 13:35:37 \u2502 851f556d65a \u2502 Modify      \u2502 Igor Nikonov       \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502          \u2502           3 \u2502             2 \u2502 Remove unused parameter                          \u2502\n\u2502 2022-10-21 13:02:52 \u2502 13d31eefbc3 \u2502 Modify      \u2502 Igor Nikonov       \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502          \u2502           4 \u2502             4 \u2502 Replicated merge tree polishing                  \u2502\n\u2502 2022-10-21 12:25:19 \u2502 4e76629aafc \u2502 Modify      \u2502 Azat Khuzhin       \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502          \u2502           3 \u2502             2 \u2502 Fixes for -Wshorten-64-to-32                     \u2502\n\u2502 2022-10-19 13:59:28 \u2502 05e6b94b541 \u2502 Modify      \u2502 Antonio Andelic    \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502          \u2502           4 \u2502             0 \u2502 Polishing                                        \u2502\n\u2502 2022-10-19 13:34:20 \u2502 e5408aac991 \u2502 Modify      \u2502 Antonio Andelic    \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502          \u2502           3 \u2502            53 \u2502 Simplify logic                                   \u2502\n\u2502 2022-10-18 15:36:11 \u2502 7befe2825c9 \u2502 Modify      \u2502 Alexey Milovidov   \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502          \u2502           2 \u2502             2 \u2502 Update StorageReplicatedMergeTree.cpp            \u2502\n\u2502 2022-10-18 15:35:44 \u2502 0623ad4e374 \u2502 Modify      \u2502 Alexey Milovidov   \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502          \u2502           1 \u2502             1 \u2502 Update StorageReplicatedMergeTree.cpp            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.006 sec. Processed 12.10 thousand rows, 1.60 MB (1.93 million rows/s., 255.40 MB/s.)\n")),(0,s.kt)("p",null,"We can also review the line changes, excluding renames i.e. we won't show changes before a rename event when the file existed under a different name:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    time,\n    substring(commit_hash, 1, 11) AS commit,\n    sign,\n    line_number_old,\n    line_number_new,\n    author,\n    line\nFROM git.line_changes\nWHERE path = 'src/Storages/StorageReplicatedMergeTree.cpp'\nORDER BY line_number_new ASC\nLIMIT 10\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500commit\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500sign\u2500\u252c\u2500line_number_old\u2500\u252c\u2500line_number_new\u2500\u252c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500line\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2020-04-16 02:06:10 \u2502 cdeda4ab915 \u2502   -1 \u2502               1 \u2502               1 \u2502 Alexey Milovidov \u2502 #include <Disks/DiskSpaceMonitor.h>                   \u2502\n\u2502 2020-04-16 02:06:10 \u2502 cdeda4ab915 \u2502    1 \u2502               2 \u2502               1 \u2502 Alexey Milovidov \u2502 #include <Core/Defines.h>                             \u2502\n\u2502 2020-04-16 02:06:10 \u2502 cdeda4ab915 \u2502    1 \u2502               2 \u2502               2 \u2502 Alexey Milovidov \u2502                                                       \u2502\n\u2502 2021-05-03 23:46:51 \u2502 02ce9cc7254 \u2502   -1 \u2502               3 \u2502               2 \u2502 Alexey Milovidov \u2502 #include <Common/FieldVisitors.h>                     \u2502\n\u2502 2021-05-27 22:21:02 \u2502 e2f29b9df02 \u2502   -1 \u2502               3 \u2502               2 \u2502 s-kat            \u2502 #include <Common/FieldVisitors.h>                     \u2502\n\u2502 2022-10-03 22:30:50 \u2502 210882b9c4d \u2502    1 \u2502               2 \u2502               3 \u2502 alesapin         \u2502 #include <ranges>                                     \u2502\n\u2502 2022-10-23 16:24:20 \u2502 b40d9200d20 \u2502    1 \u2502               2 \u2502               3 \u2502 Anton Popov      \u2502 #include <cstddef>                                    \u2502\n\u2502 2021-06-20 09:24:43 \u2502 4c391f8e994 \u2502    1 \u2502               2 \u2502               3 \u2502 Mike Kot         \u2502 #include \"Common/hex.h\"                               \u2502\n\u2502 2021-12-29 09:18:56 \u2502 8112a712336 \u2502   -1 \u2502               6 \u2502               5 \u2502 avogar           \u2502 #include <Common/ThreadPool.h>                        \u2502\n\u2502 2022-04-21 20:19:13 \u2502 9133e398b8c \u2502    1 \u2502              11 \u2502              12 \u2502 Nikolai Kochetov \u2502 #include <Storages/MergeTree/DataPartStorageOnDisk.h> \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.258 sec. Processed 7.54 million rows, 654.92 MB (29.24 million rows/s., 2.54 GB/s.)\n")),(0,s.kt)("p",null,"Note a more complex variant of this query exists where we find the ",(0,s.kt)("a",{parentName:"p",href:"#line-by-line-commit-history-of-a-file"},"line-by-line commit history of a file")," considering renames."),(0,s.kt)("h2",{id:"find-the-current-active-files"},"Find the current active files"),(0,s.kt)("p",null,"This is important for later analysis when we only want to consider the current files in the repository. We estimate this set as the files which haven't been renamed or deleted (and then re-added/re-named). "),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note there appears to have been a broken commit history in relation to files under the ",(0,s.kt)("inlineCode",{parentName:"strong"},"dbms"),", ",(0,s.kt)("inlineCode",{parentName:"strong"},"libs"),", ",(0,s.kt)("inlineCode",{parentName:"strong"},"tests/testflows/")," directories during their renames. We also thus exclude these.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT path\nFROM\n(\n    SELECT\n        old_path AS path,\n        max(time) AS last_time,\n        2 AS change_type\n    FROM git.file_changes\n    GROUP BY old_path\n    UNION ALL\n    SELECT\n        path,\n        max(time) AS last_time,\n        argMax(change_type, time) AS change_type\n    FROM git.file_changes\n    GROUP BY path\n)\nGROUP BY path\nHAVING (argMax(change_type, last_time) != 2) AND NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)') ORDER BY path\nLIMIT 10\n\n\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 tests/queries/0_stateless/01054_random_printable_ascii_ubsan.sh \u2502\n\u2502 tests/queries/0_stateless/02247_read_bools_as_numbers_json.sh   \u2502\n\u2502 tests/performance/file_table_function.xml                       \u2502\n\u2502 tests/queries/0_stateless/01902_self_aliases_in_columns.sql     \u2502\n\u2502 tests/queries/0_stateless/01070_h3_get_base_cell.reference      \u2502\n\u2502 src/Functions/ztest.cpp                                         \u2502\n\u2502 src/Interpreters/InterpreterShowTablesQuery.h                   \u2502\n\u2502 src/Parsers/Kusto/ParserKQLStatement.h                          \u2502\n\u2502 tests/queries/0_stateless/00938_dataset_test.sql                \u2502\n\u2502 src/Dictionaries/Embedded/GeodataProviders/Types.h              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.085 sec. Processed 532.10 thousand rows, 8.68 MB (6.30 million rows/s., 102.64 MB/s.)\n")),(0,s.kt)("p",null,"Note that this allows for files to be renamed and then re-renamed to their original values. First we aggregate ",(0,s.kt)("inlineCode",{parentName:"p"},"old_path")," for a list of deleted files as a result of renaming. We union this with the last operation for every ",(0,s.kt)("inlineCode",{parentName:"p"},"path"),". Finally, we filter this list to those where the final event is not a ",(0,s.kt)("inlineCode",{parentName:"p"},"Delete"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT uniq(path)\nFROM\n(\n    SELECT path\n    FROM\n    (\n        SELECT\n            old_path AS path,\n            max(time) AS last_time,\n            2 AS change_type\n        FROM git.file_changes\n        GROUP BY old_path\n        UNION ALL\n        SELECT\n            path,\n            max(time) AS last_time,\n            argMax(change_type, time) AS change_type\n        FROM git.file_changes\n        GROUP BY path\n    )\n    GROUP BY path\n    HAVING (argMax(change_type, last_time) != 2) AND NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)') ORDER BY path\n)\n\n\u250c\u2500uniq(path)\u2500\u2510\n\u2502      18559 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n1 row in set. Elapsed: 0.089 sec. Processed 532.10 thousand rows, 8.68 MB (6.01 million rows/s., 97.99 MB/s.)\n")),(0,s.kt)("p",null,"Note that we skipped import of several directories during import i.e."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"--skip-paths 'generated\\.cpp|^(contrib|docs?|website|libs/(libcityhash|liblz4|libdivide|libvectorclass|libdouble-conversion|libcpuid|libzstd|libfarmhash|libmetrohash|libpoco|libwidechar_width))/'")),(0,s.kt)("p",null,"Applying this pattern to ",(0,s.kt)("inlineCode",{parentName:"p"},"git list-files"),", reports 18155."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"git ls-files | grep -v -E 'generated\\.cpp|^(contrib|docs?|website|libs/(libcityhash|liblz4|libdivide|libvectorclass|libdouble-conversion|libcpuid|libzstd|libfarmhash|libmetrohash|libpoco|libwidechar_width))/' | wc -l\n   18155\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Our current solution is therefore an estimate of the current files")),(0,s.kt)("p",null,"The difference here is caused by a few factors:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"A rename can occur alongside other modifications to the file. These are listed as separate events in file_changes but with the same time. The ",(0,s.kt)("inlineCode",{parentName:"p"},"argMax")," function has no way of distinguishing these - it picks the first value. The natural ordering of the inserts (the only means of knowing the correct order) is not maintained across the union so modified events can be selected. For example, below the ",(0,s.kt)("inlineCode",{parentName:"p"},"src/Functions/geometryFromColumn.h")," file has several modifications before being renamed to ",(0,s.kt)("inlineCode",{parentName:"p"},"src/Functions/geometryConverters.h"),". Our current solution may pick a Modify event as the latest change causing ",(0,s.kt)("inlineCode",{parentName:"p"},"src/Functions/geometryFromColumn.h")," to be retained. "),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    change_type,\n    path,\n    old_path,\n    time,\n    commit_hash\nFROM git.file_changes\nWHERE (path = 'src/Functions/geometryFromColumn.h') OR (old_path = 'src/Functions/geometryFromColumn.h')\n\n\u250c\u2500change_type\u2500\u252c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500old_path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500commit_hash\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Add         \u2502 src/Functions/geometryFromColumn.h \u2502                                    \u2502 2021-03-11 12:08:16 \u2502 9376b676e9a9bb8911b872e1887da85a45f7479d \u2502\n\u2502 Modify      \u2502 src/Functions/geometryFromColumn.h \u2502                                    \u2502 2021-03-11 12:08:16 \u2502 6d59be5ea4768034f6526f7f9813062e0c369f7b \u2502\n\u2502 Modify      \u2502 src/Functions/geometryFromColumn.h \u2502                                    \u2502 2021-03-11 12:08:16 \u2502 33acc2aa5dc091a7cb948f78c558529789b2bad8 \u2502\n\u2502 Modify      \u2502 src/Functions/geometryFromColumn.h \u2502                                    \u2502 2021-03-11 12:08:16 \u2502 78e0db268ceadc42f82bc63a77ee1a4da6002463 \u2502\n\u2502 Modify      \u2502 src/Functions/geometryFromColumn.h \u2502                                    \u2502 2021-03-11 12:08:16 \u2502 14a891057d292a164c4179bfddaef45a74eaf83a \u2502\n\u2502 Modify      \u2502 src/Functions/geometryFromColumn.h \u2502                                    \u2502 2021-03-11 12:08:16 \u2502 d0d6e6953c2a2af9fb2300921ff96b9362f22edb \u2502\n\u2502 Modify      \u2502 src/Functions/geometryFromColumn.h \u2502                                    \u2502 2021-03-11 12:08:16 \u2502 fe8382521139a58c0ba277eb848e88894658db66 \u2502\n\u2502 Modify      \u2502 src/Functions/geometryFromColumn.h \u2502                                    \u2502 2021-03-11 12:08:16 \u2502 3be3d5cde8788165bc0558f1e2a22568311c3103 \u2502\n\u2502 Modify      \u2502 src/Functions/geometryFromColumn.h \u2502                                    \u2502 2021-03-11 12:08:16 \u2502 afad9bf4d0a55ed52a3f55483bc0973456e10a56 \u2502\n\u2502 Modify      \u2502 src/Functions/geometryFromColumn.h \u2502                                    \u2502 2021-03-11 12:08:16 \u2502 e3290ecc78ca3ea82b49ebcda22b5d3a4df154e6 \u2502\n\u2502 Rename      \u2502 src/Functions/geometryConverters.h \u2502 src/Functions/geometryFromColumn.h \u2502 2021-03-11 12:08:16 \u2502 125945769586baf6ffd15919b29565b1b2a63218 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n11 rows in set. Elapsed: 0.030 sec. Processed 266.05 thousand rows, 6.61 MB (8.89 million rows/s., 220.82 MB/s.)\n"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Broken commit history - missing delete events. Source and cause TBD."))),(0,s.kt)("p",null,"These differences shouldn't meaningfully impact our analysis. ",(0,s.kt)("strong",{parentName:"p"},"We welcome improved versions of this query"),"."),(0,s.kt)("h2",{id:"list-files-with-most-modifications"},"List files with most modifications"),(0,s.kt)("p",null,"Limiting to current files, we consider the number of modifications to be the sum of deletes and additions."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH current_files AS\n    (\n        SELECT path\n        FROM\n        (\n            SELECT\n                old_path AS path,\n                max(time) AS last_time,\n                2 AS change_type\n            FROM git.file_changes\n            GROUP BY old_path\n            UNION ALL\n            SELECT\n                path,\n                max(time) AS last_time,\n                argMax(change_type, time) AS change_type\n            FROM git.file_changes\n            GROUP BY path\n        )\n        GROUP BY path\n        HAVING (argMax(change_type, last_time) != 2) AND (NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)'))\n        ORDER BY path ASC\n    )\nSELECT\n    path,\n    sum(lines_added) + sum(lines_deleted) AS modifications\nFROM git.file_changes\nWHERE (path IN (current_files)) AND (file_extension IN ('h', 'cpp', 'sql'))\nGROUP BY path\nORDER BY modifications DESC\nLIMIT 10\n\n\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500modifications\u2500\u2510\n\u2502 src/Storages/StorageReplicatedMergeTree.cpp            \u2502         21871 \u2502\n\u2502 src/Storages/MergeTree/MergeTreeData.cpp               \u2502         17709 \u2502\n\u2502 programs/client/Client.cpp                             \u2502         15882 \u2502\n\u2502 src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp \u2502         14249 \u2502\n\u2502 src/Interpreters/InterpreterSelectQuery.cpp            \u2502         12636 \u2502\n\u2502 src/Parsers/ExpressionListParsers.cpp                  \u2502         11794 \u2502\n\u2502 src/Analyzer/QueryAnalysisPass.cpp                     \u2502         11760 \u2502\n\u2502 src/Coordination/KeeperStorage.cpp                     \u2502         10225 \u2502\n\u2502 src/Functions/FunctionsConversion.h                    \u2502          9247 \u2502\n\u2502 src/Parsers/ExpressionElementParsers.cpp               \u2502          8197 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.134 sec. Processed 798.15 thousand rows, 16.46 MB (5.95 million rows/s., 122.62 MB/s.)\n")),(0,s.kt)("h2",{id:"what-day-of-the-week-do-commits-usually-occur"},"What day of the week do commits usually occur?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT day_of_week, count() as c FROM git.commits GROUP BY dayOfWeek(time) as day_of_week\n\n\u250c\u2500day_of_week\u2500\u252c\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502           1 \u2502 10291 \u2502\n\u2502           2 \u2502 10519 \u2502\n\u2502           3 \u2502 10598 \u2502\n\u2502           4 \u2502 10812 \u2502\n\u2502           5 \u2502  9964 \u2502\n\u2502           6 \u2502  4583 \u2502\n\u2502           7 \u2502  5134 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n7 rows in set. Elapsed: 0.262 sec. Processed 62.78 thousand rows, 251.14 KB (239.73 thousand rows/s., 958.93 KB/s.)\n")),(0,s.kt)("p",null,"This makes sense with some productivity drop-off on Fridays. Great to see people committing code at weekends! Big thanks to our contributors!"),(0,s.kt)("h2",{id:"history-of-subdirectoryfile---number-of-lines-commits-and-contributors-over-time"},"History of subdirectory/file - number of lines, commits and contributors over time"),(0,s.kt)("p",null,"This would produce a large query result that is unrealistic to show or visualize if unfiltered. We, therefore, allow a file or subdirectory to be filtered in the following example. Here we group by week using the ",(0,s.kt)("inlineCode",{parentName:"p"},"toStartOfWeek")," function - adapt as required."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    week,\n    sum(lines_added) AS lines_added,\n    sum(lines_deleted) AS lines_deleted,\n    uniq(commit_hash) AS num_commits,\n    uniq(author) AS authors\nFROM git.file_changes\nWHERE path LIKE 'src/Storages%'\nGROUP BY toStartOfWeek(time) AS week\nORDER BY week ASC\nLIMIT 10\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500week\u2500\u252c\u2500lines_added\u2500\u252c\u2500lines_deleted\u2500\u252c\u2500num_commits\u2500\u252c\u2500authors\u2500\u2510\n\u2502 2020-03-29 \u2502          49 \u2502            35 \u2502           4 \u2502       3 \u2502\n\u2502 2020-04-05 \u2502         940 \u2502           601 \u2502          55 \u2502      14 \u2502\n\u2502 2020-04-12 \u2502        1472 \u2502           607 \u2502          32 \u2502      11 \u2502\n\u2502 2020-04-19 \u2502         917 \u2502           841 \u2502          39 \u2502      12 \u2502\n\u2502 2020-04-26 \u2502        1067 \u2502           626 \u2502          36 \u2502      10 \u2502\n\u2502 2020-05-03 \u2502         514 \u2502           435 \u2502          27 \u2502      10 \u2502\n\u2502 2020-05-10 \u2502        2552 \u2502           537 \u2502          48 \u2502      12 \u2502\n\u2502 2020-05-17 \u2502        3585 \u2502          1913 \u2502          83 \u2502       9 \u2502\n\u2502 2020-05-24 \u2502        2851 \u2502          1812 \u2502          74 \u2502      18 \u2502\n\u2502 2020-05-31 \u2502        2771 \u2502          2077 \u2502          77 \u2502      16 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n10 rows in set. Elapsed: 0.043 sec. Processed 266.05 thousand rows, 15.85 MB (6.12 million rows/s., 364.61 MB/s.)\n")),(0,s.kt)("p",null,"This data visualizes well. Below we use Superset."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"For lines added and deleted:")),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(85243).Z,width:"2057",height:"720"})),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"For commits and authors:")),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(1716).Z,width:"2041",height:"725"})),(0,s.kt)("h2",{id:"list-files-with-maximum-number-of-authors"},"List files with maximum number of authors"),(0,s.kt)("p",null,"Limit to current files only."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH current_files AS\n    (\n        SELECT path\n        FROM\n        (\n            SELECT\n                old_path AS path,\n                max(time) AS last_time,\n                2 AS change_type\n            FROM git.file_changes\n            GROUP BY old_path\n            UNION ALL\n            SELECT\n                path,\n                max(time) AS last_time,\n                argMax(change_type, time) AS change_type\n            FROM git.file_changes\n            GROUP BY path\n        )\n        GROUP BY path\n        HAVING (argMax(change_type, last_time) != 2) AND (NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)'))\n        ORDER BY path ASC\n    )\nSELECT\n    path,\n    uniq(author) AS num_authors\nFROM git.file_changes\nWHERE path IN (current_files)\nGROUP BY path\nORDER BY num_authors DESC\nLIMIT 10\n\n\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500num_authors\u2500\u2510\n\u2502 src/Core/Settings.h                         \u2502         127 \u2502\n\u2502 CMakeLists.txt                              \u2502          96 \u2502\n\u2502 .gitmodules                                 \u2502          85 \u2502\n\u2502 src/Storages/MergeTree/MergeTreeData.cpp    \u2502          72 \u2502\n\u2502 src/CMakeLists.txt                          \u2502          71 \u2502\n\u2502 programs/server/Server.cpp                  \u2502          70 \u2502\n\u2502 src/Interpreters/Context.cpp                \u2502          64 \u2502\n\u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502          63 \u2502\n\u2502 src/Common/ErrorCodes.cpp                   \u2502          61 \u2502\n\u2502 src/Interpreters/InterpreterSelectQuery.cpp \u2502          59 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.239 sec. Processed 798.15 thousand rows, 14.13 MB (3.35 million rows/s., 59.22 MB/s.)\n")),(0,s.kt)("h2",{id:"oldest-lines-of-code-in-the-repository"},"Oldest lines of code in the repository"),(0,s.kt)("p",null,"Limited to current files only."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'WITH current_files AS\n    (\n        SELECT path\n        FROM\n        (\n            SELECT\n                old_path AS path,\n                max(time) AS last_time,\n                2 AS change_type\n            FROM git.file_changes\n            GROUP BY old_path\n            UNION ALL\n            SELECT\n                path,\n                max(time) AS last_time,\n                argMax(change_type, time) AS change_type\n            FROM git.file_changes\n            GROUP BY path\n        )\n        GROUP BY path\n        HAVING (argMax(change_type, last_time) != 2) AND (NOT match(path, \'(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)\'))\n        ORDER BY path ASC\n    )\nSELECT\n    any(path) AS file_path,\n    line,\n    max(time) AS latest_change,\n    any(file_change_type)\nFROM git.line_changes\nWHERE path IN (current_files)\nGROUP BY line\nORDER BY latest_change ASC\nLIMIT 10\n\n\u250c\u2500file_path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500line\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500latest_change\u2500\u252c\u2500any(file_change_type)\u2500\u2510\n\u2502 utils/compressor/test.sh                    \u2502 ./compressor -d < compressor.snp > compressor2              \u2502 2011-06-17 22:19:39 \u2502 Modify                \u2502\n\u2502 utils/compressor/test.sh                    \u2502 ./compressor < compressor > compressor.snp                  \u2502 2011-06-17 22:19:39 \u2502 Modify                \u2502\n\u2502 utils/compressor/test.sh                    \u2502 ./compressor -d < compressor.qlz > compressor2              \u2502 2014-02-24 03:14:30 \u2502 Add                   \u2502\n\u2502 utils/compressor/test.sh                    \u2502 ./compressor < compressor > compressor.qlz                  \u2502 2014-02-24 03:14:30 \u2502 Add                   \u2502\n\u2502 utils/config-processor/config-processor.cpp \u2502 if (argc != 2)                                              \u2502 2014-02-26 19:10:00 \u2502 Add                   \u2502\n\u2502 utils/config-processor/config-processor.cpp \u2502 std::cerr << "std::exception: " << e.what() << std::endl;   \u2502 2014-02-26 19:10:00 \u2502 Add                   \u2502\n\u2502 utils/config-processor/config-processor.cpp \u2502 std::cerr << "Exception: " << e.displayText() << std::endl; \u2502 2014-02-26 19:10:00 \u2502 Add                   \u2502\n\u2502 utils/config-processor/config-processor.cpp \u2502 Poco::XML::DOMWriter().writeNode(std::cout, document);      \u2502 2014-02-26 19:10:00 \u2502 Add                   \u2502\n\u2502 utils/config-processor/config-processor.cpp \u2502 std::cerr << "Some exception" << std::endl;                 \u2502 2014-02-26 19:10:00 \u2502 Add                   \u2502\n\u2502 utils/config-processor/config-processor.cpp \u2502 std::cerr << "usage: " << argv[0] << " path" << std::endl;  \u2502 2014-02-26 19:10:00 \u2502 Add                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 1.101 sec. Processed 8.07 million rows, 905.86 MB (7.33 million rows/s., 823.13 MB/s.)\n')),(0,s.kt)("h2",{id:"files-with-longest-history"},"Files with longest history"),(0,s.kt)("p",null,"Limited to current files only."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH current_files AS\n    (\n        SELECT path\n        FROM\n        (\n            SELECT\n                old_path AS path,\n                max(time) AS last_time,\n                2 AS change_type\n            FROM git.file_changes\n            GROUP BY old_path\n            UNION ALL\n            SELECT\n                path,\n                max(time) AS last_time,\n                argMax(change_type, time) AS change_type\n            FROM git.file_changes\n            GROUP BY path\n        )\n        GROUP BY path\n        HAVING (argMax(change_type, last_time) != 2) AND (NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)'))\n        ORDER BY path ASC\n    )\nSELECT\n    count() AS c,\n    path,\n    max(time) AS latest_change\nFROM git.file_changes\nWHERE path IN (current_files)\nGROUP BY path\nORDER BY c DESC\nLIMIT 10\n\n\u250c\u2500\u2500\u2500c\u2500\u252c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500latest_change\u2500\u2510\n\u2502 790 \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502 2022-10-30 16:30:51 \u2502\n\u2502 788 \u2502 src/Storages/MergeTree/MergeTreeData.cpp    \u2502 2022-11-04 09:26:44 \u2502\n\u2502 752 \u2502 src/Core/Settings.h                         \u2502 2022-10-25 11:35:25 \u2502\n\u2502 749 \u2502 CMakeLists.txt                              \u2502 2022-10-05 21:00:49 \u2502\n\u2502 575 \u2502 src/Interpreters/InterpreterSelectQuery.cpp \u2502 2022-11-01 10:20:10 \u2502\n\u2502 563 \u2502 CHANGELOG.md                                \u2502 2022-10-27 08:19:50 \u2502\n\u2502 491 \u2502 src/Interpreters/Context.cpp                \u2502 2022-10-25 12:26:29 \u2502\n\u2502 437 \u2502 programs/server/Server.cpp                  \u2502 2022-10-21 12:25:19 \u2502\n\u2502 375 \u2502 programs/client/Client.cpp                  \u2502 2022-11-03 03:16:55 \u2502\n\u2502 350 \u2502 src/CMakeLists.txt                          \u2502 2022-10-24 09:22:37 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.124 sec. Processed 798.15 thousand rows, 14.71 MB (6.44 million rows/s., 118.61 MB/s.)\n")),(0,s.kt)("p",null,"Our core data structure, the Merge Tree, is obviously under constant evolution with a long history of edits!"),(0,s.kt)("h2",{id:"distribution-of-contributors-with-respect-to-docs-and-code-over-the-month"},"Distribution of contributors with respect to docs and code over the month"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"During data capture the changes on the ",(0,s.kt)("inlineCode",{parentName:"strong"},"docs/")," folder have been filtered out so this is an estimate only")),(0,s.kt)("p",null,"Do we write more docs at certain times of the month e.g., around release dates? We can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"countIf")," function to compute a simple ratio, visualizing the result using the ",(0,s.kt)("inlineCode",{parentName:"p"},"bar")," function."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    day,\n    bar(docs_ratio * 1000, 0, 100, 100) AS bar\nFROM\n(\n    SELECT\n        day,\n        countIf(file_extension IN ('h', 'cpp', 'sql', 'md')) AS code,\n        countIf(file_extension = 'md') AS docs,\n        docs / (code + docs) AS docs_ratio\n    FROM git.line_changes\n    WHERE (sign = 1) AND (file_extension IN ('h', 'cpp', 'sql', 'md'))\n    GROUP BY dayOfMonth(time) AS day\n)\n\n\u250c\u2500day\u2500\u252c\u2500bar\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   1 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                          \u2502\n\u2502   2 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                     \u2502\n\u2502   3 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                             \u2502\n\u2502   4 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                \u2502\n\u2502   5 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                        \u2502\n\u2502   6 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                     \u2502\n\u2502   7 \u2502 \u2588\u2588\u2588\u258b                                                         \u2502\n\u2502   8 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                                    \u2502\n\u2502   9 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                               \u2502\n\u2502  10 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                            \u2502\n\u2502  11 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                               \u2502\n\u2502  12 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                          \u2502\n\u2502  13 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                \u2502\n\u2502  14 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u258b                                                      \u2502\n\u2502  15 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                    \u2502\n\u2502  16 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                  \u2502\n\u2502  17 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                       \u2502\n\u2502  18 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                            \u2502\n\u2502  19 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                  \u2502\n\u2502  20 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                            \u2502\n\u2502  21 \u2502 \u2588\u2588\u2588\u2588\u2588                                                        \u2502\n\u2502  22 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                     \u2502\n\u2502  23 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                  \u2502\n\u2502  24 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                     \u2502\n\u2502  25 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                           \u2502\n\u2502  26 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                                  \u2502\n\u2502  27 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e \u2502\n\u2502  28 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c           \u2502\n\u2502  29 \u2502 \u2588\u2588\u2588\u258c                                                         \u2502\n\u2502  30 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                      \u2502\n\u2502  31 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n31 rows in set. Elapsed: 0.043 sec. Processed 7.54 million rows, 40.53 MB (176.56 million rows/s., 949.58 MB/s.)\n")),(0,s.kt)("p",null,"Maybe a little more near the end of the month, but overall we keep a good even distribution."),(0,s.kt)("h2",{id:"authors-with-the-most-diverse-impact"},"Authors with the most diverse impact"),(0,s.kt)("p",null,"We consider diversity here to be the number of unique files an author has contributed to."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    author,\n    uniq(path) AS num_files\nFROM git.file_changes\nWHERE (change_type IN ('Add', 'Modify')) AND (file_extension IN ('h', 'cpp', 'sql'))\nGROUP BY author\nORDER BY num_files DESC\nLIMIT 10\n\n\u250c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500num_files\u2500\u2510\n\u2502 Alexey Milovidov   \u2502      8433 \u2502\n\u2502 Nikolai Kochetov   \u2502      3257 \u2502\n\u2502 Vitaly Baranov     \u2502      2316 \u2502\n\u2502 Maksim Kita        \u2502      2172 \u2502\n\u2502 Azat Khuzhin       \u2502      1988 \u2502\n\u2502 alesapin           \u2502      1818 \u2502\n\u2502 Alexander Tokmakov \u2502      1751 \u2502\n\u2502 Amos Bird          \u2502      1641 \u2502\n\u2502 Ivan               \u2502      1629 \u2502\n\u2502 alexey-milovidov   \u2502      1581 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.041 sec. Processed 266.05 thousand rows, 4.92 MB (6.56 million rows/s., 121.21 MB/s.)\n")),(0,s.kt)("h2",{id:"favorite-files-for-an-author"},"Favorite files for an author"),(0,s.kt)("p",null,"Here we select our founder ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/alexey-milovidov"},"Alexey Milovidov")," and limit our analysis to current files."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH current_files AS\n    (\n        SELECT path\n        FROM\n        (\n            SELECT\n                old_path AS path,\n                max(time) AS last_time,\n                2 AS change_type\n            FROM git.file_changes\n            GROUP BY old_path\n            UNION ALL\n            SELECT\n                path,\n                max(time) AS last_time,\n                argMax(change_type, time) AS change_type\n            FROM git.file_changes\n            GROUP BY path\n        )\n        GROUP BY path\n        HAVING (argMax(change_type, last_time) != 2) AND (NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)'))\n        ORDER BY path ASC\n    )\nSELECT\n    path,\n    count() AS c\nFROM git.file_changes\nWHERE (author = 'alexey-milovidov') AND (path IN (current_files))\nGROUP BY path\nORDER BY c DESC\nLIMIT 10\n\n\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500c\u2500\u2510\n\u2502 CHANGELOG.md                                    \u2502 174 \u2502\n\u2502 CMakeLists.txt                                  \u2502  22 \u2502\n\u2502 src/Common/HashTable/HashTable.h                \u2502   8 \u2502\n\u2502 .github/PULL_REQUEST_TEMPLATE.md                \u2502   8 \u2502\n\u2502 src/Core/Settings.h                             \u2502   8 \u2502\n\u2502 src/Storages/StorageReplicatedMergeTree.cpp     \u2502   7 \u2502\n\u2502 README.md                                       \u2502   7 \u2502\n\u2502 docker/test/fuzzer/run-fuzzer.sh                \u2502   7 \u2502\n\u2502 programs/install/Install.cpp                    \u2502   7 \u2502\n\u2502 src/Dictionaries/ExecutableDictionarySource.cpp \u2502   6 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.106 sec. Processed 798.15 thousand rows, 13.97 MB (7.51 million rows/s., 131.41 MB/s.)\n")),(0,s.kt)("p",null,"This makes sense because Alexey has been responsible for maintaining the Change log. But what if we use the basename of the file to identify his popular files - this allows for renames and should focus on code contributions."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    base,\n    count() AS c\nFROM git.file_changes\nWHERE (author = 'alexey-milovidov') AND (file_extension IN ('h', 'cpp', 'sql'))\nGROUP BY basename(path) AS base\nORDER BY c DESC\nLIMIT 10\n\n\u250c\u2500base\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500c\u2500\u2510\n\u2502 StorageReplicatedMergeTree.cpp \u2502 22 \u2502\n\u2502 Settings.h                     \u2502 22 \u2502\n\u2502 InterpreterSelectQuery.cpp     \u2502 19 \u2502\n\u2502 MergeTreeData.cpp              \u2502 18 \u2502\n\u2502 Client.cpp                     \u2502 17 \u2502\n\u2502 Context.cpp                    \u2502 17 \u2502\n\u2502 Server.cpp                     \u2502 12 \u2502\n\u2502 ExecutableDictionarySource.cpp \u2502 12 \u2502\n\u2502 ExpressionAnalyzer.cpp         \u2502 12 \u2502\n\u2502 PODArray.h                     \u2502 12 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n10 rows in set. Elapsed: 0.032 sec. Processed 266.05 thousand rows, 5.68 MB (8.22 million rows/s., 175.50 MB/s.)\n")),(0,s.kt)("p",null,"This is maybe more reflective of his areas of interest."),(0,s.kt)("h2",{id:"largest-files-with-lowest-number-of-authors"},"Largest files with lowest number of authors"),(0,s.kt)("p",null,"For this, we first need to identify the largest files. Estimating this via a full file reconstruction, for every file, from the history of commits will be very expensive!"),(0,s.kt)("p",null,"To estimate, assuming we restrict to current files, we sum line additions and subtract deletions. We can then compute a ratio of length to the number of authors."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH current_files AS\n    (\n        SELECT path\n        FROM\n        (\n            SELECT\n                old_path AS path,\n                max(time) AS last_time,\n                2 AS change_type\n            FROM git.file_changes\n            GROUP BY old_path\n            UNION ALL\n            SELECT\n                path,\n                max(time) AS last_time,\n                argMax(change_type, time) AS change_type\n            FROM git.file_changes\n            GROUP BY path\n        )\n        GROUP BY path\n        HAVING (argMax(change_type, last_time) != 2) AND (NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)'))\n        ORDER BY path ASC\n    )\nSELECT\n    path,\n    sum(lines_added) - sum(lines_deleted) AS num_lines,\n    uniqExact(author) AS num_authors,\n    num_lines / num_authors AS lines_author_ratio\nFROM git.file_changes\nWHERE path IN (current_files)\nGROUP BY path\nORDER BY lines_author_ratio DESC\nLIMIT 10\n\n\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500num_lines\u2500\u252c\u2500num_authors\u2500\u252c\u2500lines_author_ratio\u2500\u2510\n\u2502 src/Common/ClassificationDictionaries/emotional_dictionary_rus.txt    \u2502    148590 \u2502           1 \u2502             148590 \u2502\n\u2502 src/Functions/ClassificationDictionaries/emotional_dictionary_rus.txt \u2502     55533 \u2502           1 \u2502              55533 \u2502\n\u2502 src/Functions/ClassificationDictionaries/charset_freq.txt             \u2502     35722 \u2502           1 \u2502              35722 \u2502\n\u2502 src/Common/ClassificationDictionaries/charset_freq.txt                \u2502     35722 \u2502           1 \u2502              35722 \u2502\n\u2502 tests/integration/test_storage_meilisearch/movies.json                \u2502     19549 \u2502           1 \u2502              19549 \u2502\n\u2502 tests/queries/0_stateless/02364_multiSearch_function_family.reference \u2502     12874 \u2502           1 \u2502              12874 \u2502\n\u2502 src/Functions/ClassificationDictionaries/programming_freq.txt         \u2502      9434 \u2502           1 \u2502               9434 \u2502\n\u2502 src/Common/ClassificationDictionaries/programming_freq.txt            \u2502      9434 \u2502           1 \u2502               9434 \u2502\n\u2502 tests/performance/explain_ast.xml                                     \u2502      5911 \u2502           1 \u2502               5911 \u2502\n\u2502 src/Analyzer/QueryAnalysisPass.cpp                                    \u2502      5686 \u2502           1 \u2502               5686 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.138 sec. Processed 798.15 thousand rows, 16.57 MB (5.79 million rows/s., 120.11 MB/s.)\n")),(0,s.kt)("p",null,"Text dictionaries aren't maybe realistic, so lets restrict to code only via a file extension filter!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH current_files AS\n    (\n        SELECT path\n        FROM\n        (\n            SELECT\n                old_path AS path,\n                max(time) AS last_time,\n                2 AS change_type\n            FROM git.file_changes\n            GROUP BY old_path\n            UNION ALL\n            SELECT\n                path,\n                max(time) AS last_time,\n                argMax(change_type, time) AS change_type\n            FROM git.file_changes\n            GROUP BY path\n        )\n        GROUP BY path\n        HAVING (argMax(change_type, last_time) != 2) AND (NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)'))\n        ORDER BY path ASC\n    )\nSELECT\n    path,\n    sum(lines_added) - sum(lines_deleted) AS num_lines,\n    uniqExact(author) AS num_authors,\n    num_lines / num_authors AS lines_author_ratio\nFROM git.file_changes\nWHERE (path IN (current_files)) AND (file_extension IN ('h', 'cpp', 'sql'))\nGROUP BY path\nORDER BY lines_author_ratio DESC\nLIMIT 10\n\n\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500num_lines\u2500\u252c\u2500num_authors\u2500\u252c\u2500lines_author_ratio\u2500\u2510\n\u2502 src/Analyzer/QueryAnalysisPass.cpp    \u2502      5686 \u2502           1 \u2502               5686 \u2502\n\u2502 src/Analyzer/QueryTreeBuilder.cpp     \u2502       880 \u2502           1 \u2502                880 \u2502\n\u2502 src/Planner/Planner.cpp               \u2502       873 \u2502           1 \u2502                873 \u2502\n\u2502 src/Backups/RestorerFromBackup.cpp    \u2502       869 \u2502           1 \u2502                869 \u2502\n\u2502 utils/memcpy-bench/FastMemcpy.h       \u2502       770 \u2502           1 \u2502                770 \u2502\n\u2502 src/Planner/PlannerActionsVisitor.cpp \u2502       765 \u2502           1 \u2502                765 \u2502\n\u2502 src/Functions/sphinxstemen.cpp        \u2502       728 \u2502           1 \u2502                728 \u2502\n\u2502 src/Planner/PlannerJoinTree.cpp       \u2502       708 \u2502           1 \u2502                708 \u2502\n\u2502 src/Planner/PlannerJoins.cpp          \u2502       695 \u2502           1 \u2502                695 \u2502\n\u2502 src/Analyzer/QueryNode.h              \u2502       607 \u2502           1 \u2502                607 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n10 rows in set. Elapsed: 0.140 sec. Processed 798.15 thousand rows, 16.84 MB (5.70 million rows/s., 120.32 MB/s.)\n")),(0,s.kt)("p",null,"There is some recency bias in this - newer files have fewer opportunities for commits. What about if we restrict to files at least 1 yr old?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH current_files AS\n    (\n        SELECT path\n        FROM\n        (\n            SELECT\n                old_path AS path,\n                max(time) AS last_time,\n                2 AS change_type\n            FROM git.file_changes\n            GROUP BY old_path\n            UNION ALL\n            SELECT\n                path,\n                max(time) AS last_time,\n                argMax(change_type, time) AS change_type\n            FROM git.file_changes\n            GROUP BY path\n        )\n        GROUP BY path\n        HAVING (argMax(change_type, last_time) != 2) AND (NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)'))\n        ORDER BY path ASC\n    )\nSELECT\n    min(time) AS min_date,\n    path,\n    sum(lines_added) - sum(lines_deleted) AS num_lines,\n    uniqExact(author) AS num_authors,\n    num_lines / num_authors AS lines_author_ratio\nFROM git.file_changes\nWHERE (path IN (current_files)) AND (file_extension IN ('h', 'cpp', 'sql'))\nGROUP BY path\nHAVING min_date <= (now() - toIntervalYear(1))\nORDER BY lines_author_ratio DESC\nLIMIT 10\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500min_date\u2500\u252c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500num_lines\u2500\u252c\u2500num_authors\u2500\u252c\u2500lines_author_ratio\u2500\u2510\n\u2502 2021-03-08 07:00:54 \u2502 utils/memcpy-bench/FastMemcpy.h                                \u2502       770 \u2502           1 \u2502                770 \u2502\n\u2502 2021-05-04 13:47:34 \u2502 src/Functions/sphinxstemen.cpp                                 \u2502       728 \u2502           1 \u2502                728 \u2502\n\u2502 2021-03-14 16:52:51 \u2502 utils/memcpy-bench/glibc/dwarf2.h                              \u2502       592 \u2502           1 \u2502                592 \u2502\n\u2502 2021-03-08 09:04:52 \u2502 utils/memcpy-bench/FastMemcpy_Avx.h                            \u2502       496 \u2502           1 \u2502                496 \u2502\n\u2502 2020-10-19 01:10:50 \u2502 tests/queries/0_stateless/01518_nullable_aggregate_states2.sql \u2502       411 \u2502           1 \u2502                411 \u2502\n\u2502 2020-11-24 14:53:34 \u2502 programs/server/GRPCHandler.cpp                                \u2502       399 \u2502           1 \u2502                399 \u2502\n\u2502 2021-03-09 14:10:28 \u2502 src/DataTypes/Serializations/SerializationSparse.cpp           \u2502       363 \u2502           1 \u2502                363 \u2502\n\u2502 2021-08-20 15:06:57 \u2502 src/Functions/vectorFunctions.cpp                              \u2502      1327 \u2502           4 \u2502             331.75 \u2502\n\u2502 2020-08-04 03:26:23 \u2502 src/Interpreters/MySQL/CreateQueryConvertVisitor.cpp           \u2502       311 \u2502           1 \u2502                311 \u2502\n\u2502 2020-11-06 15:45:13 \u2502 src/Storages/Rocksdb/StorageEmbeddedRocksdb.cpp                \u2502       611 \u2502           2 \u2502              305.5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.143 sec. Processed 798.15 thousand rows, 18.00 MB (5.58 million rows/s., 125.87 MB/s.)\n")),(0,s.kt)("h2",{id:"commits-and-lines-of-code-distribution-by-time-by-weekday-by-author-for-specific-subdirectories"},"Commits and lines of code distribution by time; by weekday, by author; for specific subdirectories"),(0,s.kt)("p",null,"We interpret this as the number of lines added and removed by the day of the week. In this case, we focus on the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/ClickHouse/tree/master/src/Functions"},"Functions directory")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    dayOfWeek,\n    uniq(commit_hash) AS commits,\n    sum(lines_added) AS lines_added,\n    sum(lines_deleted) AS lines_deleted\nFROM git.file_changes\nWHERE path LIKE 'src/Functions%'\nGROUP BY toDayOfWeek(time) AS dayOfWeek\n\n\u250c\u2500dayOfWeek\u2500\u252c\u2500commits\u2500\u252c\u2500lines_added\u2500\u252c\u2500lines_deleted\u2500\u2510\n\u2502         1 \u2502     476 \u2502       24619 \u2502         15782 \u2502\n\u2502         2 \u2502     434 \u2502       18098 \u2502          9938 \u2502\n\u2502         3 \u2502     496 \u2502       26562 \u2502         20883 \u2502\n\u2502         4 \u2502     587 \u2502       65674 \u2502         18862 \u2502\n\u2502         5 \u2502     504 \u2502       85917 \u2502         14518 \u2502\n\u2502         6 \u2502     314 \u2502       13604 \u2502         10144 \u2502\n\u2502         7 \u2502     294 \u2502       11938 \u2502          6451 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n7 rows in set. Elapsed: 0.034 sec. Processed 266.05 thousand rows, 14.66 MB (7.73 million rows/s., 425.56 MB/s.)\n")),(0,s.kt)("p",null,"And by time of day,"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    hourOfDay,\n    uniq(commit_hash) AS commits,\n    sum(lines_added) AS lines_added,\n    sum(lines_deleted) AS lines_deleted\nFROM git.file_changes\nWHERE path LIKE 'src/Functions%'\nGROUP BY toHour(time) AS hourOfDay\n\n\u250c\u2500hourOfDay\u2500\u252c\u2500commits\u2500\u252c\u2500lines_added\u2500\u252c\u2500lines_deleted\u2500\u2510\n\u2502         0 \u2502      71 \u2502        4169 \u2502          3404 \u2502\n\u2502         1 \u2502      90 \u2502        2174 \u2502          1927 \u2502\n\u2502         2 \u2502      65 \u2502        2343 \u2502          1515 \u2502\n\u2502         3 \u2502      76 \u2502        2552 \u2502           493 \u2502\n\u2502         4 \u2502      62 \u2502        1480 \u2502          1304 \u2502\n\u2502         5 \u2502      38 \u2502        1644 \u2502           253 \u2502\n\u2502         6 \u2502     104 \u2502        4434 \u2502          2979 \u2502\n\u2502         7 \u2502     117 \u2502        4171 \u2502          1678 \u2502\n\u2502         8 \u2502     106 \u2502        4604 \u2502          4673 \u2502\n\u2502         9 \u2502     135 \u2502       60550 \u2502          2678 \u2502\n\u2502        10 \u2502     149 \u2502        6133 \u2502          3482 \u2502\n\u2502        11 \u2502     182 \u2502        8040 \u2502          3833 \u2502\n\u2502        12 \u2502     209 \u2502       29428 \u2502         15040 \u2502\n\u2502        13 \u2502     187 \u2502       10204 \u2502          5491 \u2502\n\u2502        14 \u2502     204 \u2502        9028 \u2502          6060 \u2502\n\u2502        15 \u2502     231 \u2502       15179 \u2502         10077 \u2502\n\u2502        16 \u2502     196 \u2502        9568 \u2502          5925 \u2502\n\u2502        17 \u2502     138 \u2502        4941 \u2502          3849 \u2502\n\u2502        18 \u2502     123 \u2502        4193 \u2502          3036 \u2502\n\u2502        19 \u2502     165 \u2502        8817 \u2502          6646 \u2502\n\u2502        20 \u2502     140 \u2502        3749 \u2502          2379 \u2502\n\u2502        21 \u2502     132 \u2502       41585 \u2502          4182 \u2502\n\u2502        22 \u2502      85 \u2502        4094 \u2502          3955 \u2502\n\u2502        23 \u2502     100 \u2502        3332 \u2502          1719 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n24 rows in set. Elapsed: 0.039 sec. Processed 266.05 thousand rows, 14.66 MB (6.77 million rows/s., 372.89 MB/s.)\n")),(0,s.kt)("p",null,"This distribution makes sense given most of our development team is in Amsterdam. The ",(0,s.kt)("inlineCode",{parentName:"p"},"bar")," functions helps us visualize these distributions:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    hourOfDay,\n    bar(commits, 0, 400, 50) AS commits,\n    bar(lines_added, 0, 30000, 50) AS lines_added,\n    bar(lines_deleted, 0, 15000, 50) AS lines_deleted\nFROM\n(\n    SELECT\n        hourOfDay,\n        uniq(commit_hash) AS commits,\n        sum(lines_added) AS lines_added,\n        sum(lines_deleted) AS lines_deleted\n    FROM git.file_changes\n    WHERE path LIKE 'src/Functions%'\n    GROUP BY toHour(time) AS hourOfDay\n)\n\n\u250c\u2500hourOfDay\u2500\u252c\u2500commits\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500lines_added\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500lines_deleted\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         0 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                     \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u258a                                            \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                                       \u2502\n\u2502         1 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                  \u2502 \u2588\u2588\u2588\u258c                                               \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u258d                                            \u2502\n\u2502         2 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \u2502 \u2588\u2588\u2588\u258a                                               \u2502 \u2588\u2588\u2588\u2588\u2588                                              \u2502\n\u2502         3 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                    \u2502 \u2588\u2588\u2588\u2588\u258e                                              \u2502 \u2588\u258b                                                 \u2502\n\u2502         4 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                      \u2502 \u2588\u2588\u258d                                                \u2502 \u2588\u2588\u2588\u2588\u258e                                              \u2502\n\u2502         5 \u2502 \u2588\u2588\u2588\u2588\u258b                         \u2502 \u2588\u2588\u258b                                                \u2502 \u258b                                                  \u2502\n\u2502         6 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                           \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                         \u2502\n\u2502         7 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b               \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u258a                                            \u2502 \u2588\u2588\u2588\u2588\u2588\u258c                                             \u2502\n\u2502         8 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                           \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                   \u2502\n\u2502         9 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a             \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                          \u2502\n\u2502        10 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b           \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                        \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                       \u2502\n\u2502        11 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b       \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                     \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                      \u2502\n\u2502        12 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2502\n\u2502        13 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d      \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                  \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                                \u2502\n\u2502        14 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c    \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                    \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                              \u2502\n\u2502        15 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                         \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                 \u2502\n\u2502        16 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c     \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                   \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                               \u2502\n\u2502        17 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e            \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                          \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                      \u2502\n\u2502        18 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d              \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u258a                                            \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                         \u2502\n\u2502        19 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b         \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                    \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                            \u2502\n\u2502        20 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c            \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u258f                                            \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                           \u2502\n\u2502        21 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c             \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                     \u2502\n\u2502        22 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                   \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u258b                                            \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                     \u2502\n\u2502        23 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                 \u2502 \u2588\u2588\u2588\u2588\u2588\u258c                                             \u2502 \u2588\u2588\u2588\u2588\u2588\u258b                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n24 rows in set. Elapsed: 0.038 sec. Processed 266.05 thousand rows, 14.66 MB (7.09 million rows/s., 390.69 MB/s.)\n")),(0,s.kt)("h2",{id:"matrix-of-authors-that-shows-what-authors-tends-to-rewrite-another-authors-code"},"Matrix of authors that shows what authors tends to rewrite another authors code"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"sign = -1")," indicates a code deletion. We exclude punctuation and the insertion of empty lines."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    prev_author,\n    author,\n    count() AS c\nFROM git.line_changes\nWHERE (sign = -1) AND (file_extension IN ('h', 'cpp')) AND (line_type NOT IN ('Punct', 'Empty')) AND (author != prev_author) AND (prev_author != '')\nGROUP BY\n    prev_author,\n    author\nORDER BY c DESC\nLIMIT 1 BY prev_author\nLIMIT 20\n\n\u250c\u2500prev_author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 Ivan                 \u2502 Alexey Milovidov \u2502 18554 \u2502\n\u2502 Alexey Arno          \u2502 Alexey Milovidov \u2502 18475 \u2502\n\u2502 Michael Kolupaev     \u2502 Alexey Milovidov \u2502 14135 \u2502\n\u2502 Alexey Milovidov     \u2502 Nikolai Kochetov \u2502 13435 \u2502\n\u2502 Andrey Mironov       \u2502 Alexey Milovidov \u2502 10418 \u2502\n\u2502 proller              \u2502 Alexey Milovidov \u2502  7280 \u2502\n\u2502 Nikolai Kochetov     \u2502 Alexey Milovidov \u2502  6806 \u2502\n\u2502 alexey-milovidov     \u2502 Alexey Milovidov \u2502  5027 \u2502\n\u2502 Vitaliy Lyudvichenko \u2502 Alexey Milovidov \u2502  4390 \u2502\n\u2502 Amos Bird            \u2502 Ivan Lezhankin   \u2502  3125 \u2502\n\u2502 f1yegor              \u2502 Alexey Milovidov \u2502  3119 \u2502\n\u2502 Pavel Kartavyy       \u2502 Alexey Milovidov \u2502  3087 \u2502\n\u2502 Alexey Zatelepin     \u2502 Alexey Milovidov \u2502  2978 \u2502\n\u2502 alesapin             \u2502 Alexey Milovidov \u2502  2949 \u2502\n\u2502 Sergey Fedorov       \u2502 Alexey Milovidov \u2502  2727 \u2502\n\u2502 Ivan Lezhankin       \u2502 Alexey Milovidov \u2502  2618 \u2502\n\u2502 Vasily Nemkov        \u2502 Alexey Milovidov \u2502  2547 \u2502\n\u2502 Alexander Tokmakov   \u2502 Alexey Milovidov \u2502  2493 \u2502\n\u2502 Nikita Vasilev       \u2502 Maksim Kita      \u2502  2420 \u2502\n\u2502 Anton Popov          \u2502 Amos Bird        \u2502  2127 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n20 rows in set. Elapsed: 0.098 sec. Processed 7.54 million rows, 42.16 MB (76.67 million rows/s., 428.99 MB/s.)\n")),(0,s.kt)("h2",{id:"who-is-the-highest-percentage-contributor-per-day-of-week"},"Who is the highest percentage contributor per day of week?"),(0,s.kt)("p",null,"If we consider by just number of commits:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    day_of_week,\n    author,\n    count() AS c\nFROM git.commits\nGROUP BY\n    dayOfWeek(time) AS day_of_week,\n    author\nORDER BY\n    day_of_week ASC,\n    c DESC\nLIMIT 1 BY day_of_week\n\n\u250c\u2500day_of_week\u2500\u252c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502           1 \u2502 Alexey Milovidov \u2502 2204 \u2502\n\u2502           2 \u2502 Alexey Milovidov \u2502 1588 \u2502\n\u2502           3 \u2502 Alexey Milovidov \u2502 1725 \u2502\n\u2502           4 \u2502 Alexey Milovidov \u2502 1915 \u2502\n\u2502           5 \u2502 Alexey Milovidov \u2502 1940 \u2502\n\u2502           6 \u2502 Alexey Milovidov \u2502 1851 \u2502\n\u2502           7 \u2502 Alexey Milovidov \u2502 2400 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n7 rows in set. Elapsed: 0.012 sec. Processed 62.78 thousand rows, 395.47 KB (5.44 million rows/s., 34.27 MB/s.)\n")),(0,s.kt)("p",null,"OK, some possible advantages here to the longest contributor - our founder Alexey. Lets limit our analysis to the last year."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    day_of_week,\n    author,\n    count() AS c\nFROM git.commits\nWHERE time > (now() - toIntervalYear(1))\nGROUP BY\n    dayOfWeek(time) AS day_of_week,\n    author\nORDER BY\n    day_of_week ASC,\n    c DESC\nLIMIT 1 BY day_of_week\n\n\u250c\u2500day_of_week\u2500\u252c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500c\u2500\u2510\n\u2502           1 \u2502 Alexey Milovidov \u2502 198 \u2502\n\u2502           2 \u2502 alesapin         \u2502 162 \u2502\n\u2502           3 \u2502 alesapin         \u2502 163 \u2502\n\u2502           4 \u2502 Azat Khuzhin     \u2502 166 \u2502\n\u2502           5 \u2502 alesapin         \u2502 191 \u2502\n\u2502           6 \u2502 Alexey Milovidov \u2502 179 \u2502\n\u2502           7 \u2502 Alexey Milovidov \u2502 243 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n7 rows in set. Elapsed: 0.004 sec. Processed 21.82 thousand rows, 140.02 KB (4.88 million rows/s., 31.29 MB/s.)\n")),(0,s.kt)("p",null,"This is still a little simple and doesn't reflect people's work. "),(0,s.kt)("p",null,"A better metric might be who is the top contributor each day as a fraction of the total work performed in the last year. Note that we treat the deletion and adding code equally."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    top_author.day_of_week,\n    top_author.author,\n    top_author.author_work / all_work.total_work AS top_author_percent\nFROM\n(\n    SELECT\n        day_of_week,\n        author,\n        sum(lines_added) + sum(lines_deleted) AS author_work\n    FROM git.file_changes\n    WHERE time > (now() - toIntervalYear(1))\n    GROUP BY\n        author,\n        dayOfWeek(time) AS day_of_week\n    ORDER BY\n        day_of_week ASC,\n        author_work DESC\n    LIMIT 1 BY day_of_week\n) AS top_author\nINNER JOIN\n(\n    SELECT\n        day_of_week,\n        sum(lines_added) + sum(lines_deleted) AS total_work\n    FROM git.file_changes\n    WHERE time > (now() - toIntervalYear(1))\n    GROUP BY dayOfWeek(time) AS day_of_week\n) AS all_work USING (day_of_week)\n\n\u250c\u2500day_of_week\u2500\u252c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500top_author_percent\u2500\u2510\n\u2502           1 \u2502 Alexey Milovidov    \u2502  0.3168282877768332 \u2502\n\u2502           2 \u2502 Mikhail f. Shiryaev \u2502  0.3523434231193969 \u2502\n\u2502           3 \u2502 vdimir              \u2502 0.11859742484577324 \u2502\n\u2502           4 \u2502 Nikolay Degterinsky \u2502 0.34577318920318467 \u2502\n\u2502           5 \u2502 Alexey Milovidov    \u2502 0.13208704423684223 \u2502\n\u2502           6 \u2502 Alexey Milovidov    \u2502 0.18895257783624633 \u2502\n\u2502           7 \u2502 Robert Schulze      \u2502  0.3617405888930302 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n7 rows in set. Elapsed: 0.014 sec. Processed 106.12 thousand rows, 1.38 MB (7.61 million rows/s., 98.65 MB/s.)\n")),(0,s.kt)("h2",{id:"distribution-of-code-age-across-repository"},"Distribution of code age across repository"),(0,s.kt)("p",null,"We limit the analysis to the current files. For brevity, we restrict the results to a depth of 2 with 5 files per root folder. Adjust as required."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH current_files AS\n    (\n        SELECT path\n        FROM\n        (\n            SELECT\n                old_path AS path,\n                max(time) AS last_time,\n                2 AS change_type\n            FROM git.file_changes\n            GROUP BY old_path\n            UNION ALL\n            SELECT\n                path,\n                max(time) AS last_time,\n                argMax(change_type, time) AS change_type\n            FROM git.file_changes\n            GROUP BY path\n        )\n        GROUP BY path\n        HAVING (argMax(change_type, last_time) != 2) AND (NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)'))\n        ORDER BY path ASC\n    )\nSELECT\n    concat(root, '/', sub_folder) AS folder,\n    round(avg(days_present)) AS avg_age_of_files,\n    min(days_present) AS min_age_files,\n    max(days_present) AS max_age_files,\n    count() AS c\nFROM\n(\n    SELECT\n        path,\n        dateDiff('day', min(time), toDate('2022-11-03')) AS days_present\n    FROM git.file_changes\n    WHERE (path IN (current_files)) AND (file_extension IN ('h', 'cpp', 'sql'))\n    GROUP BY path\n)\nGROUP BY\n    splitByChar('/', path)[1] AS root,\n    splitByChar('/', path)[2] AS sub_folder\nORDER BY\n    root ASC,\n    c DESC\nLIMIT 5 BY root\n\n\u250c\u2500folder\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500avg_age_of_files\u2500\u252c\u2500min_age_files\u2500\u252c\u2500max_age_files\u2500\u252c\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 base/base                        \u2502              387 \u2502           201 \u2502           397 \u2502   84 \u2502\n\u2502 base/glibc-compatibility         \u2502              887 \u2502            59 \u2502           993 \u2502   19 \u2502\n\u2502 base/consistent-hashing          \u2502              993 \u2502           993 \u2502           993 \u2502    5 \u2502\n\u2502 base/widechar_width              \u2502              993 \u2502           993 \u2502           993 \u2502    2 \u2502\n\u2502 base/consistent-hashing-sumbur   \u2502              993 \u2502           993 \u2502           993 \u2502    2 \u2502\n\u2502 docker/test                      \u2502             1043 \u2502          1043 \u2502          1043 \u2502    1 \u2502\n\u2502 programs/odbc-bridge             \u2502              835 \u2502            91 \u2502           945 \u2502   25 \u2502\n\u2502 programs/copier                  \u2502              587 \u2502            14 \u2502           945 \u2502   22 \u2502\n\u2502 programs/library-bridge          \u2502              155 \u2502            47 \u2502           608 \u2502   21 \u2502\n\u2502 programs/disks                   \u2502              144 \u2502            62 \u2502           150 \u2502   14 \u2502\n\u2502 programs/server                  \u2502              874 \u2502           709 \u2502           945 \u2502   10 \u2502\n\u2502 rust/BLAKE3                      \u2502               52 \u2502            52 \u2502            52 \u2502    1 \u2502\n\u2502 src/Functions                    \u2502              752 \u2502             0 \u2502           944 \u2502  809 \u2502\n\u2502 src/Storages                     \u2502              700 \u2502             8 \u2502           944 \u2502  736 \u2502\n\u2502 src/Interpreters                 \u2502              684 \u2502             3 \u2502           944 \u2502  490 \u2502\n\u2502 src/Processors                   \u2502              703 \u2502            44 \u2502           944 \u2502  482 \u2502\n\u2502 src/Common                       \u2502              673 \u2502             7 \u2502           944 \u2502  473 \u2502\n\u2502 tests/queries                    \u2502              674 \u2502            -5 \u2502           945 \u2502 3777 \u2502\n\u2502 tests/integration                \u2502              656 \u2502           132 \u2502           945 \u2502    4 \u2502\n\u2502 utils/memcpy-bench               \u2502              601 \u2502           599 \u2502           605 \u2502   10 \u2502\n\u2502 utils/keeper-bench               \u2502              570 \u2502           569 \u2502           570 \u2502    7 \u2502\n\u2502 utils/durability-test            \u2502              793 \u2502           793 \u2502           793 \u2502    4 \u2502\n\u2502 utils/self-extracting-executable \u2502              143 \u2502           143 \u2502           143 \u2502    3 \u2502\n\u2502 utils/self-extr-exec             \u2502              224 \u2502           224 \u2502           224 \u2502    2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n24 rows in set. Elapsed: 0.129 sec. Processed 798.15 thousand rows, 15.11 MB (6.19 million rows/s., 117.08 MB/s.)\n")),(0,s.kt)("h2",{id:"what-percentage-of-code-for-an-author-has-been-removed-by-other-authors"},"What percentage of code for an author has been removed by other authors?"),(0,s.kt)("p",null,"For this question, we need the number of lines written by an author divided by the total number of lines they have had removed by another contributor."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    k,\n    written_code.c,\n    removed_code.c,\n    removed_code.c / written_code.c AS remove_ratio\nFROM\n(\n    SELECT\n        author AS k,\n        count() AS c\n    FROM git.line_changes\n    WHERE (sign = 1) AND (file_extension IN ('h', 'cpp')) AND (line_type NOT IN ('Punct', 'Empty'))\n    GROUP BY k\n) AS written_code\nINNER JOIN\n(\n    SELECT\n        prev_author AS k,\n        count() AS c\n    FROM git.line_changes\n    WHERE (sign = -1) AND (file_extension IN ('h', 'cpp')) AND (line_type NOT IN ('Punct', 'Empty')) AND (author != prev_author)\n    GROUP BY k\n) AS removed_code USING (k)\nWHERE written_code.c > 1000\nORDER BY remove_ratio DESC\nLIMIT 10\n\n\u250c\u2500k\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500c\u2500\u252c\u2500removed_code.c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500remove_ratio\u2500\u2510\n\u2502 Marek Vavrus\u030ca      \u2502  1458 \u2502           1318 \u2502 0.9039780521262003 \u2502\n\u2502 Ivan               \u2502 32715 \u2502          27500 \u2502 0.8405930001528351 \u2502\n\u2502 artpaul            \u2502  3450 \u2502           2840 \u2502 0.8231884057971014 \u2502\n\u2502 Silviu Caragea     \u2502  1542 \u2502           1209 \u2502 0.7840466926070039 \u2502\n\u2502 Ruslan             \u2502  1027 \u2502            802 \u2502 0.7809152872444012 \u2502\n\u2502 Tsarkova Anastasia \u2502  1755 \u2502           1364 \u2502 0.7772079772079772 \u2502\n\u2502 Vyacheslav Alipov  \u2502  3526 \u2502           2727 \u2502 0.7733976176971072 \u2502\n\u2502 Marek Vavru\u0161a      \u2502  1467 \u2502           1124 \u2502 0.7661895023858214 \u2502\n\u2502 f1yegor            \u2502  7194 \u2502           5213 \u2502 0.7246316374756742 \u2502\n\u2502 kreuzerkrieg       \u2502  3406 \u2502           2468 \u2502  0.724603640634175 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.126 sec. Processed 15.07 million rows, 73.51 MB (119.97 million rows/s., 585.16 MB/s.)\n")),(0,s.kt)("h2",{id:"list-files-that-were-rewritten-most-number-of-times"},"List files that were rewritten most number of times?"),(0,s.kt)("p",null,"We consider a rewrite to be when over 50% of the file are deleted, and 50% added. Adjust the query to your own interpretation of what constitutes this."),(0,s.kt)("p",null,"The query is limited to the current files only. We list all file changes by grouping by ",(0,s.kt)("inlineCode",{parentName:"p"},"path")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"commit_hash"),", returning the number of lines added and removed. Using a window function, we estimate the file's total size at any moment in time by performing a cumulative sum and estimating the impact of any change on file size as ",(0,s.kt)("inlineCode",{parentName:"p"},"lines added - lines removed"),". Using this statistic, we can calculate the percentage of the file that has been added or removed for each change. Finally, we count the number of file changes that constitute a rewrite per file i.e. ",(0,s.kt)("inlineCode",{parentName:"p"},"(percent_add >= 0.5) AND (percent_delete >= 0.5) AND current_size > 50"),". Note we require files to be more than 50 lines to avoid early contributions to a file being counted as a rewrite. This also avoids a bias to very small files, which may be more likely to be rewritten."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH\n    current_files AS\n    (\n        SELECT path\n        FROM\n        (\n            SELECT\n                old_path AS path,\n                max(time) AS last_time,\n                2 AS change_type\n            FROM git.file_changes\n            GROUP BY old_path\n            UNION ALL\n            SELECT\n                path,\n                max(time) AS last_time,\n                argMax(change_type, time) AS change_type\n            FROM git.file_changes\n            GROUP BY path\n        )\n        GROUP BY path\n        HAVING (argMax(change_type, last_time) != 2) AND (NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)'))\n        ORDER BY path ASC\n    ),\n    file_changes AS\n    (\n        SELECT\n            path,\n            max(time) AS max_time,\n            commit_hash,\n            any(lines_added) AS num_added,\n            any(lines_deleted) AS num_deleted,\n            any(change_type) AS type\n        FROM git.file_changes\n        WHERE (change_type IN ('Add', 'Modify')) AND (path IN (current_files)) AND (file_extension IN ('h', 'cpp', 'sql'))\n        GROUP BY\n            path,\n            commit_hash\n        ORDER BY\n            path ASC,\n            max_time ASC\n    ),\n    rewrites AS\n    (\n        SELECT\n            path,\n            commit_hash,\n            max_time,\n            type,\n            num_added,\n            num_deleted,\n            sum(num_added - num_deleted) OVER (PARTITION BY path ORDER BY max_time ASC) AS current_size,\n            if(current_size > 0, num_added / current_size, 0) AS percent_add,\n            if(current_size > 0, num_deleted / current_size, 0) AS percent_delete\n        FROM file_changes\n    )\nSELECT\n    path,\n    count() AS num_rewrites\nFROM rewrites\nWHERE (type = 'Modify') AND (percent_add >= 0.5) AND (percent_delete >= 0.5) AND (current_size > 50)\nGROUP BY path\nORDER BY num_rewrites DESC\nLIMIT 10\n\n\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500num_rewrites\u2500\u2510\n\u2502 src/Storages/WindowView/StorageWindowView.cpp         \u2502            8 \u2502\n\u2502 src/Functions/array/arrayIndex.h                      \u2502            7 \u2502\n\u2502 src/Dictionaries/CacheDictionary.cpp                  \u2502            6 \u2502\n\u2502 src/Dictionaries/RangeHashedDictionary.cpp            \u2502            5 \u2502\n\u2502 programs/client/Client.cpp                            \u2502            4 \u2502\n\u2502 src/Functions/polygonPerimeter.cpp                    \u2502            4 \u2502\n\u2502 src/Functions/polygonsEquals.cpp                      \u2502            4 \u2502\n\u2502 src/Functions/polygonsWithin.cpp                      \u2502            4 \u2502\n\u2502 src/Processors/Formats/Impl/ArrowColumnToCHColumn.cpp \u2502            4 \u2502\n\u2502 src/Functions/polygonsSymDifference.cpp               \u2502            4 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.299 sec. Processed 798.15 thousand rows, 31.52 MB (2.67 million rows/s., 105.29 MB/s.)\n")),(0,s.kt)("h2",{id:"what-weekday-does-the-code-have-the-highest-chance-to-stay-in-the-repository"},"What weekday does the code have the highest chance to stay in the repository?"),(0,s.kt)("p",null,"For this, we need to identify a line of code uniquely. We estimate this(as the same line may appear multiple times in a file) using the path and line contents."),(0,s.kt)("p",null,"We query for lines added, joining this with the lines removed - filtering to cases where the latter occurs more recently than the former. This gives us the deleted lines from which we can compute the time between these two events."),(0,s.kt)("p",null,"Finally, we aggregate across this dataset to compute the average number of days lines stay in the repository by the day of the week."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    day_of_week_added,\n    count() AS num,\n    avg(days_present) AS avg_days_present\nFROM\n(\n    SELECT\n        added_code.line,\n        added_code.time AS added_day,\n        dateDiff('day', added_code.time, removed_code.time) AS days_present\n    FROM\n    (\n        SELECT\n            path,\n            line,\n            max(time) AS time\n        FROM git.line_changes\n        WHERE (sign = 1) AND (line_type NOT IN ('Punct', 'Empty'))\n        GROUP BY\n            path,\n            line\n    ) AS added_code\n    INNER JOIN\n    (\n        SELECT\n            path,\n            line,\n            max(time) AS time\n        FROM git.line_changes\n        WHERE (sign = -1) AND (line_type NOT IN ('Punct', 'Empty'))\n        GROUP BY\n            path,\n            line\n    ) AS removed_code USING (path, line)\n    WHERE removed_code.time > added_code.time\n)\nGROUP BY dayOfWeek(added_day) AS day_of_week_added\n\n\u250c\u2500day_of_week_added\u2500\u252c\u2500\u2500\u2500\u2500num\u2500\u252c\u2500\u2500\u2500avg_days_present\u2500\u2510\n\u2502                 1 \u2502 171879 \u2502 193.81759260875384 \u2502\n\u2502                 2 \u2502 141448 \u2502  153.0931013517335 \u2502\n\u2502                 3 \u2502 161230 \u2502 137.61553681076722 \u2502\n\u2502                 4 \u2502 255728 \u2502 121.14149799787273 \u2502\n\u2502                 5 \u2502 203907 \u2502 141.60181847606998 \u2502\n\u2502                 6 \u2502  62305 \u2502 202.43449161383518 \u2502\n\u2502                 7 \u2502  70904 \u2502  220.0266134491707 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n7 rows in set. Elapsed: 3.965 sec. Processed 15.07 million rows, 1.92 GB (3.80 million rows/s., 483.50 MB/s.)\n")),(0,s.kt)("h2",{id:"files-sorted-by-average-code-age"},"Files sorted by average code age"),(0,s.kt)("p",null,"This query uses the same principle as ",(0,s.kt)("a",{parentName:"p",href:"#what-weekday-does-the-code-have-the-highest-chance-to-stay-in-the-repository"},"What weekday does the code have the highest chance to stay in the repository")," - by aiming to uniquely identify a line of code using the path and line contents.\nThis allows us to identify the time between when a line was added and removed. We filter to current files and code only, however, and average the time for each file across lines."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH\n    current_files AS\n    (\n        SELECT path\n        FROM\n        (\n            SELECT\n                old_path AS path,\n                max(time) AS last_time,\n                2 AS change_type\n            FROM git.file_changes\n            GROUP BY old_path\n            UNION ALL\n            SELECT\n                path,\n                max(time) AS last_time,\n                argMax(change_type, time) AS change_type\n            FROM git.file_changes\n            GROUP BY path\n        )\n        GROUP BY path\n        HAVING (argMax(change_type, last_time) != 2) AND (NOT match(path, '(^dbms/)|(^libs/)|(^tests/testflows/)|(^programs/server/store/)'))\n        ORDER BY path ASC\n    ),\n    lines_removed AS\n    (\n        SELECT\n            added_code.path AS path,\n            added_code.line,\n            added_code.time AS added_day,\n            dateDiff('day', added_code.time, removed_code.time) AS days_present\n        FROM\n        (\n            SELECT\n                path,\n                line,\n                max(time) AS time,\n                any(file_extension) AS file_extension\n            FROM git.line_changes\n            WHERE (sign = 1) AND (line_type NOT IN ('Punct', 'Empty'))\n            GROUP BY\n                path,\n                line\n        ) AS added_code\n        INNER JOIN\n        (\n            SELECT\n                path,\n                line,\n                max(time) AS time\n            FROM git.line_changes\n            WHERE (sign = -1) AND (line_type NOT IN ('Punct', 'Empty'))\n            GROUP BY\n                path,\n                line\n        ) AS removed_code USING (path, line)\n        WHERE (removed_code.time > added_code.time) AND (path IN (current_files)) AND (file_extension IN ('h', 'cpp', 'sql'))\n    )\nSELECT\n    path,\n    avg(days_present) AS avg_code_age\nFROM lines_removed\nGROUP BY path\nORDER BY avg_code_age DESC\nLIMIT 10\n\n\u250c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500avg_code_age\u2500\u2510\n\u2502 utils/corrector_utf8/corrector_utf8.cpp                         \u2502 1353.888888888889 \u2502\n\u2502 tests/queries/0_stateless/01288_shard_max_network_bandwidth.sql \u2502               881 \u2502\n\u2502 src/Functions/replaceRegexpOne.cpp                              \u2502               861 \u2502\n\u2502 src/Functions/replaceRegexpAll.cpp                              \u2502               861 \u2502\n\u2502 src/Functions/replaceOne.cpp                                    \u2502               861 \u2502\n\u2502 utils/zookeeper-remove-by-list/main.cpp                         \u2502            838.25 \u2502\n\u2502 tests/queries/0_stateless/01356_state_resample.sql              \u2502               819 \u2502\n\u2502 tests/queries/0_stateless/01293_create_role.sql                 \u2502               819 \u2502\n\u2502 src/Functions/ReplaceStringImpl.h                               \u2502               810 \u2502\n\u2502 src/Interpreters/createBlockSelector.cpp                        \u2502               795 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 3.134 sec. Processed 16.13 million rows, 1.83 GB (5.15 million rows/s., 582.99 MB/s.)\n")),(0,s.kt)("h2",{id:"who-tends-to-write-more-tests--cpp-code--comments"},"Who tends to write more tests / CPP code / comments?"),(0,s.kt)("p",null,"There are a few ways we can address this question. Focusing on the code to test ratio, this query is relatively simple - count the number of contributions to folders containing ",(0,s.kt)("inlineCode",{parentName:"p"},"tests")," and compute the ratio to total contributions."),(0,s.kt)("p",null,"Note we limit to users with more than 20 changes to focus on regular committers and avoid a bias to one-off contributions."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    author,\n    countIf((file_extension NOT IN ('h', 'cpp')) AND (path LIKE '%tests%')) AS test,\n    countIf((file_extension IN ('h', 'cpp', 'sql')) AND (NOT (path LIKE '%tests%'))) AS code,\n    code / (code + test) AS ratio_code\nFROM git.file_changes\nGROUP BY author\nHAVING code > 20\nORDER BY code DESC\nLIMIT 20\n\n\u250c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500test\u2500\u252c\u2500\u2500code\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500ratio_code\u2500\u2510\n\u2502 Alexey Milovidov     \u2502 9016 \u2502 41799 \u2502 0.8225720751746531 \u2502\n\u2502 Nikolai Kochetov     \u2502 1376 \u2502 13361 \u2502 0.9066295718260161 \u2502\n\u2502 alesapin             \u2502 3704 \u2502  8796 \u2502            0.70368 \u2502\n\u2502 kssenii              \u2502 1257 \u2502  6769 \u2502  0.843384001993521 \u2502\n\u2502 Maksim Kita          \u2502 1352 \u2502  5862 \u2502 0.8125866370945384 \u2502\n\u2502 Alexander Tokmakov   \u2502 2011 \u2502  5727 \u2502  0.740113724476609 \u2502\n\u2502 Vitaly Baranov       \u2502 2245 \u2502  5521 \u2502 0.7109193922225083 \u2502\n\u2502 Ivan Lezhankin       \u2502  803 \u2502  4698 \u2502 0.8540265406289765 \u2502\n\u2502 Anton Popov          \u2502 1056 \u2502  4346 \u2502 0.8045168456127361 \u2502\n\u2502 Ivan                 \u2502 4937 \u2502  4269 \u2502 0.4637193134912014 \u2502\n\u2502 Azat Khuzhin         \u2502 2651 \u2502  3697 \u2502 0.5823881537492124 \u2502\n\u2502 Amos Bird            \u2502  702 \u2502  2901 \u2502 0.8051623646960866 \u2502\n\u2502 proller              \u2502 1662 \u2502  2377 \u2502 0.5885120079227532 \u2502\n\u2502 chertus              \u2502  706 \u2502  2359 \u2502 0.7696574225122349 \u2502\n\u2502 alexey-milovidov     \u2502  330 \u2502  2321 \u2502 0.8755186721991701 \u2502\n\u2502 Alexey Arno          \u2502  207 \u2502  2310 \u2502 0.9177592371871275 \u2502\n\u2502 Vitaliy Lyudvichenko \u2502  479 \u2502  2283 \u2502 0.8265749456915279 \u2502\n\u2502 Robert Schulze       \u2502  328 \u2502  2196 \u2502 0.8700475435816165 \u2502\n\u2502 CurtizJ              \u2502  812 \u2502  2158 \u2502 0.7265993265993266 \u2502\n\u2502 Alexander Kuzmenkov  \u2502 1198 \u2502  2092 \u2502 0.6358662613981763 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n20 rows in set. Elapsed: 0.034 sec. Processed 266.05 thousand rows, 4.65 MB (7.93 million rows/s., 138.76 MB/s.)\n")),(0,s.kt)("p",null,"We can plot this distribution as a histogram."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH (\n        SELECT histogram(10)(ratio_code) AS hist\n        FROM\n        (\n            SELECT\n                author,\n                countIf((file_extension NOT IN ('h', 'cpp')) AND (path LIKE '%tests%')) AS test,\n                countIf((file_extension IN ('h', 'cpp', 'sql')) AND (NOT (path LIKE '%tests%'))) AS code,\n                code / (code + test) AS ratio_code\n            FROM git.file_changes\n            GROUP BY author\n            HAVING code > 20\n        )\n    ) AS hist\nSELECT\n    arrayJoin(hist).1 AS lower,\n    arrayJoin(hist).2 AS upper,\n    bar(arrayJoin(hist).3, 0, 100, 20) AS bar\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500lower\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500upper\u2500\u252c\u2500bar\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 0.033562166285278416 \u2502 0.08337307389808846 \u2502 \u258f             \u2502\n\u2502  0.08337307389808846 \u2502 0.17470067710547066 \u2502 \u258d             \u2502\n\u2502  0.17470067710547066 \u2502 0.25909878535992237 \u2502 \u258d             \u2502\n\u2502  0.25909878535992237 \u2502  0.3775444108257119 \u2502 \u258b             \u2502\n\u2502   0.3775444108257119 \u2502  0.5108436376911997 \u2502 \u2588\u2588\u2588\u258f          \u2502\n\u2502   0.5108436376911997 \u2502   0.627700343453621 \u2502 \u2588\u2588\u2588\u2588\u2588\u258b        \u2502\n\u2502    0.627700343453621 \u2502  0.7417374581723406 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  \u2502\n\u2502   0.7417374581723406 \u2502  0.8467725898688147 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f \u2502\n\u2502   0.8467725898688147 \u2502  0.9427852671078976 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c   \u2502\n\u2502   0.9427852671078976 \u2502                   1 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.053 sec. Processed 266.05 thousand rows, 4.65 MB (5.01 million rows/s., 87.61 MB/s.)\n")),(0,s.kt)("p",null,"Most contributors write more code than tests, as you'd expect."),(0,s.kt)("p",null,"What about who adds the most comments when contributing code?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    author,\n    countIf((line_type = 'Comment') OR (line_type = 'Punct')) AS comments,\n    countIf(line_type = 'Code') AS code,\n    comments / (comments + code) AS ratio_comments\nFROM git.line_changes\nWHERE (file_extension IN ('h', 'cpp', 'sql')) AND (sign = 1)\nGROUP BY author\nHAVING code > 20\nORDER BY code DESC\nLIMIT 10\n\n\u250c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500comments\u2500\u252c\u2500\u2500\u2500code\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500ratio_comments\u2500\u2510\n\u2502 Alexey Milovidov   \u2502   100869 \u2502 356978 \u2502 0.22031158880586746 \u2502\n\u2502 Nikolai Kochetov   \u2502    34057 \u2502 113261 \u2502  0.2311801680717903 \u2502\n\u2502 Vitaly Baranov     \u2502    24994 \u2502  84504 \u2502 0.22825987689272864 \u2502\n\u2502 Maksim Kita        \u2502    23338 \u2502  78778 \u2502 0.22854400877433506 \u2502\n\u2502 alesapin           \u2502    21976 \u2502  72279 \u2502 0.23315473980160203 \u2502\n\u2502 kssenii            \u2502    19465 \u2502  61852 \u2502 0.23937184106644366 \u2502\n\u2502 Alexey Arno        \u2502    16469 \u2502  61674 \u2502 0.21075464213045314 \u2502\n\u2502 Alexander Tokmakov \u2502    10760 \u2502  41964 \u2502 0.20408163265306123 \u2502\n\u2502 Anton Popov        \u2502     9158 \u2502  38448 \u2502  0.1923707095744234 \u2502\n\u2502 Ivan               \u2502     6480 \u2502  33711 \u2502   0.161230126147645 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.136 sec. Processed 7.54 million rows, 31.57 MB (55.33 million rows/s., 231.83 MB/s.)\n")),(0,s.kt)("p",null,"Surprisingly high % for all our contributors and part of what makes our code so readable."),(0,s.kt)("h2",{id:"how-does-an-authors-commits-change-over-time-with-respect-to-codecomments-percentage"},"How does an authors commits change over time with respect to code/comments percentage?"),(0,s.kt)("p",null,"To compute this by author is trivial,"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    author,\n    countIf(line_type = 'Code') AS code_lines,\n    countIf((line_type = 'Comment') OR (line_type = 'Punct')) AS comments,\n    code_lines / (comments + code_lines) AS ratio_code,\n    toStartOfWeek(time) AS week\nFROM git.line_changes\nGROUP BY\n    time,\n    author\nORDER BY\n    author ASC,\n    time ASC\nLIMIT 10\n\n\u250c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500code_lines\u2500\u252c\u2500comments\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500ratio_code\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500week\u2500\u2510\n\u2502 1lann                       \u2502          8 \u2502        0 \u2502                  1 \u2502 2022-03-06 \u2502\n\u2502 20018712                    \u2502          2 \u2502        0 \u2502                  1 \u2502 2020-09-13 \u2502\n\u2502 243f6a8885a308d313198a2e037 \u2502          0 \u2502        2 \u2502                  0 \u2502 2020-12-06 \u2502\n\u2502 243f6a8885a308d313198a2e037 \u2502          0 \u2502      112 \u2502                  0 \u2502 2020-12-06 \u2502\n\u2502 243f6a8885a308d313198a2e037 \u2502          0 \u2502       14 \u2502                  0 \u2502 2020-12-06 \u2502\n\u2502 3ldar-nasyrov               \u2502          2 \u2502        0 \u2502                  1 \u2502 2021-03-14 \u2502\n\u2502 821008736@qq.com            \u2502         27 \u2502        2 \u2502 0.9310344827586207 \u2502 2019-04-21 \u2502\n\u2502 ANDREI STAROVEROV           \u2502        182 \u2502       60 \u2502 0.7520661157024794 \u2502 2021-05-09 \u2502\n\u2502 ANDREI STAROVEROV           \u2502          7 \u2502        0 \u2502                  1 \u2502 2021-05-09 \u2502\n\u2502 ANDREI STAROVEROV           \u2502         32 \u2502       12 \u2502 0.7272727272727273 \u2502 2021-05-09 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.145 sec. Processed 7.54 million rows, 51.09 MB (51.83 million rows/s., 351.44 MB/s.)\n")),(0,s.kt)("p",null,"Ideally, however, we want to see how this changes in aggregate across all authors from the first day they start committing. Do they slowly reduce the number of comments they write?"),(0,s.kt)("p",null,"To compute this, we first work out each author's comments ratio over time - similar to ",(0,s.kt)("a",{parentName:"p",href:"#who-tends-to-write-more-tests--cpp-code--comments"},"Who tends to write more tests / CPP code / comments?"),". This is joined against each author's start date, allowing us to calculate the comment ratio by week offset."),(0,s.kt)("p",null,"After calculating the average by-week offset across all authors, we sample these results by selecting every 10th week."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH author_ratios_by_offset AS\n    (\n        SELECT\n            author,\n            dateDiff('week', start_dates.start_date, contributions.week) AS week_offset,\n            ratio_code\n        FROM\n        (\n            SELECT\n                author,\n                toStartOfWeek(min(time)) AS start_date\n            FROM git.line_changes\n            WHERE file_extension IN ('h', 'cpp', 'sql')\n            GROUP BY author AS start_dates\n        ) AS start_dates\n        INNER JOIN\n        (\n            SELECT\n                author,\n                countIf(line_type = 'Code') AS code,\n                countIf((line_type = 'Comment') OR (line_type = 'Punct')) AS comments,\n                comments / (comments + code) AS ratio_code,\n                toStartOfWeek(time) AS week\n            FROM git.line_changes\n            WHERE (file_extension IN ('h', 'cpp', 'sql')) AND (sign = 1)\n            GROUP BY\n                time,\n                author\n            HAVING code > 20\n            ORDER BY\n                author ASC,\n                time ASC\n        ) AS contributions USING (author)\n    )\nSELECT\n    week_offset,\n    avg(ratio_code) AS avg_code_ratio\nFROM author_ratios_by_offset\nGROUP BY week_offset\nHAVING (week_offset % 10) = 0\nORDER BY week_offset ASC\nLIMIT 20\n\n\u250c\u2500week_offset\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500avg_code_ratio\u2500\u2510\n\u2502           0 \u2502 0.21626798253005078 \u2502\n\u2502          10 \u2502 0.18299433892099454 \u2502\n\u2502          20 \u2502 0.22847255749045017 \u2502\n\u2502          30 \u2502  0.2037816688365288 \u2502\n\u2502          40 \u2502  0.1987063517030308 \u2502\n\u2502          50 \u2502 0.17341406302829748 \u2502\n\u2502          60 \u2502  0.1808884776496144 \u2502\n\u2502          70 \u2502 0.18711773536450496 \u2502\n\u2502          80 \u2502 0.18905573684766458 \u2502\n\u2502          90 \u2502  0.2505147771581594 \u2502\n\u2502         100 \u2502  0.2427673990917429 \u2502\n\u2502         110 \u2502 0.19088569009169926 \u2502\n\u2502         120 \u2502 0.14218574654598348 \u2502\n\u2502         130 \u2502 0.20894252550489317 \u2502\n\u2502         140 \u2502 0.22316626978848397 \u2502\n\u2502         150 \u2502  0.1859507592277053 \u2502\n\u2502         160 \u2502 0.22007759757363546 \u2502\n\u2502         170 \u2502 0.20406936638195144 \u2502\n\u2502         180 \u2502  0.1412102467834332 \u2502\n\u2502         190 \u2502 0.20677550885049117 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n20 rows in set. Elapsed: 0.167 sec. Processed 15.07 million rows, 101.74 MB (90.51 million rows/s., 610.98 MB/s.)\n")),(0,s.kt)("p",null,"Encouragingly, our comment % is pretty constant and doesn't degrade the longer authors contribute."),(0,s.kt)("h2",{id:"what-is-the-average-time-before-code-will-be-rewritten-and-the-median-half-life-of-code-decay"},"What is the average time before code will be rewritten and the median (half-life of code decay)?"),(0,s.kt)("p",null,"We can use the same principle as ",(0,s.kt)("a",{parentName:"p",href:"#list-files-that-were-rewritten-most-number-of-time-or-by-most-of-authors"},"List files that were rewritten most number of time or by most of authors")," to identify rewrites but consider all files. A window function is used to compute the time between rewrites for each file. From this, we can calculate an average and median across all files."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"\nWITH\n    changes AS\n    (\n        SELECT\n            path,\n            commit_hash,\n            max_time,\n            type,\n            num_added,\n            num_deleted,\n            sum(num_added - num_deleted) OVER (PARTITION BY path ORDER BY max_time ASC) AS current_size,\n            if(current_size > 0, num_added / current_size, 0) AS percent_add,\n            if(current_size > 0, num_deleted / current_size, 0) AS percent_delete\n        FROM\n        (\n            SELECT\n                path,\n                max(time) AS max_time,\n                commit_hash,\n                any(lines_added) AS num_added,\n                any(lines_deleted) AS num_deleted,\n                any(change_type) AS type\n            FROM git.file_changes\n            WHERE (change_type IN ('Add', 'Modify')) AND (file_extension IN ('h', 'cpp', 'sql'))\n            GROUP BY\n                path,\n                commit_hash\n            ORDER BY\n                path ASC,\n                max_time ASC\n        )\n    ),\n    rewrites AS\n    (\n        SELECT\n            *,\n            any(max_time) OVER (PARTITION BY path ORDER BY max_time ASC ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS previous_rewrite,\n            dateDiff('day', previous_rewrite, max_time) AS rewrite_days\n        FROM changes\n        WHERE (type = 'Modify') AND (percent_add >= 0.5) AND (percent_delete >= 0.5) AND (current_size > 50)\n    )\nSELECT\n    avgIf(rewrite_days, rewrite_days > 0) AS avg_rewrite_time,\n    quantilesTimingIf(0.5)(rewrite_days, rewrite_days > 0) AS half_life\nFROM rewrites\n\n\u250c\u2500avg_rewrite_time\u2500\u252c\u2500half_life\u2500\u2510\n\u2502      122.2890625 \u2502 [23]      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 row in set. Elapsed: 0.388 sec. Processed 266.05 thousand rows, 22.85 MB (685.82 thousand rows/s., 58.89 MB/s.)\n")),(0,s.kt)("h2",{id:"what-is-the-worst-time-to-write-code-in-sense-that-the-code-has-highest-chance-to-be-re-written"},"What is the worst time to write code in sense that the code has highest chance to be re-written?"),(0,s.kt)("p",null,"Similar to ",(0,s.kt)("a",{parentName:"p",href:"#what-is-the-average-time-before-code-will-be-rewritten-and-the-median-half-life-of-code-decay"},"What is the average time before code will be rewritten and the median (half-life of code decay)?")," and ",(0,s.kt)("a",{parentName:"p",href:"#list-files-that-were-rewritten-most-number-of-time-or-by-most-of-authors"},"List files that were rewritten most number of time or by most of authors"),", except we aggregate by day of week. Adjust as required e.g. month of year."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH\n    changes AS\n    (\n        SELECT\n            path,\n            commit_hash,\n            max_time,\n            type,\n            num_added,\n            num_deleted,\n            sum(num_added - num_deleted) OVER (PARTITION BY path ORDER BY max_time ASC) AS current_size,\n            if(current_size > 0, num_added / current_size, 0) AS percent_add,\n            if(current_size > 0, num_deleted / current_size, 0) AS percent_delete\n        FROM\n        (\n            SELECT\n                path,\n                max(time) AS max_time,\n                commit_hash,\n                any(file_lines_added) AS num_added,\n                any(file_lines_deleted) AS num_deleted,\n                any(file_change_type) AS type\n            FROM git.line_changes\n            WHERE (file_change_type IN ('Add', 'Modify')) AND (file_extension IN ('h', 'cpp', 'sql'))\n            GROUP BY\n                path,\n                commit_hash\n            ORDER BY\n                path ASC,\n                max_time ASC\n        )\n    ),\n    rewrites AS\n    (\n        SELECT any(max_time) OVER (PARTITION BY path ORDER BY max_time ASC ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS previous_rewrite\n        FROM changes\n        WHERE (type = 'Modify') AND (percent_add >= 0.5) AND (percent_delete >= 0.5) AND (current_size > 50)\n    )\nSELECT\n    dayOfWeek(previous_rewrite) AS dayOfWeek,\n    count() AS num_re_writes\nFROM rewrites\nGROUP BY dayOfWeek\n\n\u250c\u2500dayOfWeek\u2500\u252c\u2500num_re_writes\u2500\u2510\n\u2502         1 \u2502           111 \u2502\n\u2502         2 \u2502           121 \u2502\n\u2502         3 \u2502            91 \u2502\n\u2502         4 \u2502           111 \u2502\n\u2502         5 \u2502            90 \u2502\n\u2502         6 \u2502            64 \u2502\n\u2502         7 \u2502            46 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n7 rows in set. Elapsed: 0.466 sec. Processed 7.54 million rows, 701.52 MB (16.15 million rows/s., 1.50 GB/s.)\n")),(0,s.kt)("h2",{id:"which-authors-code-is-the-most-sticky"},"Which authors code is the most sticky?"),(0,s.kt)("p",null,'We define "sticky" as how long does an author\'s code stay before its rewritten. Similar to the previous question ',(0,s.kt)("a",{parentName:"p",href:"#what-is-the-average-time-before-code-will-be-rewritten-and-the-median-half-life-of-code-decay"},"What is the average time before code will be rewritten and the median (half-life of code decay)?")," - using the same metric for rewrites i.e. 50% additions and 50% deletions to the file. We compute the average rewrite time per author and only consider contributors with more than two files."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH\n    changes AS\n    (\n        SELECT\n            path,\n            author,\n            commit_hash,\n            max_time,\n            type,\n            num_added,\n            num_deleted,\n            sum(num_added - num_deleted) OVER (PARTITION BY path ORDER BY max_time ASC) AS current_size,\n            if(current_size > 0, num_added / current_size, 0) AS percent_add,\n            if(current_size > 0, num_deleted / current_size, 0) AS percent_delete\n        FROM\n        (\n            SELECT\n                path,\n                any(author) AS author,\n                max(time) AS max_time,\n                commit_hash,\n                any(file_lines_added) AS num_added,\n                any(file_lines_deleted) AS num_deleted,\n                any(file_change_type) AS type\n            FROM git.line_changes\n            WHERE (file_change_type IN ('Add', 'Modify')) AND (file_extension IN ('h', 'cpp', 'sql'))\n            GROUP BY\n                path,\n                commit_hash\n            ORDER BY\n                path ASC,\n                max_time ASC\n        )\n    ),\n    rewrites AS\n    (\n        SELECT\n            *,\n            any(max_time) OVER (PARTITION BY path ORDER BY max_time ASC ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS previous_rewrite,\n            dateDiff('day', previous_rewrite, max_time) AS rewrite_days,\n            any(author) OVER (PARTITION BY path ORDER BY max_time ASC ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS prev_author\n        FROM changes\n        WHERE (type = 'Modify') AND (percent_add >= 0.5) AND (percent_delete >= 0.5) AND (current_size > 50)\n    )\nSELECT\n    prev_author,\n    avg(rewrite_days) AS c,\n    uniq(path) AS num_files\nFROM rewrites\nGROUP BY prev_author\nHAVING num_files > 2\nORDER BY c DESC\nLIMIT 10\n\n\u250c\u2500prev_author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u252c\u2500num_files\u2500\u2510\n\u2502 Michael Kolupaev    \u2502              304.6 \u2502         4 \u2502\n\u2502 alexey-milovidov    \u2502  81.83333333333333 \u2502         4 \u2502\n\u2502 Alexander Kuzmenkov \u2502               64.5 \u2502         5 \u2502\n\u2502 Pavel Kruglov       \u2502               55.8 \u2502         6 \u2502\n\u2502 Alexey Milovidov    \u2502 48.416666666666664 \u2502        90 \u2502\n\u2502 Amos Bird           \u2502               42.8 \u2502         4 \u2502\n\u2502 alesapin            \u2502 38.083333333333336 \u2502        12 \u2502\n\u2502 Nikolai Kochetov    \u2502  33.18421052631579 \u2502        26 \u2502\n\u2502 Alexander Tokmakov  \u2502 31.866666666666667 \u2502        12 \u2502\n\u2502 Alexey Zatelepin    \u2502               22.5 \u2502         4 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.555 sec. Processed 7.54 million rows, 720.60 MB (13.58 million rows/s., 1.30 GB/s.)\n")),(0,s.kt)("h2",{id:"most-consecutive-days-of-commits-by-an-author"},"Most consecutive days of commits by an author"),(0,s.kt)("p",null,"This query first requires us to calculate the days when an author has committed. Using a window function, partitioning by author, we can compute the days between their commits. For each commit, if the time since the last commit was 1 day we mark it as consecutive (1) and 0 otherwise - storing this result in ",(0,s.kt)("inlineCode",{parentName:"p"},"consecutive_day"),"."),(0,s.kt)("p",null,"Our subsequent array functions compute each author's longest sequence of consecutive ones. First, the ",(0,s.kt)("inlineCode",{parentName:"p"},"groupArray")," function is used to collate all ",(0,s.kt)("inlineCode",{parentName:"p"},"consecutive_day")," values for an author. This array of 1s and 0s, is then split on 0 values into subarrays. Finally, we calculate the longest subarray."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"WITH commit_days AS\n    (\n        SELECT\n            author,\n            day,\n            any(day) OVER (PARTITION BY author ORDER BY day ASC ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS previous_commit,\n            dateDiff('day', previous_commit, day) AS days_since_last,\n            if(days_since_last = 1, 1, 0) AS consecutive_day\n        FROM\n        (\n            SELECT\n                author,\n                toStartOfDay(time) AS day\n            FROM git.commits\n            GROUP BY\n                author,\n                day\n            ORDER BY\n                author ASC,\n                day ASC\n        )\n    )\nSELECT\n    author,\n    arrayMax(arrayMap(x -> length(x), arraySplit(x -> (x = 0), groupArray(consecutive_day)))) AS max_consecutive_days\nFROM commit_days\nGROUP BY author\nORDER BY max_consecutive_days DESC\nLIMIT 10\n\n\u250c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500max_consecutive_days\u2500\u2510\n\u2502 kssenii          \u2502                   33 \u2502\n\u2502 Alexey Milovidov \u2502                   31 \u2502\n\u2502 alesapin         \u2502                   27 \u2502\n\u2502 Azat Khuzhin     \u2502                   24 \u2502\n\u2502 Nikolai Kochetov \u2502                   16 \u2502\n\u2502 Igor Nikonov     \u2502                   12 \u2502\n\u2502 feng lv          \u2502                   12 \u2502\n\u2502 alexey-milovidov \u2502                   12 \u2502\n\u2502 Maksim Kita      \u2502                   12 \u2502\n\u2502 Nikita Vasilev   \u2502                   12 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10 rows in set. Elapsed: 0.025 sec. Processed 62.78 thousand rows, 395.47 KB (2.54 million rows/s., 16.02 MB/s.)\n")),(0,s.kt)("h2",{id:"line-by-line-commit-history-of-a-file"},"Line by line commit history of a file"),(0,s.kt)("p",null,"Files can be renamed. When this occurs, we get a rename event, where the ",(0,s.kt)("inlineCode",{parentName:"p"},"path")," column is set to the new path of the file and the ",(0,s.kt)("inlineCode",{parentName:"p"},"old_path")," represents the previous location e.g."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    time,\n    path,\n    old_path,\n    commit_hash,\n    commit_message\nFROM git.file_changes\nWHERE (path = 'src/Storages/StorageReplicatedMergeTree.cpp') AND (change_type = 'Rename')\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500old_path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500commit_hash\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500commit_message\u2500\u2510\n\u2502 2020-04-03 16:14:31 \u2502 src/Storages/StorageReplicatedMergeTree.cpp \u2502 dbms/Storages/StorageReplicatedMergeTree.cpp \u2502 06446b4f08a142d6f1bc30664c47ded88ab51782 \u2502 dbms/ \u2192 src/   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 row in set. Elapsed: 0.135 sec. Processed 266.05 thousand rows, 20.73 MB (1.98 million rows/s., 154.04 MB/s.)\n")),(0,s.kt)("p",null,"This makes viewing the full history of a file challenging since we don't have a single value connecting all line or file changes."),(0,s.kt)("p",null,"To address this, we can use User Defined Functions (UDFs). These cannot, currently, be recursive, so to identify the history of a file we must define a series of UDFs which call each other explicitly. "),(0,s.kt)("p",null,"This means we can only track renames to a maximum depth - the below example is 5 deep. It is unlikely a file will be renamed more times than this, so for now, this is sufficient."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE FUNCTION file_path_history AS (n) -> if(empty(n),  [], arrayConcat([n], file_history_01((SELECT if(empty(old_path), Null, old_path) FROM git.file_changes WHERE path = n AND (change_type = 'Rename' OR change_type = 'Add') LIMIT 1))));\nCREATE FUNCTION file_path_history_01 AS (n) -> if(isNull(n), [], arrayConcat([n], file_path_history_02((SELECT if(empty(old_path), Null, old_path) FROM git.file_changes WHERE path = n AND (change_type = 'Rename' OR change_type = 'Add') LIMIT 1))));\nCREATE FUNCTION file_path_history_02 AS (n) -> if(isNull(n), [], arrayConcat([n], file_path_history_03((SELECT if(empty(old_path), Null, old_path) FROM git.file_changes WHERE path = n AND (change_type = 'Rename' OR change_type = 'Add') LIMIT 1))));\nCREATE FUNCTION file_path_history_03 AS (n) -> if(isNull(n), [], arrayConcat([n], file_path_history_04((SELECT if(empty(old_path), Null, old_path) FROM git.file_changes WHERE path = n AND (change_type = 'Rename' OR change_type = 'Add') LIMIT 1))));\nCREATE FUNCTION file_path_history_04 AS (n) -> if(isNull(n), [], arrayConcat([n], file_path_history_05((SELECT if(empty(old_path), Null, old_path) FROM git.file_changes WHERE path = n AND (change_type = 'Rename' OR change_type = 'Add') LIMIT 1))));\nCREATE FUNCTION file_path_history_05 AS (n) -> if(isNull(n), [], [n]);\n")),(0,s.kt)("p",null,"By calling ",(0,s.kt)("inlineCode",{parentName:"p"},"file_path_history('src/Storages/StorageReplicatedMergeTree.cpp')")," we recurse through the rename history, with each function calling the next level with the ",(0,s.kt)("inlineCode",{parentName:"p"},"old_path"),". The results are combined using ",(0,s.kt)("inlineCode",{parentName:"p"},"arrayConcat"),"."),(0,s.kt)("p",null,"For example,"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT file_path_history('src/Storages/StorageReplicatedMergeTree.cpp') AS paths\n\n\u250c\u2500paths\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ['src/Storages/StorageReplicatedMergeTree.cpp','dbms/Storages/StorageReplicatedMergeTree.cpp','dbms/src/Storages/StorageReplicatedMergeTree.cpp'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 row in set. Elapsed: 0.074 sec. Processed 344.06 thousand rows, 6.27 MB (4.65 million rows/s., 84.71 MB/s.)\n")),(0,s.kt)("p",null,"We can use this capability to now assemble the commits for the entire history of a file. In this example, we show one commit for each of the ",(0,s.kt)("inlineCode",{parentName:"p"},"path")," values."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    time,\n    substring(commit_hash, 1, 11) AS commit,\n    change_type,\n    author,\n    path,\n    commit_message\nFROM git.file_changes\nWHERE path IN file_path_history('src/Storages/StorageReplicatedMergeTree.cpp')\nORDER BY time DESC\nLIMIT 1 BY path\nFORMAT PrettyCompactMonoBlock\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500commit\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500change_type\u2500\u252c\u2500author\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500path\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500commit_message\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2022-10-30 16:30:51 \u2502 c68ab231f91 \u2502 Modify      \u2502 Alexander Tokmakov \u2502 src/Storages/StorageReplicatedMergeTree.cpp      \u2502 fix accessing part in Deleting state                                            \u2502\n\u2502 2020-04-03 15:21:24 \u2502 38a50f44d34 \u2502 Modify      \u2502 alesapin           \u2502 dbms/Storages/StorageReplicatedMergeTree.cpp     \u2502 Remove empty line                                                               \u2502\n\u2502 2020-04-01 19:21:27 \u2502 1d5a77c1132 \u2502 Modify      \u2502 alesapin           \u2502 dbms/src/Storages/StorageReplicatedMergeTree.cpp \u2502 Tried to add ability to rename primary key columns but just banned this ability \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n3 rows in set. Elapsed: 0.170 sec. Processed 611.53 thousand rows, 41.76 MB (3.60 million rows/s., 246.07 MB/s.)\n")),(0,s.kt)("h1",{id:"unsolved-questions"},"Unsolved Questions"),(0,s.kt)("h2",{id:"git-blame"},"Git blame"),(0,s.kt)("p",null,"This is particularly difficult to get an exact result due to the inability to currently keep state in array functions. This will be possible with an ",(0,s.kt)("inlineCode",{parentName:"p"},"arrayFold")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"arrayReduce"),", which allows state to be held on each iteration."),(0,s.kt)("p",null,"We welcome solutions here."))}p.isMDXComponent=!0},1716:function(e,t,n){t.Z=n.p+"assets/images/superset-commits-authors-09514f711988f863e12cbeae5b7dd335.png"},85243:function(e,t,n){t.Z=n.p+"assets/images/superset-github-lines-added-deleted-f0d1ba3c7e360940e8ac761db5258da9.png"}}]);
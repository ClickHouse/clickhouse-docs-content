"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[96712],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,k=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},10331:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),i=(n(67294),n(3905));const r={toc:[]},l="wrapper";function o(e){let{components:t,...n}=e;return(0,i.kt)(l,(0,a.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This page is not applicable to ",(0,i.kt)("a",{parentName:"p",href:"https://clickhouse.com/cloud"},"ClickHouse Cloud"),". The feature documented here is not available in ClickHouse Cloud services.\nSee the ClickHouse ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/whats-new/cloud-compatibility"},"Cloud Compatibility")," guide for more information.")))}o.isMDXComponent=!0},88654:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>f,frontMatter:()=>p,metadata:()=>u,toc:()=>m});var a=n(87462),i=(n(67294),n(3905)),r=n(10331);const l={toc:[]},o="wrapper";function s(e){let{components:t,...n}=e;return(0,i.kt)(o,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you are using a dictionary with ClickHouse Cloud please use the DDL query option to create your dictionaries, and create your dictionary as user ",(0,i.kt)("inlineCode",{parentName:"p"},"default"),".\nAlso, verify the list of supported dictionary sources in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/whats-new/cloud-compatibility"},"Cloud Compatibility guide"),".")))}s.isMDXComponent=!0;const p={slug:"/en/sql-reference/dictionaries",sidebar_label:"Defining Dictionaries",sidebar_position:35},d="Dictionaries",u={unversionedId:"en/sql-reference/dictionaries/index",id:"en/sql-reference/dictionaries/index",title:"Dictionaries",description:"A dictionary is a mapping (key -> attributes) that is convenient for various types of reference lists.",source:"@site/docs/en/sql-reference/dictionaries/index.md",sourceDirName:"en/sql-reference/dictionaries",slug:"/en/sql-reference/dictionaries",permalink:"/docs/en/sql-reference/dictionaries",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/dictionaries/index.md",tags:[],version:"current",sidebarPosition:35,frontMatter:{slug:"/en/sql-reference/dictionaries",sidebar_label:"Defining Dictionaries",sidebar_position:35},sidebar:"docs",previous:{title:"Deduplication Strategies",permalink:"/docs/en/guides/developer/deduplication"},next:{title:"Lightweight Delete",permalink:"/docs/en/guides/developer/lightweght-delete"}},c={},m=[{value:"Creating a dictionary with a DDL query",id:"creating-a-dictionary-with-a-ddl-query",level:2},{value:"Creating a dictionary with a configuration file",id:"creating-a-dictionary-with-a-configuration-file",level:2},{value:"Configuring a Dictionary",id:"configuring-a-dictionary",level:2},{value:"Storing Dictionaries in Memory",id:"storig-dictionaries-in-memory",level:2},{value:"Ways to Store Dictionaries in Memory",id:"ways-to-store-dictionaries-in-memory",level:2},{value:"flat",id:"flat",level:3},{value:"hashed",id:"hashed",level:3},{value:"sparse_hashed",id:"sparse_hashed",level:3},{value:"complex_key_hashed",id:"complex_key_hashed",level:3},{value:"complex_key_sparse_hashed",id:"complex_key_sparse_hashed",level:3},{value:"hashed_array",id:"hashed_array",level:3},{value:"complex_key_hashed_array",id:"complex_key_hashed_array",level:3},{value:"range_hashed",id:"range_hashed",level:3},{value:"complex_key_range_hashed",id:"complex_key_range_hashed",level:3},{value:"cache",id:"cache",level:3},{value:"complex_key_cache",id:"complex_key_cache",level:3},{value:"ssd_cache",id:"ssd_cache",level:3},{value:"complex_key_ssd_cache",id:"complex_key_ssd_cache",level:3},{value:"direct",id:"direct",level:3},{value:"complex_key_direct",id:"complex_key_direct",level:3},{value:"ip_trie",id:"ip_trie",level:3},{value:"Dictionary Updates",id:"dictionary-updates",level:2},{value:"Dictionary Sources",id:"dictionary-sources",level:2},{value:"Local File",id:"local_file",level:2},{value:"Executable File",id:"executable",level:2},{value:"Executable Pool",id:"executable_pool",level:2},{value:"Http(s)",id:"https",level:2},{value:"Known Vulnerability of the ODBC Dictionary Functionality",id:"known-vulnerability-of-the-odbc-dictionary-functionality",level:3},{value:"Example of Connecting Postgresql",id:"example-of-connecting-postgresql",level:3},{value:"Example of Connecting MS SQL Server",id:"example-of-connecting-ms-sql-server",level:3},{value:"DBMS",id:"dbms",level:2},{value:"ODBC",id:"odbc",level:3},{value:"Mysql",id:"mysql",level:3},{value:"ClickHouse",id:"clickhouse",level:3},{value:"Mongodb",id:"mongodb",level:3},{value:"Redis",id:"redis",level:3},{value:"Cassandra",id:"cassandra",level:3},{value:"PostgreSQL",id:"postgresql",level:3},{value:"Null",id:"null",level:2},{value:"Dictionary Key and Fields",id:"dictionary-key-and-fields",level:2},{value:"Key",id:"key",level:2},{value:"Numeric Key",id:"numeric-key",level:3},{value:"Composite Key",id:"composite-key",level:3},{value:"Attributes",id:"attributes",level:2},{value:"Hierarchical Dictionaries",id:"hierarchical-dictionaries",level:2},{value:"Polygon dictionaries",id:"polygon-dictionaries",level:2},{value:"RegExp Tree Dictionary",id:"regexp-tree-dictionary",level:2},{value:"Embedded Dictionaries",id:"embedded-dictionaries",level:2},{value:"Embedded Dictionaries",id:"embedded-dictionaries",level:2}],k={toc:m},h="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dictionaries"},"Dictionaries"),(0,i.kt)("p",null,"A dictionary is a mapping (",(0,i.kt)("inlineCode",{parentName:"p"},"key -> attributes"),") that is convenient for various types of reference lists."),(0,i.kt)("p",null,"ClickHouse supports special functions for working with dictionaries that can be used in queries. It is easier and more efficient to use dictionaries with functions than a ",(0,i.kt)("inlineCode",{parentName:"p"},"JOIN")," with reference tables."),(0,i.kt)("p",null,"ClickHouse supports:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Dictionaries with a ",(0,i.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/functions/ext-dict-functions"},"set of functions"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#embedded_dictionaries"},"Embedded dictionaries")," with a specific ",(0,i.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/functions/ym-dict-functions"},"set of functions"),".")),(0,i.kt)("admonition",{title:"Tutorial",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you are getting started with Dictionaries in ClickHouse we have a tutorial that covers that topic.  Take a look ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/tutorial"},"here"),".")),(0,i.kt)("p",null,"You can add your own dictionaries from various data sources. The source for a dictionary can be a ClickHouse table, a local text or executable file, an HTTP(s) resource, or another DBMS. For more information, see \u201c",(0,i.kt)("a",{parentName:"p",href:"#dictionary-sources"},"Dictionary Sources"),"\u201d."),(0,i.kt)("p",null,"ClickHouse:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fully or partially stores dictionaries in RAM."),(0,i.kt)("li",{parentName:"ul"},"Periodically updates dictionaries and dynamically loads missing values. In other words, dictionaries can be loaded dynamically."),(0,i.kt)("li",{parentName:"ul"},"Allows creating dictionaries with xml files or ",(0,i.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/statements/create/dictionary"},"DDL queries"),".")),(0,i.kt)("p",null,"The configuration of dictionaries can be located in one or more xml-files. The path to the configuration is specified in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-dictionaries_config"},"dictionaries_config")," parameter."),(0,i.kt)("p",null,"Dictionaries can be loaded at server startup or at first use, depending on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-dictionaries_lazy_load"},"dictionaries_lazy_load")," setting."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/operations/system-tables/dictionaries#system_tables-dictionaries"},"dictionaries")," system table contains information about dictionaries configured at server. For each dictionary you can find there:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Status of the dictionary."),(0,i.kt)("li",{parentName:"ul"},"Configuration parameters."),(0,i.kt)("li",{parentName:"ul"},"Metrics like amount of RAM allocated for the dictionary or a number of queries since the dictionary was successfully loaded.")),(0,i.kt)(s,{mdxType:"CloudDetails"}),(0,i.kt)("h2",{id:"creating-a-dictionary-with-a-ddl-query"},"Creating a dictionary with a DDL query"),(0,i.kt)("p",null,"Dictionaries can be created with ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/dictionary"},"DDL queries"),", and this is the recommended method because with DDL created dictionaries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"No additional records are added to server configuration files"),(0,i.kt)("li",{parentName:"ul"},"The dictionaries can be worked with as first-class entities, like tables or views"),(0,i.kt)("li",{parentName:"ul"},"Data can be read directly, using familiar SELECT rather than dictionary table functions"),(0,i.kt)("li",{parentName:"ul"},"The dictionaries can be easily renamed")),(0,i.kt)("h2",{id:"creating-a-dictionary-with-a-configuration-file"},"Creating a dictionary with a configuration file"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Creating a dictionary with a configuration file is not applicable to ClickHouse Cloud. Please use DDL (see above), and create your dictionary as user ",(0,i.kt)("inlineCode",{parentName:"p"},"default"),".")),(0,i.kt)("p",null,"The dictionary configuration file has the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<clickhouse>\n    <comment>An optional element with any content. Ignored by the ClickHouse server.</comment>\n\n    \x3c!--Optional element. File name with substitutions--\x3e\n    <include_from>/etc/metrika.xml</include_from>\n\n\n    <dictionary>\n        \x3c!-- Dictionary configuration. --\x3e\n        \x3c!-- There can be any number of dictionary sections in a configuration file. --\x3e\n    </dictionary>\n\n</clickhouse>\n")),(0,i.kt)("p",null,"You can ",(0,i.kt)("a",{parentName:"p",href:"#configuring-a-dictionary"},"configure")," any number of dictionaries in the same file."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You can convert values for a small dictionary by describing it in a ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," query (see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/other-functions"},"transform")," function). This functionality is not related to dictionaries.")),(0,i.kt)("h2",{id:"configuring-a-dictionary"},"Configuring a Dictionary"),(0,i.kt)(s,{mdxType:"CloudDetails"}),(0,i.kt)("p",null,"If dictionary is configured using xml file, than dictionary configuration has the following structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<dictionary>\n    <name>dict_name</name>\n\n    <structure>\n      \x3c!-- Complex key configuration --\x3e\n    </structure>\n\n    <source>\n      \x3c!-- Source configuration --\x3e\n    </source>\n\n    <layout>\n      \x3c!-- Memory layout configuration --\x3e\n    </layout>\n\n    <lifetime>\n      \x3c!-- Lifetime of dictionary in memory --\x3e\n    </lifetime>\n</dictionary>\n")),(0,i.kt)("p",null,"Corresponding ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/dictionary"},"DDL-query")," has the following structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY dict_name\n(\n    ... -- attributes\n)\nPRIMARY KEY ... -- complex or single key configuration\nSOURCE(...) -- Source configuration\nLAYOUT(...) -- Memory layout configuration\nLIFETIME(...) -- Lifetime of dictionary in memory\n")),(0,i.kt)("h2",{id:"storig-dictionaries-in-memory"},"Storing Dictionaries in Memory"),(0,i.kt)("p",null,"There are a variety of ways to store dictionaries in memory."),(0,i.kt)("p",null,"We recommend ",(0,i.kt)("a",{parentName:"p",href:"#flat"},"flat"),", ",(0,i.kt)("a",{parentName:"p",href:"#hashed"},"hashed")," and ",(0,i.kt)("a",{parentName:"p",href:"#complex_key_hashed"},"complex_key_hashed"),", which provide optimal processing speed."),(0,i.kt)("p",null,"Caching is not recommended because of potentially poor performance and difficulties in selecting optimal parameters. Read more in the section ",(0,i.kt)("a",{parentName:"p",href:"#cache"},"cache"),"."),(0,i.kt)("p",null,"There are several ways to improve dictionary performance:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Call the function for working with the dictionary after ",(0,i.kt)("inlineCode",{parentName:"li"},"GROUP BY"),"."),(0,i.kt)("li",{parentName:"ul"},"Mark attributes to extract as injective. An attribute is called injective if different attribute values correspond to different keys. So when ",(0,i.kt)("inlineCode",{parentName:"li"},"GROUP BY")," uses a function that fetches an attribute value by the key, this function is automatically taken out of ",(0,i.kt)("inlineCode",{parentName:"li"},"GROUP BY"),".")),(0,i.kt)("p",null,"ClickHouse generates an exception for errors with dictionaries. Examples of errors:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The dictionary being accessed could not be loaded."),(0,i.kt)("li",{parentName:"ul"},"Error querying a ",(0,i.kt)("inlineCode",{parentName:"li"},"cached")," dictionary.")),(0,i.kt)("p",null,"You can view the list of dictionaries and their statuses in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/operations/system-tables/dictionaries"},"system.dictionaries")," table."),(0,i.kt)(s,{mdxType:"CloudDetails"}),(0,i.kt)("p",null,"The configuration looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<clickhouse>\n    <dictionary>\n        ...\n        <layout>\n            <layout_type>\n                \x3c!-- layout settings --\x3e\n            </layout_type>\n        </layout>\n        ...\n    </dictionary>\n</clickhouse>\n")),(0,i.kt)("p",null,"Corresponding ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/dictionary"},"DDL-query"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY (...)\n...\nLAYOUT(LAYOUT_TYPE(param value)) -- layout settings\n...\n")),(0,i.kt)("p",null,"Dictionaries without word ",(0,i.kt)("inlineCode",{parentName:"p"},"complex-key*")," in a layout have a key with ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")," type, ",(0,i.kt)("inlineCode",{parentName:"p"},"complex-key*")," dictionaries have a composite key (complex, with arbitrary types)."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")," keys in XML dictionaries are defined with ",(0,i.kt)("inlineCode",{parentName:"p"},"<id>")," tag."),(0,i.kt)("p",null,"Configuration example (column key_column has UInt64 type):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"...\n<structure>\n    <id>\n        <name>key_column</name>\n    </id>\n...\n")),(0,i.kt)("p",null,"Composite ",(0,i.kt)("inlineCode",{parentName:"p"},"complex")," keys XML dictionaries are defined ",(0,i.kt)("inlineCode",{parentName:"p"},"<key>")," tag."),(0,i.kt)("p",null,"Configuration example of a composite key (key has one element with ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/string"},"String")," type):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"...\n<structure>\n    <key>\n        <attribute>\n            <name>country_code</name>\n            <type>String</type>\n        </attribute>\n    </key>\n...\n")),(0,i.kt)("h2",{id:"ways-to-store-dictionaries-in-memory"},"Ways to Store Dictionaries in Memory"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#flat"},"flat")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#hashed"},"hashed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sparse_hashed"},"sparse_hashed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#complex_key_hashed"},"complex_key_hashed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#complex_key_sparse_hashed"},"complex_key_sparse_hashed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#hashed_array"},"hashed_array")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#complex_key_hashed_array"},"complex_key_hashed_array")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#range_hashed"},"range_hashed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#complex_key_range_hashed"},"complex_key_range_hashed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#cache"},"cache")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#complex_key_cache"},"complex_key_cache")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#ssd_cache"},"ssd_cache")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#complex_key_ssd_cache"},"complex_key_ssd_cache")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#direct"},"direct")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#complex_key_direct"},"complex_key_direct")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#ip_trie"},"ip_trie"))),(0,i.kt)("h3",{id:"flat"},"flat"),(0,i.kt)("p",null,"The dictionary is completely stored in memory in the form of flat arrays. How much memory does the dictionary use? The amount is proportional to the size of the largest key (in space used)."),(0,i.kt)("p",null,"The dictionary key has the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")," type and the value is limited to ",(0,i.kt)("inlineCode",{parentName:"p"},"max_array_size")," (by default \u2014 500,000). If a larger key is discovered when creating the dictionary, ClickHouse throws an exception and does not create the dictionary. Dictionary flat arrays initial size is controlled by ",(0,i.kt)("inlineCode",{parentName:"p"},"initial_array_size")," setting (by default \u2014 1024)."),(0,i.kt)("p",null,"All types of sources are supported. When updating, data (from a file or from a table) is read in it entirety."),(0,i.kt)("p",null,"This method provides the best performance among all available methods of storing the dictionary."),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n  <flat>\n    <initial_array_size>50000</initial_array_size>\n    <max_array_size>5000000</max_array_size>\n  </flat>\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LAYOUT(FLAT(INITIAL_ARRAY_SIZE 50000 MAX_ARRAY_SIZE 5000000))\n")),(0,i.kt)("h3",{id:"hashed"},"hashed"),(0,i.kt)("p",null,"The dictionary is completely stored in memory in the form of a hash table. The dictionary can contain any number of elements with any identifiers In practice, the number of keys can reach tens of millions of items."),(0,i.kt)("p",null,"The dictionary key has the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")," type."),(0,i.kt)("p",null,"All types of sources are supported. When updating, data (from a file or from a table) is read in its entirety."),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n  <hashed />\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LAYOUT(HASHED())\n")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"shards")," greater then 1 (default is ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),") the dictionary will load data in parallel, useful if you have huge amount of elements in one dictionary."),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n  <hashed>\n    <shards>10</shards>\n    \x3c!-- Size of the backlog for blocks in parallel queue.\n\n         Since the bottleneck in parallel loading is rehash, and so to avoid\n         stalling because of thread is doing rehash, you need to have some\n         backlog.\n\n         10000 is good balance between memory and speed.\n         Even for 10e10 elements and can handle all the load without starvation. --\x3e\n    <shard_load_queue_backlog>10000</shard_load_queue_backlog>\n  </hashed>\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LAYOUT(HASHED(SHARDS 10 [SHARD_LOAD_QUEUE_BACKLOG 10000]))\n")),(0,i.kt)("h3",{id:"sparse_hashed"},"sparse_hashed"),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"hashed"),", but uses less memory in favor more CPU usage."),(0,i.kt)("p",null,"The dictionary key has the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")," type."),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n  <sparse_hashed />\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LAYOUT(SPARSE_HASHED())\n")),(0,i.kt)("p",null,"It is also possible to use ",(0,i.kt)("inlineCode",{parentName:"p"},"shards")," for this type of dictionary, and again it is more important for ",(0,i.kt)("inlineCode",{parentName:"p"},"sparse_hashed")," then for ",(0,i.kt)("inlineCode",{parentName:"p"},"hashed"),", since ",(0,i.kt)("inlineCode",{parentName:"p"},"sparse_hashed")," is slower."),(0,i.kt)("h3",{id:"complex_key_hashed"},"complex_key_hashed"),(0,i.kt)("p",null,"This type of storage is for use with composite ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-key-and-fields"},"keys"),". Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"hashed"),"."),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n  <complex_key_hashed>\n    <shards>1</shards>\n    \x3c!-- <shard_load_queue_backlog>10000</shard_load_queue_backlog> --\x3e\n  </complex_key_hashed>\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LAYOUT(COMPLEX_KEY_HASHED([SHARDS 1] [SHARD_LOAD_QUEUE_BACKLOG 10000]))\n")),(0,i.kt)("h3",{id:"complex_key_sparse_hashed"},"complex_key_sparse_hashed"),(0,i.kt)("p",null,"This type of storage is for use with composite ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-key-and-fields"},"keys"),". Similar to ",(0,i.kt)("a",{parentName:"p",href:"#sparse_hashed"},"sparse_hashed"),"."),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n  <complex_key_sparse_hashed>\n    <shards>1</shards>\n  </complex_key_sparse_hashed>\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LAYOUT(COMPLEX_KEY_SPARSE_HASHED([SHARDS 1] [SHARD_LOAD_QUEUE_BACKLOG 10000]))\n")),(0,i.kt)("h3",{id:"hashed_array"},"hashed_array"),(0,i.kt)("p",null,"The dictionary is completely stored in memory. Each attribute is stored in an array. The key attribute is stored in the form of a hashed table where value is an index in the attributes array. The dictionary can contain any number of elements with any identifiers. In practice, the number of keys can reach tens of millions of items."),(0,i.kt)("p",null,"The dictionary key has the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")," type."),(0,i.kt)("p",null,"All types of sources are supported. When updating, data (from a file or from a table) is read in its entirety."),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n  <hashed_array>\n  </hashed_array>\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LAYOUT(HASHED_ARRAY())\n")),(0,i.kt)("h3",{id:"complex_key_hashed_array"},"complex_key_hashed_array"),(0,i.kt)("p",null,"This type of storage is for use with composite ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-key-and-fields"},"keys"),". Similar to ",(0,i.kt)("a",{parentName:"p",href:"#hashed_array"},"hashed_array"),"."),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n  <complex_key_hashed_array />\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LAYOUT(COMPLEX_KEY_HASHED_ARRAY())\n")),(0,i.kt)("h3",{id:"range_hashed"},"range_hashed"),(0,i.kt)("p",null,"The dictionary is stored in memory in the form of a hash table with an ordered array of ranges and their corresponding values."),(0,i.kt)("p",null,"The dictionary key has the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")," type.\nThis storage method works the same way as hashed and allows using date/time (arbitrary numeric type) ranges in addition to the key."),(0,i.kt)("p",null,"Example: The table contains discounts for each advertiser in the format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500advertiser_id\u2500\u252c\u2500discount_start_date\u2500\u252c\u2500discount_end_date\u2500\u252c\u2500amount\u2500\u2510\n\u2502           123 \u2502          2015-01-16 \u2502        2015-01-31 \u2502   0.25 \u2502\n\u2502           123 \u2502          2015-01-01 \u2502        2015-01-15 \u2502   0.15 \u2502\n\u2502           456 \u2502          2015-01-01 \u2502        2015-01-15 \u2502   0.05 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,"To use a sample for date ranges, define the ",(0,i.kt)("inlineCode",{parentName:"p"},"range_min")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"range_max")," elements in the ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-key-and-fields"},"structure"),". These elements must contain elements ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," (if ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," is not specified, the default type will be used - Date). ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," can be any numeric type (Date / DateTime / UInt64 / Int32 / others)."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Values of ",(0,i.kt)("inlineCode",{parentName:"p"},"range_min")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"range_max")," should fit in ",(0,i.kt)("inlineCode",{parentName:"p"},"Int64")," type.")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n    <range_hashed>\n        \x3c!-- Strategy for overlapping ranges (min/max). Default: min (return a matching range with the min(range_min -> range_max) value) --\x3e\n        <range_lookup_strategy>min</range_lookup_strategy>\n    </range_hashed>\n</layout>\n<structure>\n    <id>\n        <name>advertiser_id</name>\n    </id>\n    <range_min>\n        <name>discount_start_date</name>\n        <type>Date</type>\n    </range_min>\n    <range_max>\n        <name>discount_end_date</name>\n        <type>Date</type>\n    </range_max>\n    ...\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY discounts_dict (\n    advertiser_id UInt64,\n    discount_start_date Date,\n    discount_end_date Date,\n    amount Float64\n)\nPRIMARY KEY id\nSOURCE(CLICKHOUSE(TABLE 'discounts'))\nLIFETIME(MIN 1 MAX 1000)\nLAYOUT(RANGE_HASHED(range_lookup_strategy 'max'))\nRANGE(MIN discount_start_date MAX discount_end_date)\n")),(0,i.kt)("p",null,"To work with these dictionaries, you need to pass an additional argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"dictGet")," function, for which a range is selected:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"dictGet('dict_name', 'attr_name', id, date)\n")),(0,i.kt)("p",null,"Query example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT dictGet('discounts_dict', 'amount', 1, '2022-10-20'::Date);\n")),(0,i.kt)("p",null,"This function returns the value for the specified ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),"s and the date range that includes the passed date."),(0,i.kt)("p",null,"Details of the algorithm:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," is not found or a range is not found for the ",(0,i.kt)("inlineCode",{parentName:"li"},"id"),", it returns the default value of the attribute's type."),(0,i.kt)("li",{parentName:"ul"},"If there are overlapping ranges and ",(0,i.kt)("inlineCode",{parentName:"li"},"range_lookup_strategy=min"),", it returns a matching range with minimal ",(0,i.kt)("inlineCode",{parentName:"li"},"range_min"),", if several ranges found, it returns a range with minimal ",(0,i.kt)("inlineCode",{parentName:"li"},"range_max"),", if again several ranges found (several ranges had the same ",(0,i.kt)("inlineCode",{parentName:"li"},"range_min")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"range_max")," it returns a random range of them."),(0,i.kt)("li",{parentName:"ul"},"If there are overlapping ranges and ",(0,i.kt)("inlineCode",{parentName:"li"},"range_lookup_strategy=max"),", it returns a matching range with maximal ",(0,i.kt)("inlineCode",{parentName:"li"},"range_min"),", if several ranges found, it returns a range with maximal ",(0,i.kt)("inlineCode",{parentName:"li"},"range_max"),", if again several ranges found (several ranges had the same ",(0,i.kt)("inlineCode",{parentName:"li"},"range_min")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"range_max")," it returns a random range of them."),(0,i.kt)("li",{parentName:"ul"},"If the ",(0,i.kt)("inlineCode",{parentName:"li"},"range_max")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"NULL"),", the range is open. ",(0,i.kt)("inlineCode",{parentName:"li"},"NULL")," is treated as maximal possible value. For the ",(0,i.kt)("inlineCode",{parentName:"li"},"range_min")," ",(0,i.kt)("inlineCode",{parentName:"li"},"1970-01-01")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," (-MAX_INT) can be used as the open value.")),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<clickhouse>\n    <dictionary>\n        ...\n\n        <layout>\n            <range_hashed />\n        </layout>\n\n        <structure>\n            <id>\n                <name>Abcdef</name>\n            </id>\n            <range_min>\n                <name>StartTimeStamp</name>\n                <type>UInt64</type>\n            </range_min>\n            <range_max>\n                <name>EndTimeStamp</name>\n                <type>UInt64</type>\n            </range_max>\n            <attribute>\n                <name>XXXType</name>\n                <type>String</type>\n                <null_value />\n            </attribute>\n        </structure>\n\n    </dictionary>\n</clickhouse>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY somedict(\n    Abcdef UInt64,\n    StartTimeStamp UInt64,\n    EndTimeStamp UInt64,\n    XXXType String DEFAULT ''\n)\nPRIMARY KEY Abcdef\nRANGE(MIN StartTimeStamp MAX EndTimeStamp)\n")),(0,i.kt)("p",null,"Configuration example with overlapping ranges and open ranges:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE discounts\n(\n    advertiser_id UInt64,\n    discount_start_date Date,\n    discount_end_date Nullable(Date),\n    amount Float64\n)\nENGINE = Memory;\n\nINSERT INTO discounts VALUES (1, '2015-01-01', Null, 0.1);\nINSERT INTO discounts VALUES (1, '2015-01-15', Null, 0.2);\nINSERT INTO discounts VALUES (2, '2015-01-01', '2015-01-15', 0.3);\nINSERT INTO discounts VALUES (2, '2015-01-04', '2015-01-10', 0.4);\nINSERT INTO discounts VALUES (3, '1970-01-01', '2015-01-15', 0.5);\nINSERT INTO discounts VALUES (3, '1970-01-01', '2015-01-10', 0.6);\n\nSELECT * FROM discounts ORDER BY advertiser_id, discount_start_date;\n\u250c\u2500advertiser_id\u2500\u252c\u2500discount_start_date\u2500\u252c\u2500discount_end_date\u2500\u252c\u2500amount\u2500\u2510\n\u2502             1 \u2502          2015-01-01 \u2502              \u1d3a\u1d41\u1d38\u1d38 \u2502    0.1 \u2502\n\u2502             1 \u2502          2015-01-15 \u2502              \u1d3a\u1d41\u1d38\u1d38 \u2502    0.2 \u2502\n\u2502             2 \u2502          2015-01-01 \u2502        2015-01-15 \u2502    0.3 \u2502\n\u2502             2 \u2502          2015-01-04 \u2502        2015-01-10 \u2502    0.4 \u2502\n\u2502             3 \u2502          1970-01-01 \u2502        2015-01-15 \u2502    0.5 \u2502\n\u2502             3 \u2502          1970-01-01 \u2502        2015-01-10 \u2502    0.6 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n-- RANGE_LOOKUP_STRATEGY 'max'\n\nCREATE DICTIONARY discounts_dict\n(\n    advertiser_id UInt64,\n    discount_start_date Date,\n    discount_end_date Nullable(Date),\n    amount Float64\n)\nPRIMARY KEY advertiser_id\nSOURCE(CLICKHOUSE(TABLE discounts))\nLIFETIME(MIN 600 MAX 900)\nLAYOUT(RANGE_HASHED(RANGE_LOOKUP_STRATEGY 'max'))\nRANGE(MIN discount_start_date MAX discount_end_date);\n\nselect dictGet('discounts_dict', 'amount', 1, toDate('2015-01-14')) res;\n\u250c\u2500res\u2500\u2510\n\u2502 0.1 \u2502 -- the only one range is matching: 2015-01-01 - Null\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\nselect dictGet('discounts_dict', 'amount', 1, toDate('2015-01-16')) res;\n\u250c\u2500res\u2500\u2510\n\u2502 0.2 \u2502 -- two ranges are matching, range_min 2015-01-15 (0.2) is bigger than 2015-01-01 (0.1)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\nselect dictGet('discounts_dict', 'amount', 2, toDate('2015-01-06')) res;\n\u250c\u2500res\u2500\u2510\n\u2502 0.4 \u2502 -- two ranges are matching, range_min 2015-01-04 (0.4) is bigger than 2015-01-01 (0.3)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\nselect dictGet('discounts_dict', 'amount', 3, toDate('2015-01-01')) res;\n\u250c\u2500res\u2500\u2510\n\u2502 0.5 \u2502 -- two ranges are matching, range_min are equal, 2015-01-15 (0.5) is bigger than 2015-01-10 (0.6)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\nDROP DICTIONARY discounts_dict;\n\n-- RANGE_LOOKUP_STRATEGY 'min'\n\nCREATE DICTIONARY discounts_dict\n(\n    advertiser_id UInt64,\n    discount_start_date Date,\n    discount_end_date Nullable(Date),\n    amount Float64\n)\nPRIMARY KEY advertiser_id\nSOURCE(CLICKHOUSE(TABLE discounts))\nLIFETIME(MIN 600 MAX 900)\nLAYOUT(RANGE_HASHED(RANGE_LOOKUP_STRATEGY 'min'))\nRANGE(MIN discount_start_date MAX discount_end_date);\n\nselect dictGet('discounts_dict', 'amount', 1, toDate('2015-01-14')) res;\n\u250c\u2500res\u2500\u2510\n\u2502 0.1 \u2502 -- the only one range is matching: 2015-01-01 - Null\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\nselect dictGet('discounts_dict', 'amount', 1, toDate('2015-01-16')) res;\n\u250c\u2500res\u2500\u2510\n\u2502 0.1 \u2502 -- two ranges are matching, range_min 2015-01-01 (0.1) is less than 2015-01-15 (0.2)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\nselect dictGet('discounts_dict', 'amount', 2, toDate('2015-01-06')) res;\n\u250c\u2500res\u2500\u2510\n\u2502 0.3 \u2502 -- two ranges are matching, range_min 2015-01-01 (0.3) is less than 2015-01-04 (0.4)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\nselect dictGet('discounts_dict', 'amount', 3, toDate('2015-01-01')) res;\n\u250c\u2500res\u2500\u2510\n\u2502 0.6 \u2502 -- two ranges are matching, range_min are equal, 2015-01-10 (0.6) is less than 2015-01-15 (0.5)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("h3",{id:"complex_key_range_hashed"},"complex_key_range_hashed"),(0,i.kt)("p",null,"The dictionary is stored in memory in the form of a hash table with an ordered array of ranges and their corresponding values (see ",(0,i.kt)("a",{parentName:"p",href:"#range_hashed"},"range_hashed"),"). This type of storage is for use with composite ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-key-and-fields"},"keys"),"."),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY range_dictionary\n(\n  CountryID UInt64,\n  CountryKey String,\n  StartDate Date,\n  EndDate Date,\n  Tax Float64 DEFAULT 0.2\n)\nPRIMARY KEY CountryID, CountryKey\nSOURCE(CLICKHOUSE(TABLE 'date_table'))\nLIFETIME(MIN 1 MAX 1000)\nLAYOUT(COMPLEX_KEY_RANGE_HASHED())\nRANGE(MIN StartDate MAX EndDate);\n")),(0,i.kt)("h3",{id:"cache"},"cache"),(0,i.kt)("p",null,"The dictionary is stored in a cache that has a fixed number of cells. These cells contain frequently used elements."),(0,i.kt)("p",null,"The dictionary key has the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")," type."),(0,i.kt)("p",null,"When searching for a dictionary, the cache is searched first. For each block of data, all keys that are not found in the cache or are outdated are requested from the source using ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT attrs... FROM db.table WHERE id IN (k1, k2, ...)"),". The received data is then written to the cache."),(0,i.kt)("p",null,"If keys are not found in dictionary, then update cache task is created and added into update queue. Update queue properties can be controlled with settings ",(0,i.kt)("inlineCode",{parentName:"p"},"max_update_queue_size"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"update_queue_push_timeout_milliseconds"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"query_wait_timeout_milliseconds"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"max_threads_for_updates"),"."),(0,i.kt)("p",null,"For cache dictionaries, the expiration ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-updates"},"lifetime")," of data in the cache can be set. If more time than ",(0,i.kt)("inlineCode",{parentName:"p"},"lifetime")," has passed since loading the data in a cell, the cell\u2019s value is not used and key becomes expired. The key is re-requested the next time it needs to be used. This behaviour can be configured with setting ",(0,i.kt)("inlineCode",{parentName:"p"},"allow_read_expired_keys"),"."),(0,i.kt)("p",null,"This is the least effective of all the ways to store dictionaries. The speed of the cache depends strongly on correct settings and the usage scenario. A cache type dictionary performs well only when the hit rates are high enough (recommended 99% and higher). You can view the average hit rate in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/operations/system-tables/dictionaries"},"system.dictionaries")," table."),(0,i.kt)("p",null,"If setting ",(0,i.kt)("inlineCode",{parentName:"p"},"allow_read_expired_keys")," is set to 1, by default 0. Then dictionary can support asynchronous updates. If a client requests keys and all of them are in cache, but some of them are expired, then dictionary will return expired keys for a client and request them asynchronously from the source."),(0,i.kt)("p",null,"To improve cache performance, use a subquery with ",(0,i.kt)("inlineCode",{parentName:"p"},"LIMIT"),", and call the function with the dictionary externally."),(0,i.kt)("p",null,"All types of sources are supported."),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n    <cache>\n        \x3c!-- The size of the cache, in number of cells. Rounded up to a power of two. --\x3e\n        <size_in_cells>1000000000</size_in_cells>\n        \x3c!-- Allows to read expired keys. --\x3e\n        <allow_read_expired_keys>0</allow_read_expired_keys>\n        \x3c!-- Max size of update queue. --\x3e\n        <max_update_queue_size>100000</max_update_queue_size>\n        \x3c!-- Max timeout in milliseconds for push update task into queue. --\x3e\n        <update_queue_push_timeout_milliseconds>10</update_queue_push_timeout_milliseconds>\n        \x3c!-- Max wait timeout in milliseconds for update task to complete. --\x3e\n        <query_wait_timeout_milliseconds>60000</query_wait_timeout_milliseconds>\n        \x3c!-- Max threads for cache dictionary update. --\x3e\n        <max_threads_for_updates>4</max_threads_for_updates>\n    </cache>\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LAYOUT(CACHE(SIZE_IN_CELLS 1000000000))\n")),(0,i.kt)("p",null,"Set a large enough cache size. You need to experiment to select the number of cells:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Set some value."),(0,i.kt)("li",{parentName:"ol"},"Run queries until the cache is completely full."),(0,i.kt)("li",{parentName:"ol"},"Assess memory consumption using the ",(0,i.kt)("inlineCode",{parentName:"li"},"system.dictionaries")," table."),(0,i.kt)("li",{parentName:"ol"},"Increase or decrease the number of cells until the required memory consumption is reached.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Do not use ClickHouse as a source, because it is slow to process queries with random reads.")),(0,i.kt)("h3",{id:"complex_key_cache"},"complex_key_cache"),(0,i.kt)("p",null,"This type of storage is for use with composite ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-key-and-fields"},"keys"),". Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"cache"),"."),(0,i.kt)("h3",{id:"ssd_cache"},"ssd_cache"),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"cache"),", but stores data on SSD and index in RAM. All cache dictionary settings related to update queue can also be applied to SSD cache dictionaries."),(0,i.kt)("p",null,"The dictionary key has the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")," type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n    <ssd_cache>\n        \x3c!-- Size of elementary read block in bytes. Recommended to be equal to SSD's page size. --\x3e\n        <block_size>4096</block_size>\n        \x3c!-- Max cache file size in bytes. --\x3e\n        <file_size>16777216</file_size>\n        \x3c!-- Size of RAM buffer in bytes for reading elements from SSD. --\x3e\n        <read_buffer_size>131072</read_buffer_size>\n        \x3c!-- Size of RAM buffer in bytes for aggregating elements before flushing to SSD. --\x3e\n        <write_buffer_size>1048576</write_buffer_size>\n        \x3c!-- Path where cache file will be stored. --\x3e\n        <path>/var/lib/clickhouse/user_files/test_dict</path>\n    </ssd_cache>\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LAYOUT(SSD_CACHE(BLOCK_SIZE 4096 FILE_SIZE 16777216 READ_BUFFER_SIZE 1048576\n    PATH '/var/lib/clickhouse/user_files/test_dict'))\n")),(0,i.kt)("h3",{id:"complex_key_ssd_cache"},"complex_key_ssd_cache"),(0,i.kt)("p",null,"This type of storage is for use with composite ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-key-and-fields"},"keys"),". Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"ssd_cache"),"."),(0,i.kt)("h3",{id:"direct"},"direct"),(0,i.kt)("p",null,"The dictionary is not stored in memory and directly goes to the source during the processing of a request."),(0,i.kt)("p",null,"The dictionary key has the ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")," type."),(0,i.kt)("p",null,"All types of ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-sources"},"sources"),", except local files, are supported."),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<layout>\n  <direct />\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LAYOUT(DIRECT())\n")),(0,i.kt)("h3",{id:"complex_key_direct"},"complex_key_direct"),(0,i.kt)("p",null,"This type of storage is for use with composite ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-key-and-fields"},"keys"),". Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"direct"),"."),(0,i.kt)("h3",{id:"ip_trie"},"ip_trie"),(0,i.kt)("p",null,"This type of storage is for mapping network prefixes (IP addresses) to metadata such as ASN."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"Suppose we have a table in ClickHouse that contains our IP prefixes and mappings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE my_ip_addresses (\n    prefix String,\n    asn UInt32,\n    cca2 String\n)\nENGINE = MergeTree\nPRIMARY KEY prefix;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO my_ip_addresses VALUES\n    ('202.79.32.0/20', 17501, 'NP'),\n    ('2620:0:870::/48', 3856, 'US'),\n    ('2a02:6b8:1::/48', 13238, 'RU'),\n    ('2001:db8::/32', 65536, 'ZZ')\n;\n")),(0,i.kt)("p",null,"Let's define an ",(0,i.kt)("inlineCode",{parentName:"p"},"ip_trie")," dictionary for this table. The ",(0,i.kt)("inlineCode",{parentName:"p"},"ip_trie")," layout requires a composite key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<structure>\n    <key>\n        <attribute>\n            <name>prefix</name>\n            <type>String</type>\n        </attribute>\n    </key>\n    <attribute>\n            <name>asn</name>\n            <type>UInt32</type>\n            <null_value />\n    </attribute>\n    <attribute>\n            <name>cca2</name>\n            <type>String</type>\n            <null_value>??</null_value>\n    </attribute>\n    ...\n</structure>\n<layout>\n    <ip_trie>\n        \x3c!-- Key attribute `prefix` can be retrieved via dictGetString. --\x3e\n        \x3c!-- This option increases memory usage. --\x3e\n        <access_to_key_from_attributes>true</access_to_key_from_attributes>\n    </ip_trie>\n</layout>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY my_ip_trie_dictionary (\n    prefix String,\n    asn UInt32,\n    cca2 String DEFAULT '??'\n)\nPRIMARY KEY prefix\nSOURCE(CLICKHOUSE(TABLE 'my_ip_addresses'))\nLAYOUT(IP_TRIE)\nLIFETIME(3600);\n")),(0,i.kt)("p",null,"The key must have only one ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," type attribute that contains an allowed IP prefix. Other types are not supported yet."),(0,i.kt)("p",null,"For queries, you must use the same functions (",(0,i.kt)("inlineCode",{parentName:"p"},"dictGetT")," with a tuple) as for dictionaries with composite keys. The syntax is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"dictGetT('dict_name', 'attr_name', tuple(ip))\n")),(0,i.kt)("p",null,"The function takes either ",(0,i.kt)("inlineCode",{parentName:"p"},"UInt32")," for IPv4, or ",(0,i.kt)("inlineCode",{parentName:"p"},"FixedString(16)")," for IPv6. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"select dictGet('my_ip_trie_dictionary', 'asn', tuple(IPv6StringToNum('2001:db8::1')))\n")),(0,i.kt)("p",null,"Other types are not supported yet. The function returns the attribute for the prefix that corresponds to this IP address. If there are overlapping prefixes, the most specific one is returned."),(0,i.kt)("p",null,"Data must completely fit into RAM."),(0,i.kt)("h2",{id:"dictionary-updates"},"Dictionary Updates"),(0,i.kt)("p",null,"ClickHouse periodically updates the dictionaries. The update interval for fully downloaded dictionaries and the invalidation interval for cached dictionaries are defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"lifetime")," tag in seconds."),(0,i.kt)("p",null,"Dictionary updates (other than loading for first use) do not block queries. During updates, the old version of a dictionary is used. If an error occurs during an update, the error is written to the server log, and queries continue using the old version of dictionaries."),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)(s,{mdxType:"CloudDetails"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<dictionary>\n    ...\n    <lifetime>300</lifetime>\n    ...\n</dictionary>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY (...)\n...\nLIFETIME(300)\n...\n")),(0,i.kt)("p",null,"Setting ",(0,i.kt)("inlineCode",{parentName:"p"},"<lifetime>0</lifetime>")," (",(0,i.kt)("inlineCode",{parentName:"p"},"LIFETIME(0)"),") prevents dictionaries from updating."),(0,i.kt)("p",null,"You can set a time interval for updates, and ClickHouse will choose a uniformly random time within this range. This is necessary in order to distribute the load on the dictionary source when updating on a large number of servers."),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<dictionary>\n    ...\n    <lifetime>\n        <min>300</min>\n        <max>360</max>\n    </lifetime>\n    ...\n</dictionary>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LIFETIME(MIN 300 MAX 360)\n")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"<min>0</min>")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"<max>0</max>"),", ClickHouse does not reload the dictionary by timeout.\nIn this case, ClickHouse can reload the dictionary earlier if the dictionary configuration file was changed or the ",(0,i.kt)("inlineCode",{parentName:"p"},"SYSTEM RELOAD DICTIONARY")," command was executed."),(0,i.kt)("p",null,"When updating the dictionaries, the ClickHouse server applies different logic depending on the type of ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-sources"},"source"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For a text file, it checks the time of modification. If the time differs from the previously recorded time, the dictionary is updated."),(0,i.kt)("li",{parentName:"ul"},"For MySQL source, the time of modification is checked using a ",(0,i.kt)("inlineCode",{parentName:"li"},"SHOW TABLE STATUS")," query (in case of MySQL 8 you need to disable meta-information caching in MySQL by ",(0,i.kt)("inlineCode",{parentName:"li"},"set global information_schema_stats_expiry=0"),")."),(0,i.kt)("li",{parentName:"ul"},"Dictionaries from other sources are updated every time by default.")),(0,i.kt)("p",null,"For other sources (ODBC, PostgreSQL, ClickHouse, etc), you can set up a query that will update the dictionaries only if they really changed, rather than each time. To do this, follow these steps:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The dictionary table must have a field that always changes when the source data is updated."),(0,i.kt)("li",{parentName:"ul"},"The settings of the source must specify a query that retrieves the changing field. The ClickHouse server interprets the query result as a row, and if this row has changed relative to its previous state, the dictionary is updated. Specify the query in the ",(0,i.kt)("inlineCode",{parentName:"li"},"<invalidate_query>")," field in the settings for the ",(0,i.kt)("a",{parentName:"li",href:"#dictionary-sources"},"source"),".")),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<dictionary>\n    ...\n    <odbc>\n      ...\n      <invalidate_query>SELECT update_time FROM dictionary_source where id = 1</invalidate_query>\n    </odbc>\n    ...\n</dictionary>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"...\nSOURCE(ODBC(... invalidate_query 'SELECT update_time FROM dictionary_source where id = 1'))\n...\n")),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"Cache"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ComplexKeyCache"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SSDCache"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"SSDComplexKeyCache")," dictionaries both synchronious and asynchronious updates are supported."),(0,i.kt)("p",null,"It is also possible for ",(0,i.kt)("inlineCode",{parentName:"p"},"Flat"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Hashed"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ComplexKeyHashed")," dictionaries to only request data that was changed after the previous update. If ",(0,i.kt)("inlineCode",{parentName:"p"},"update_field")," is specified as part of the dictionary source configuration, value of the previous update time in seconds will be added to the data request. Depends on source type (Executable, HTTP, MySQL, PostgreSQL, ClickHouse, or ODBC) different logic will be applied to ",(0,i.kt)("inlineCode",{parentName:"p"},"update_field")," before request data from an external source."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the source is HTTP then ",(0,i.kt)("inlineCode",{parentName:"li"},"update_field")," will be added as a query parameter with the last update time as the parameter value."),(0,i.kt)("li",{parentName:"ul"},"If the source is Executable then ",(0,i.kt)("inlineCode",{parentName:"li"},"update_field")," will be added as an executable script argument with the last update time as the argument value."),(0,i.kt)("li",{parentName:"ul"},"If the source is ClickHouse, MySQL, PostgreSQL, ODBC there will be an additional part of ",(0,i.kt)("inlineCode",{parentName:"li"},"WHERE"),", where ",(0,i.kt)("inlineCode",{parentName:"li"},"update_field")," is compared as greater or equal with the last update time.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Per default, this ",(0,i.kt)("inlineCode",{parentName:"li"},"WHERE"),"-condition is checked at the highest level of the SQL-Query. Alternatively, the condition can be checked in any other ",(0,i.kt)("inlineCode",{parentName:"li"},"WHERE"),"-clause within the query using the ",(0,i.kt)("inlineCode",{parentName:"li"},"{condition}"),"-keyword. Example:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"...\nSOURCE(CLICKHOUSE(...\n    update_field 'added_time'\n    QUERY '\n        SELECT my_arr.1 AS x, my_arr.2 AS y, creation_time\n        FROM (\n            SELECT arrayZip(x_arr, y_arr) AS my_arr, creation_time\n            FROM dictionary_source\n            WHERE {condition}\n        )'\n))\n...\n")))),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"update_field")," option is set, additional option ",(0,i.kt)("inlineCode",{parentName:"p"},"update_lag")," can be set. Value of ",(0,i.kt)("inlineCode",{parentName:"p"},"update_lag")," option is subtracted from previous update time before request updated data."),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<dictionary>\n    ...\n        <clickhouse>\n            ...\n            <update_field>added_time</update_field>\n            <update_lag>15</update_lag>\n        </clickhouse>\n    ...\n</dictionary>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"...\nSOURCE(CLICKHOUSE(... update_field 'added_time' update_lag 15))\n...\n")),(0,i.kt)("h2",{id:"dictionary-sources"},"Dictionary Sources"),(0,i.kt)(s,{mdxType:"CloudDetails"}),(0,i.kt)("p",null,"A dictionary can be connected to ClickHouse from many different sources."),(0,i.kt)("p",null,"If the dictionary is configured using an xml-file, the configuration looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<clickhouse>\n  <dictionary>\n    ...\n    <source>\n      <source_type>\n        \x3c!-- Source configuration --\x3e\n      </source_type>\n    </source>\n    ...\n  </dictionary>\n  ...\n</clickhouse>\n")),(0,i.kt)("p",null,"In case of ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/dictionary"},"DDL-query"),", the configuration described above will look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY dict_name (...)\n...\nSOURCE(SOURCE_TYPE(param1 val1 ... paramN valN)) -- Source configuration\n...\n")),(0,i.kt)("p",null,"The source is configured in the ",(0,i.kt)("inlineCode",{parentName:"p"},"source")," section."),(0,i.kt)("p",null,"For source types ",(0,i.kt)("a",{parentName:"p",href:"#local_file"},"Local file"),", ",(0,i.kt)("a",{parentName:"p",href:"#executable"},"Executable file"),", ",(0,i.kt)("a",{parentName:"p",href:"#https"},"HTTP(s)"),", ",(0,i.kt)("a",{parentName:"p",href:"#clickhouse"},"ClickHouse"),"\noptional settings are available:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<source>\n  <file>\n    <path>/opt/dictionaries/os.tsv</path>\n    <format>TabSeparated</format>\n  </file>\n  <settings>\n      <format_csv_allow_single_quotes>0</format_csv_allow_single_quotes>\n  </settings>\n</source>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SOURCE(FILE(path './user_files/os.tsv' format 'TabSeparated'))\nSETTINGS(format_csv_allow_single_quotes = 0)\n")),(0,i.kt)("p",null,"Types of sources (",(0,i.kt)("inlineCode",{parentName:"p"},"source_type"),"):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#local_file"},"Local file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#executable"},"Executable File")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#executable_pool"},"Executable Pool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#http"},"HTTP(s)")),(0,i.kt)("li",{parentName:"ul"},"DBMS",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#odbc"},"ODBC")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#mysql"},"MySQL")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#clickhouse"},"ClickHouse")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#mongodb"},"MongoDB")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#redis"},"Redis")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#cassandra"},"Cassandra")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#postgresql"},"PostgreSQL"))))),(0,i.kt)("h2",{id:"local_file"},"Local File"),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<source>\n  <file>\n    <path>/opt/dictionaries/os.tsv</path>\n    <format>TabSeparated</format>\n  </file>\n</source>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SOURCE(FILE(path './user_files/os.tsv' format 'TabSeparated'))\n")),(0,i.kt)("p",null,"Setting fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path")," \u2013 The absolute path to the file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"format")," \u2013 The file format. All the formats described in ",(0,i.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats#formats"},"Formats")," are supported.")),(0,i.kt)("p",null,"When a dictionary with source ",(0,i.kt)("inlineCode",{parentName:"p"},"FILE")," is created via DDL command (",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE DICTIONARY ..."),"), the source file needs to be located in the ",(0,i.kt)("inlineCode",{parentName:"p"},"user_files")," directory to prevent DB users from accessing arbitrary files on the ClickHouse node."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"See Also")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/table-functions/dictionary#dictionary-function"},"Dictionary function"))),(0,i.kt)("h2",{id:"executable"},"Executable File"),(0,i.kt)("p",null,"Working with executable files depends on ",(0,i.kt)("a",{parentName:"p",href:"#storig-dictionaries-in-memory"},"how the dictionary is stored in memory"),". If the dictionary is stored using ",(0,i.kt)("inlineCode",{parentName:"p"},"cache")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"complex_key_cache"),", ClickHouse requests the necessary keys by sending a request to the executable file\u2019s STDIN. Otherwise, ClickHouse starts the executable file and treats its output as dictionary data."),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<source>\n    <executable>\n        <command>cat /opt/dictionaries/os.tsv</command>\n        <format>TabSeparated</format>\n        <implicit_key>false</implicit_key>\n    </executable>\n</source>\n")),(0,i.kt)("p",null,"Setting fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"command")," \u2014 The absolute path to the executable file, or the file name (if the command's directory is in the ",(0,i.kt)("inlineCode",{parentName:"li"},"PATH"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"format")," \u2014 The file format. All the formats described in ",(0,i.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats#formats"},"Formats")," are supported."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"command_termination_timeout")," \u2014 The executable script should contain a main read-write loop. After the dictionary is destroyed, the pipe is closed, and the executable file will have ",(0,i.kt)("inlineCode",{parentName:"li"},"command_termination_timeout")," seconds to shutdown before ClickHouse will send a SIGTERM signal to the child process. ",(0,i.kt)("inlineCode",{parentName:"li"},"command_termination_timeout")," is specified in seconds. Default value is 10. Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"command_read_timeout")," - Timeout for reading data from command stdout in milliseconds. Default value 10000. Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"command_write_timeout")," - Timeout for writing data to command stdin in milliseconds. Default value 10000. Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"implicit_key")," \u2014 The executable source file can return only values, and the correspondence to the requested keys is determined implicitly \u2014 by the order of rows in the result. Default value is false."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"execute_direct")," - If ",(0,i.kt)("inlineCode",{parentName:"li"},"execute_direct")," = ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),", then ",(0,i.kt)("inlineCode",{parentName:"li"},"command")," will be searched inside user_scripts folder specified by ",(0,i.kt)("a",{parentName:"li",href:"/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-user_scripts_path"},"user_scripts_path"),". Additional script arguments can be specified using a whitespace separator. Example: ",(0,i.kt)("inlineCode",{parentName:"li"},"script_name arg1 arg2"),". If ",(0,i.kt)("inlineCode",{parentName:"li"},"execute_direct")," = ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"command")," is passed as argument for ",(0,i.kt)("inlineCode",{parentName:"li"},"bin/sh -c"),". Default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),". Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"send_chunk_header")," - controls whether to send row count before sending a chunk of data to process. Optional. Default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,i.kt)("p",null,"That dictionary source can be configured only via XML configuration. Creating dictionaries with executable source via DDL is disabled; otherwise, the DB user would be able to execute arbitrary binaries on the ClickHouse node."),(0,i.kt)("h2",{id:"executable_pool"},"Executable Pool"),(0,i.kt)("p",null,"Executable pool allows loading data from pool of processes. This source does not work with dictionary layouts that need to load all data from source. Executable pool works if the dictionary ",(0,i.kt)("a",{parentName:"p",href:"#ways-to-store-dictionaries-in-memory"},"is stored")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"cache"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"complex_key_cache"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ssd_cache"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"complex_key_ssd_cache"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"direct"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"complex_key_direct")," layouts."),(0,i.kt)("p",null,"Executable pool will spawn a pool of processes with the specified command and keep them running until they exit. The program should read data from STDIN while it is available and output the result to STDOUT. It can wait for the next block of data on STDIN. ClickHouse will not close STDIN after processing a block of data, but will pipe another chunk of data when needed. The executable script should be ready for this way of data processing \u2014 it should poll STDIN and flush data to STDOUT early."),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<source>\n    <executable_pool>\n        <command><command>while read key; do printf "$key\\tData for key $key\\n"; done</command</command>\n        <format>TabSeparated</format>\n        <pool_size>10</pool_size>\n        <max_command_execution_time>10<max_command_execution_time>\n        <implicit_key>false</implicit_key>\n    </executable_pool>\n</source>\n')),(0,i.kt)("p",null,"Setting fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"command")," \u2014 The absolute path to the executable file, or the file name (if the program directory is written to ",(0,i.kt)("inlineCode",{parentName:"li"},"PATH"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"format")," \u2014 The file format. All the formats described in \u201c",(0,i.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats#formats"},"Formats"),"\u201d are supported."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pool_size")," \u2014 Size of pool. If 0 is specified as ",(0,i.kt)("inlineCode",{parentName:"li"},"pool_size")," then there is no pool size restrictions. Default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"16"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"command_termination_timeout")," \u2014 executable script should contain main read-write loop. After dictionary is destroyed, pipe is closed, and executable file will have ",(0,i.kt)("inlineCode",{parentName:"li"},"command_termination_timeout")," seconds to shutdown, before ClickHouse will send SIGTERM signal to child process. Specified in seconds. Default value is 10. Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_command_execution_time")," \u2014 Maximum executable script command execution time for processing block of data. Specified in seconds. Default value is 10. Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"command_read_timeout")," - timeout for reading data from command stdout in milliseconds. Default value 10000. Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"command_write_timeout")," - timeout for writing data to command stdin in milliseconds. Default value 10000. Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"implicit_key")," \u2014 The executable source file can return only values, and the correspondence to the requested keys is determined implicitly \u2014 by the order of rows in the result. Default value is false. Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"execute_direct")," - If ",(0,i.kt)("inlineCode",{parentName:"li"},"execute_direct")," = ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),", then ",(0,i.kt)("inlineCode",{parentName:"li"},"command")," will be searched inside user_scripts folder specified by ",(0,i.kt)("a",{parentName:"li",href:"/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-user_scripts_path"},"user_scripts_path"),". Additional script arguments can be specified using whitespace separator. Example: ",(0,i.kt)("inlineCode",{parentName:"li"},"script_name arg1 arg2"),". If ",(0,i.kt)("inlineCode",{parentName:"li"},"execute_direct")," = ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"command")," is passed as argument for ",(0,i.kt)("inlineCode",{parentName:"li"},"bin/sh -c"),". Default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),". Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"send_chunk_header")," - controls whether to send row count before sending a chunk of data to process. Optional. Default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,i.kt)("p",null,"That dictionary source can be configured only via XML configuration. Creating dictionaries with executable source via DDL is disabled, otherwise, the DB user would be able to execute arbitrary binary on ClickHouse node."),(0,i.kt)("h2",{id:"https"},"Http(s)"),(0,i.kt)("p",null,"Working with an HTTP(s) server depends on ",(0,i.kt)("a",{parentName:"p",href:"#storig-dictionaries-in-memory"},"how the dictionary is stored in memory"),". If the dictionary is stored using ",(0,i.kt)("inlineCode",{parentName:"p"},"cache")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"complex_key_cache"),", ClickHouse requests the necessary keys by sending a request via the ",(0,i.kt)("inlineCode",{parentName:"p"},"POST")," method."),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<source>\n    <http>\n        <url>http://[::1]/os.tsv</url>\n        <format>TabSeparated</format>\n        <credentials>\n            <user>user</user>\n            <password>password</password>\n        </credentials>\n        <headers>\n            <header>\n                <name>API-KEY</name>\n                <value>key</value>\n            </header>\n        </headers>\n    </http>\n</source>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SOURCE(HTTP(\n    url 'http://[::1]/os.tsv'\n    format 'TabSeparated'\n    credentials(user 'user' password 'password')\n    headers(header(name 'API-KEY' value 'key'))\n))\n")),(0,i.kt)("p",null,"In order for ClickHouse to access an HTTPS resource, you must ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-openssl"},"configure openSSL")," in the server configuration."),(0,i.kt)("p",null,"Setting fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"url")," \u2013 The source URL."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"format")," \u2013 The file format. All the formats described in \u201c",(0,i.kt)("a",{parentName:"li",href:"/docs/en/interfaces/formats#formats"},"Formats"),"\u201d are supported."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"credentials")," \u2013 Basic HTTP authentication. Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," \u2013 Username required for the authentication."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," \u2013 Password required for the authentication."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"headers")," \u2013 All custom HTTP headers entries used for the HTTP request. Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"header")," \u2013 Single HTTP header entry."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," \u2013 Identifiant name used for the header send on the request."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value")," \u2013 Value set for a specific identifiant name.")),(0,i.kt)("p",null,"When creating a dictionary using the DDL command (",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE DICTIONARY ..."),") remote hosts for HTTP dictionaries are checked against the contents of ",(0,i.kt)("inlineCode",{parentName:"p"},"remote_url_allow_hosts")," section from config to prevent database users to access arbitrary HTTP server."),(0,i.kt)("h3",{id:"known-vulnerability-of-the-odbc-dictionary-functionality"},"Known Vulnerability of the ODBC Dictionary Functionality"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"When connecting to the database through the ODBC driver connection parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"Servername")," can be substituted. In this case values of ",(0,i.kt)("inlineCode",{parentName:"p"},"USERNAME")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"PASSWORD")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"odbc.ini")," are sent to the remote server and can be compromised.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example of insecure use")),(0,i.kt)("p",null,"Let\u2019s configure unixODBC for PostgreSQL. Content of ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/odbc.ini"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[gregtest]\nDriver = /usr/lib/psqlodbca.so\nServername = localhost\nPORT = 5432\nDATABASE = test_db\n#OPTION = 3\nUSERNAME = test\nPASSWORD = test\n")),(0,i.kt)("p",null,"If you then make a query such as"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM odbc('DSN=gregtest;Servername=some-server.com', 'test_db');\n")),(0,i.kt)("p",null,"ODBC driver will send values of ",(0,i.kt)("inlineCode",{parentName:"p"},"USERNAME")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"PASSWORD")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"odbc.ini")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"some-server.com"),"."),(0,i.kt)("h3",{id:"example-of-connecting-postgresql"},"Example of Connecting Postgresql"),(0,i.kt)("p",null,"Ubuntu OS."),(0,i.kt)("p",null,"Installing unixODBC and the ODBC driver for PostgreSQL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo apt-get install -y unixodbc odbcinst odbc-postgresql\n")),(0,i.kt)("p",null,"Configuring ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/odbc.ini")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.odbc.ini")," if you signed in under a user that runs ClickHouse):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"    [DEFAULT]\n    Driver = myconnection\n\n    [myconnection]\n    Description         = PostgreSQL connection to my_db\n    Driver              = PostgreSQL Unicode\n    Database            = my_db\n    Servername          = 127.0.0.1\n    UserName            = username\n    Password            = password\n    Port                = 5432\n    Protocol            = 9.3\n    ReadOnly            = No\n    RowVersioning       = No\n    ShowSystemTables    = No\n    ConnSettings        =\n")),(0,i.kt)("p",null,"The dictionary configuration in ClickHouse:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<clickhouse>\n    <dictionary>\n        <name>table_name</name>\n        <source>\n            <odbc>\n                \x3c!-- You can specify the following parameters in connection_string: --\x3e\n                \x3c!-- DSN=myconnection;UID=username;PWD=password;HOST=127.0.0.1;PORT=5432;DATABASE=my_db --\x3e\n                <connection_string>DSN=myconnection</connection_string>\n                <table>postgresql_table</table>\n            </odbc>\n        </source>\n        <lifetime>\n            <min>300</min>\n            <max>360</max>\n        </lifetime>\n        <layout>\n            <hashed/>\n        </layout>\n        <structure>\n            <id>\n                <name>id</name>\n            </id>\n            <attribute>\n                <name>some_column</name>\n                <type>UInt64</type>\n                <null_value>0</null_value>\n            </attribute>\n        </structure>\n    </dictionary>\n</clickhouse>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY table_name (\n    id UInt64,\n    some_column UInt64 DEFAULT 0\n)\nPRIMARY KEY id\nSOURCE(ODBC(connection_string 'DSN=myconnection' table 'postgresql_table'))\nLAYOUT(HASHED())\nLIFETIME(MIN 300 MAX 360)\n")),(0,i.kt)("p",null,"You may need to edit ",(0,i.kt)("inlineCode",{parentName:"p"},"odbc.ini")," to specify the full path to the library with the driver ",(0,i.kt)("inlineCode",{parentName:"p"},"DRIVER=/usr/local/lib/psqlodbcw.so"),"."),(0,i.kt)("h3",{id:"example-of-connecting-ms-sql-server"},"Example of Connecting MS SQL Server"),(0,i.kt)("p",null,"Ubuntu OS."),(0,i.kt)("p",null,"Installing the ODBC driver for connecting to MS SQL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo apt-get install tdsodbc freetds-bin sqsh\n")),(0,i.kt)("p",null,"Configuring the driver:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    $ cat /etc/freetds/freetds.conf\n    ...\n\n    [MSSQL]\n    host = 192.168.56.101\n    port = 1433\n    tds version = 7.0\n    client charset = UTF-8\n\n    # test TDS connection\n    $ sqsh -S MSSQL -D database -U user -P password\n\n\n    $ cat /etc/odbcinst.ini\n\n    [FreeTDS]\n    Description     = FreeTDS\n    Driver          = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\n    Setup           = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so\n    FileUsage       = 1\n    UsageCount      = 5\n\n    $ cat /etc/odbc.ini\n    # $ cat ~/.odbc.ini # if you signed in under a user that runs ClickHouse\n\n    [MSSQL]\n    Description     = FreeTDS\n    Driver          = FreeTDS\n    Servername      = MSSQL\n    Database        = test\n    UID             = test\n    PWD             = test\n    Port            = 1433\n\n\n    # (optional) test ODBC connection (to use isql-tool install the [unixodbc](https://packages.debian.org/sid/unixodbc)-package)\n    $ isql -v MSSQL "user" "password"\n')),(0,i.kt)("p",null,"Remarks:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"to determine the earliest TDS version that is supported by a particular SQL Server version, refer to the product documentation or look at ",(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-tds/135d0ebe-5c4c-4a94-99bf-1811eccb9f4a"},"MS-TDS Product Behavior"))),(0,i.kt)("p",null,"Configuring the dictionary in ClickHouse:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<clickhouse>\n    <dictionary>\n        <name>test</name>\n        <source>\n            <odbc>\n                <table>dict</table>\n                <connection_string>DSN=MSSQL;UID=test;PWD=test</connection_string>\n            </odbc>\n        </source>\n\n        <lifetime>\n            <min>300</min>\n            <max>360</max>\n        </lifetime>\n\n        <layout>\n            <flat />\n        </layout>\n\n        <structure>\n            <id>\n                <name>k</name>\n            </id>\n            <attribute>\n                <name>s</name>\n                <type>String</type>\n                <null_value></null_value>\n            </attribute>\n        </structure>\n    </dictionary>\n</clickhouse>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY test (\n    k UInt64,\n    s String DEFAULT ''\n)\nPRIMARY KEY k\nSOURCE(ODBC(table 'dict' connection_string 'DSN=MSSQL;UID=test;PWD=test'))\nLAYOUT(FLAT())\nLIFETIME(MIN 300 MAX 360)\n")),(0,i.kt)("h2",{id:"dbms"},"DBMS"),(0,i.kt)("h3",{id:"odbc"},"ODBC"),(0,i.kt)("p",null,"You can use this method to connect any database that has an ODBC driver."),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<source>\n    <odbc>\n        <db>DatabaseName</db>\n        <table>ShemaName.TableName</table>\n        <connection_string>DSN=some_parameters</connection_string>\n        <invalidate_query>SQL_QUERY</invalidate_query>\n        <query>SELECT id, value_1, value_2 FROM ShemaName.TableName</query>\n    </odbc>\n</source>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SOURCE(ODBC(\n    db 'DatabaseName'\n    table 'SchemaName.TableName'\n    connection_string 'DSN=some_parameters'\n    invalidate_query 'SQL_QUERY'\n    query 'SELECT id, value_1, value_2 FROM db_name.table_name'\n))\n")),(0,i.kt)("p",null,"Setting fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"db")," \u2013 Name of the database. Omit it if the database name is set in the ",(0,i.kt)("inlineCode",{parentName:"li"},"<connection_string>")," parameters."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"table")," \u2013 Name of the table and schema if exists."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"connection_string")," \u2013 Connection string."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"invalidate_query")," \u2013 Query for checking the dictionary status. Optional parameter. Read more in the section ",(0,i.kt)("a",{parentName:"li",href:"#dictionary-updates"},"Updating dictionaries"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query")," \u2013 The custom query. Optional parameter.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," fields cannot be used together. And either one of the ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," fields must be declared.")),(0,i.kt)("p",null,"ClickHouse receives quoting symbols from ODBC-driver and quote all settings in queries to driver, so it\u2019s necessary to set table name accordingly to table name case in database."),(0,i.kt)("p",null,"If you have a problems with encodings when using Oracle, see the corresponding ",(0,i.kt)("a",{parentName:"p",href:"/knowledgebase/oracle-odbc"},"FAQ")," item."),(0,i.kt)("h3",{id:"mysql"},"Mysql"),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<source>\n  <mysql>\n      <port>3306</port>\n      <user>clickhouse</user>\n      <password>qwerty</password>\n      <replica>\n          <host>example01-1</host>\n          <priority>1</priority>\n      </replica>\n      <replica>\n          <host>example01-2</host>\n          <priority>1</priority>\n      </replica>\n      <db>db_name</db>\n      <table>table_name</table>\n      <where>id=10</where>\n      <invalidate_query>SQL_QUERY</invalidate_query>\n      <fail_on_connection_loss>true</fail_on_connection_loss>\n      <query>SELECT id, value_1, value_2 FROM db_name.table_name</query>\n  </mysql>\n</source>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SOURCE(MYSQL(\n    port 3306\n    user 'clickhouse'\n    password 'qwerty'\n    replica(host 'example01-1' priority 1)\n    replica(host 'example01-2' priority 1)\n    db 'db_name'\n    table 'table_name'\n    where 'id=10'\n    invalidate_query 'SQL_QUERY'\n    fail_on_connection_loss 'true'\n    query 'SELECT id, value_1, value_2 FROM db_name.table_name'\n))\n")),(0,i.kt)("p",null,"Setting fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"port")," \u2013 The port on the MySQL server. You can specify it for all replicas, or for each one individually (inside ",(0,i.kt)("inlineCode",{parentName:"p"},"<replica>"),").")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"user")," \u2013 Name of the MySQL user. You can specify it for all replicas, or for each one individually (inside ",(0,i.kt)("inlineCode",{parentName:"p"},"<replica>"),").")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"password")," \u2013 Password of the MySQL user. You can specify it for all replicas, or for each one individually (inside ",(0,i.kt)("inlineCode",{parentName:"p"},"<replica>"),").")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"replica")," \u2013 Section of replica configurations. There can be multiple sections."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"- `replica/host` \u2013 The MySQL host.\n- `replica/priority` \u2013 The replica priority. When attempting to connect, ClickHouse traverses the replicas in order of priority. The lower the number, the higher the priority.\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"db")," \u2013 Name of the database.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"table")," \u2013 Name of the table.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"where")," \u2013 The selection criteria. The syntax for conditions is the same as for ",(0,i.kt)("inlineCode",{parentName:"p"},"WHERE")," clause in MySQL, for example, ",(0,i.kt)("inlineCode",{parentName:"p"},"id > 10 AND id < 20"),". Optional parameter.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"invalidate_query")," \u2013 Query for checking the dictionary status. Optional parameter. Read more in the section ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-updates"},"Updating dictionaries"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"fail_on_connection_loss")," \u2013 The configuration parameter that controls behavior of the server on connection loss. If ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", an exception is thrown immediately if the connection between client and server was lost. If ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", the ClickHouse server retries to execute the query three times before throwing an exception. Note that retrying leads to increased response times. Default value: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"query")," \u2013 The custom query. Optional parameter."))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," fields cannot be used together with the ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," field. And either one of the ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," fields must be declared.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"There is no explicit parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"secure"),". When establishing an SSL-connection security is mandatory.")),(0,i.kt)("p",null,"MySQL can be connected to on a local host via sockets. To do this, set ",(0,i.kt)("inlineCode",{parentName:"p"},"host")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"socket"),"."),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<source>\n  <mysql>\n      <host>localhost</host>\n      <socket>/path/to/socket/file.sock</socket>\n      <user>clickhouse</user>\n      <password>qwerty</password>\n      <db>db_name</db>\n      <table>table_name</table>\n      <where>id=10</where>\n      <invalidate_query>SQL_QUERY</invalidate_query>\n      <fail_on_connection_loss>true</fail_on_connection_loss>\n      <query>SELECT id, value_1, value_2 FROM db_name.table_name</query>\n  </mysql>\n</source>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SOURCE(MYSQL(\n    host 'localhost'\n    socket '/path/to/socket/file.sock'\n    user 'clickhouse'\n    password 'qwerty'\n    db 'db_name'\n    table 'table_name'\n    where 'id=10'\n    invalidate_query 'SQL_QUERY'\n    fail_on_connection_loss 'true'\n    query 'SELECT id, value_1, value_2 FROM db_name.table_name'\n))\n")),(0,i.kt)("h3",{id:"clickhouse"},"ClickHouse"),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<source>\n    <clickhouse>\n        <host>example01-01-1</host>\n        <port>9000</port>\n        <user>default</user>\n        <password></password>\n        <db>default</db>\n        <table>ids</table>\n        <where>id=10</where>\n        <secure>1</secure>\n        <query>SELECT id, value_1, value_2 FROM default.ids</query>\n    </clickhouse>\n</source>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SOURCE(CLICKHOUSE(\n    host 'example01-01-1'\n    port 9000\n    user 'default'\n    password ''\n    db 'default'\n    table 'ids'\n    where 'id=10'\n    secure 1\n    query 'SELECT id, value_1, value_2 FROM default.ids'\n));\n")),(0,i.kt)("p",null,"Setting fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," \u2013 The ClickHouse host. If it is a local host, the query is processed without any network activity. To improve fault tolerance, you can create a ",(0,i.kt)("a",{parentName:"li",href:"/docs/en/engines/table-engines/special/distributed"},"Distributed")," table and enter it in subsequent configurations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," \u2013 The port on the ClickHouse server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," \u2013 Name of the ClickHouse user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," \u2013 Password of the ClickHouse user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"db")," \u2013 Name of the database."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"table")," \u2013 Name of the table."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"where")," \u2013 The selection criteria. May be omitted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"invalidate_query")," \u2013 Query for checking the dictionary status. Optional parameter. Read more in the section ",(0,i.kt)("a",{parentName:"li",href:"#dictionary-updates"},"Updating dictionaries"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"secure")," - Use ssl for connection."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query")," \u2013 The custom query. Optional parameter.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," fields cannot be used together with the ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," field. And either one of the ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," fields must be declared.")),(0,i.kt)("h3",{id:"mongodb"},"Mongodb"),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<source>\n    <mongodb>\n        <host>localhost</host>\n        <port>27017</port>\n        <user></user>\n        <password></password>\n        <db>test</db>\n        <collection>dictionary_source</collection>\n    </mongodb>\n</source>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SOURCE(MONGODB(\n    host 'localhost'\n    port 27017\n    user ''\n    password ''\n    db 'test'\n    collection 'dictionary_source'\n))\n")),(0,i.kt)("p",null,"Setting fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," \u2013 The MongoDB host."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," \u2013 The port on the MongoDB server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," \u2013 Name of the MongoDB user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," \u2013 Password of the MongoDB user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"db")," \u2013 Name of the database."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"collection")," \u2013 Name of the collection.")),(0,i.kt)("h3",{id:"redis"},"Redis"),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<source>\n    <redis>\n        <host>localhost</host>\n        <port>6379</port>\n        <storage_type>simple</storage_type>\n        <db_index>0</db_index>\n    </redis>\n</source>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SOURCE(REDIS(\n    host 'localhost'\n    port 6379\n    storage_type 'simple'\n    db_index 0\n))\n")),(0,i.kt)("p",null,"Setting fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," \u2013 The Redis host."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," \u2013 The port on the Redis server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"storage_type")," \u2013 The structure of internal Redis storage using for work with keys. ",(0,i.kt)("inlineCode",{parentName:"li"},"simple")," is for simple sources and for hashed single key sources, ",(0,i.kt)("inlineCode",{parentName:"li"},"hash_map")," is for hashed sources with two keys. Ranged sources and cache sources with complex key are unsupported. May be omitted, default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"simple"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"db_index")," \u2013 The specific numeric index of Redis logical database. May be omitted, default value is 0.")),(0,i.kt)("h3",{id:"cassandra"},"Cassandra"),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<source>\n    <cassandra>\n        <host>localhost</host>\n        <port>9042</port>\n        <user>username</user>\n        <password>qwerty123</password>\n        <keyspase>database_name</keyspase>\n        <column_family>table_name</column_family>\n        <allow_filering>1</allow_filering>\n        <partition_key_prefix>1</partition_key_prefix>\n        <consistency>One</consistency>\n        <where>"SomeColumn" = 42</where>\n        <max_threads>8</max_threads>\n        <query>SELECT id, value_1, value_2 FROM database_name.table_name</query>\n    </cassandra>\n</source>\n')),(0,i.kt)("p",null,"Setting fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," \u2013 The Cassandra host or comma-separated list of hosts."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," \u2013 The port on the Cassandra servers. If not specified, default port 9042 is used."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," \u2013 Name of the Cassandra user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," \u2013 Password of the Cassandra user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"keyspace")," \u2013 Name of the keyspace (database)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"column_family")," \u2013 Name of the column family (table)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allow_filering")," \u2013 Flag to allow or not potentially expensive conditions on clustering key columns. Default value is 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"partition_key_prefix")," \u2013 Number of partition key columns in primary key of the Cassandra table. Required for compose key dictionaries. Order of key columns in the dictionary definition must be the same as in Cassandra. Default value is 1 (the first key column is a partition key and other key columns are clustering key)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"consistency")," \u2013 Consistency level. Possible values: ",(0,i.kt)("inlineCode",{parentName:"li"},"One"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Two"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Three"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"All"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"EachQuorum"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Quorum"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"LocalQuorum"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"LocalOne"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Serial"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"LocalSerial"),". Default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"One"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"where")," \u2013 Optional selection criteria."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_threads")," \u2013 The maximum number of threads to use for loading data from multiple partitions in compose key dictionaries."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query")," \u2013 The custom query. Optional parameter.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"column_family")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," fields cannot be used together with the ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," field. And either one of the ",(0,i.kt)("inlineCode",{parentName:"p"},"column_family")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," fields must be declared.")),(0,i.kt)("h3",{id:"postgresql"},"PostgreSQL"),(0,i.kt)("p",null,"Example of settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<source>\n  <postgresql>\n      <port>5432</port>\n      <user>clickhouse</user>\n      <password>qwerty</password>\n      <db>db_name</db>\n      <table>table_name</table>\n      <where>id=10</where>\n      <invalidate_query>SQL_QUERY</invalidate_query>\n      <query>SELECT id, value_1, value_2 FROM db_name.table_name</query>\n  </postgresql>\n</source>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SOURCE(POSTGRESQL(\n    port 5432\n    host 'postgresql-hostname'\n    user 'postgres_user'\n    password 'postgres_password'\n    db 'db_name'\n    table 'table_name'\n    replica(host 'example01-1' port 5432 priority 1)\n    replica(host 'example01-2' port 5432 priority 2)\n    where 'id=10'\n    invalidate_query 'SQL_QUERY'\n    query 'SELECT id, value_1, value_2 FROM db_name.table_name'\n))\n")),(0,i.kt)("p",null,"Setting fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," \u2013 The host on the PostgreSQL server. You can specify it for all replicas, or for each one individually (inside ",(0,i.kt)("inlineCode",{parentName:"li"},"<replica>"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," \u2013 The port on the PostgreSQL server. You can specify it for all replicas, or for each one individually (inside ",(0,i.kt)("inlineCode",{parentName:"li"},"<replica>"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," \u2013 Name of the PostgreSQL user. You can specify it for all replicas, or for each one individually (inside ",(0,i.kt)("inlineCode",{parentName:"li"},"<replica>"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," \u2013 Password of the PostgreSQL user. You can specify it for all replicas, or for each one individually (inside ",(0,i.kt)("inlineCode",{parentName:"li"},"<replica>"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"replica")," \u2013 Section of replica configurations. There can be multiple sections:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"replica/host")," \u2013 The PostgreSQL host."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"replica/port")," \u2013 The PostgreSQL port."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"replica/priority")," \u2013 The replica priority. When attempting to connect, ClickHouse traverses the replicas in order of priority. The lower the number, the higher the priority."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"db")," \u2013 Name of the database."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"table")," \u2013 Name of the table."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"where")," \u2013 The selection criteria. The syntax for conditions is the same as for ",(0,i.kt)("inlineCode",{parentName:"li"},"WHERE")," clause in PostgreSQL. For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"id > 10 AND id < 20"),". Optional parameter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"invalidate_query")," \u2013 Query for checking the dictionary status. Optional parameter. Read more in the section ",(0,i.kt)("a",{parentName:"li",href:"#dictionary-updates"},"Updating dictionaries"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query")," \u2013 The custom query. Optional parameter.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," fields cannot be used together with the ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," field. And either one of the ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," fields must be declared.")),(0,i.kt)("h2",{id:"null"},"Null"),(0,i.kt)("p",null,"A special source that can be used to create dummy (empty) dictionaries. Such dictionaries can useful for tests or with setups with separated data and query nodes at nodes with Distributed tables."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY null_dict (\n    id              UInt64,\n    val             UInt8,\n    default_val     UInt8 DEFAULT 123,\n    nullable_val    Nullable(UInt8)\n)\nPRIMARY KEY id\nSOURCE(NULL())\nLAYOUT(FLAT())\nLIFETIME(0);\n")),(0,i.kt)("h2",{id:"dictionary-key-and-fields"},"Dictionary Key and Fields"),(0,i.kt)(s,{mdxType:"CloudDetails"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"structure")," clause describes the dictionary key and fields available for queries."),(0,i.kt)("p",null,"XML description:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<dictionary>\n    <structure>\n        <id>\n            <name>Id</name>\n        </id>\n\n        <attribute>\n            \x3c!-- Attribute parameters --\x3e\n        </attribute>\n\n        ...\n\n    </structure>\n</dictionary>\n")),(0,i.kt)("p",null,"Attributes are described in the elements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<id>")," \u2014 Key column"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<attribute>")," \u2014 Data column: there can be a multiple number of attributes.")),(0,i.kt)("p",null,"DDL query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY dict_name (\n    Id UInt64,\n    -- attributes\n)\nPRIMARY KEY Id\n...\n")),(0,i.kt)("p",null,"Attributes are described in the query body:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PRIMARY KEY")," \u2014 Key column"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AttrName AttrType")," \u2014 Data column. There can be a multiple number of attributes.")),(0,i.kt)("h2",{id:"key"},"Key"),(0,i.kt)("p",null,"ClickHouse supports the following types of keys:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Numeric key. ",(0,i.kt)("inlineCode",{parentName:"li"},"UInt64"),". Defined in the ",(0,i.kt)("inlineCode",{parentName:"li"},"<id>")," tag or using ",(0,i.kt)("inlineCode",{parentName:"li"},"PRIMARY KEY")," keyword."),(0,i.kt)("li",{parentName:"ul"},"Composite key. Set of values of different types. Defined in the tag ",(0,i.kt)("inlineCode",{parentName:"li"},"<key>")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"PRIMARY KEY")," keyword.")),(0,i.kt)("p",null,"An xml structure can contain either ",(0,i.kt)("inlineCode",{parentName:"p"},"<id>")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"<key>"),". DDL-query must contain single ",(0,i.kt)("inlineCode",{parentName:"p"},"PRIMARY KEY"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You must not describe key as an attribute.")),(0,i.kt)("h3",{id:"numeric-key"},"Numeric Key"),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"UInt64"),"."),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<id>\n    <name>Id</name>\n</id>\n")),(0,i.kt)("p",null,"Configuration fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," \u2013 The name of the column with keys.")),(0,i.kt)("p",null,"For DDL-query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY (\n    Id UInt64,\n    ...\n)\nPRIMARY KEY Id\n...\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PRIMARY KEY")," \u2013 The name of the column with keys.")),(0,i.kt)("h3",{id:"composite-key"},"Composite Key"),(0,i.kt)("p",null,"The key can be a ",(0,i.kt)("inlineCode",{parentName:"p"},"tuple")," from any types of fields. The ",(0,i.kt)("a",{parentName:"p",href:"#storig-dictionaries-in-memory"},"layout")," in this case must be ",(0,i.kt)("inlineCode",{parentName:"p"},"complex_key_hashed")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"complex_key_cache"),"."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"A composite key can consist of a single element. This makes it possible to use a string as the key, for instance.")),(0,i.kt)("p",null,"The key structure is set in the element ",(0,i.kt)("inlineCode",{parentName:"p"},"<key>"),". Key fields are specified in the same format as the dictionary ",(0,i.kt)("a",{parentName:"p",href:"#dictionary-key-and-fields"},"attributes"),". Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<structure>\n    <key>\n        <attribute>\n            <name>field1</name>\n            <type>String</type>\n        </attribute>\n        <attribute>\n            <name>field2</name>\n            <type>UInt32</type>\n        </attribute>\n        ...\n    </key>\n...\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY (\n    field1 String,\n    field2 String\n    ...\n)\nPRIMARY KEY field1, field2\n...\n")),(0,i.kt)("p",null,"For a query to the ",(0,i.kt)("inlineCode",{parentName:"p"},"dictGet*")," function, a tuple is passed as the key. Example: ",(0,i.kt)("inlineCode",{parentName:"p"},"dictGetString('dict_name', 'attr_name', tuple('string for field1', num_for_field2))"),"."),(0,i.kt)("h2",{id:"attributes"},"Attributes"),(0,i.kt)("p",null,"Configuration example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<structure>\n    ...\n    <attribute>\n        <name>Name</name>\n        <type>ClickHouseDataType</type>\n        <null_value></null_value>\n        <expression>rand64()</expression>\n        <hierarchical>true</hierarchical>\n        <injective>true</injective>\n        <is_object_id>true</is_object_id>\n    </attribute>\n</structure>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY somename (\n    Name ClickHouseDataType DEFAULT '' EXPRESSION rand64() HIERARCHICAL INJECTIVE IS_OBJECT_ID\n)\n")),(0,i.kt)("p",null,"Configuration fields:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Tag"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"name")),(0,i.kt)("td",{parentName:"tr",align:null},"Column name."),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:null},"ClickHouse data type: ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt8"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt16"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt32"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int8"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int16"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int32"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int64"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float32"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float64"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/uuid"},"UUID"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal32"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal64"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal128"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal256"),",",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/date"},"Date"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/date32"},"Date32"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/datetime64"},"DateTime64"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/string"},"String"),", ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/array"},"Array"),".",(0,i.kt)("br",null),"ClickHouse tries to cast value from dictionary to the specified data type. For example, for MySQL, the field might be ",(0,i.kt)("inlineCode",{parentName:"td"},"TEXT"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"VARCHAR"),", or ",(0,i.kt)("inlineCode",{parentName:"td"},"BLOB")," in the MySQL source table, but it can be uploaded as ",(0,i.kt)("inlineCode",{parentName:"td"},"String")," in ClickHouse.",(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/nullable"},"Nullable")," is currently supported for ",(0,i.kt)("a",{parentName:"td",href:"#flat"},"Flat"),", ",(0,i.kt)("a",{parentName:"td",href:"#hashed"},"Hashed"),", ",(0,i.kt)("a",{parentName:"td",href:"#complex_key_hashed"},"ComplexKeyHashed"),", ",(0,i.kt)("a",{parentName:"td",href:"#direct"},"Direct"),", ",(0,i.kt)("a",{parentName:"td",href:"#complex_key_direct"},"ComplexKeyDirect"),", ",(0,i.kt)("a",{parentName:"td",href:"#range_hashed"},"RangeHashed"),", Polygon, ",(0,i.kt)("a",{parentName:"td",href:"#cache"},"Cache"),", ",(0,i.kt)("a",{parentName:"td",href:"#complex_key_cache"},"ComplexKeyCache"),", ",(0,i.kt)("a",{parentName:"td",href:"#ssd_cache"},"SSDCache"),", ",(0,i.kt)("a",{parentName:"td",href:"#complex_key_ssd_cache"},"SSDComplexKeyCache")," dictionaries. In ",(0,i.kt)("a",{parentName:"td",href:"#ip_trie"},"IPTrie")," dictionaries ",(0,i.kt)("inlineCode",{parentName:"td"},"Nullable")," types are not supported."),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"null_value")),(0,i.kt)("td",{parentName:"tr",align:null},"Default value for a non-existing element.",(0,i.kt)("br",null),"In the example, it is an empty string. ",(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/syntax#null"},"NULL")," value can be used only for the ",(0,i.kt)("inlineCode",{parentName:"td"},"Nullable")," types (see the previous line with types description)."),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"expression")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/syntax#expressions"},"Expression")," that ClickHouse executes on the value.",(0,i.kt)("br",null),"The expression can be a column name in the remote SQL database. Thus, you can use it to create an alias for the remote column.",(0,i.kt)("br",null),(0,i.kt)("br",null),"Default value: no expression."),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"hierarchical-dict-attr"})," ",(0,i.kt)("inlineCode",{parentName:"td"},"hierarchical")),(0,i.kt)("td",{parentName:"tr",align:null},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", the attribute contains the value of a parent key for the current key. See ",(0,i.kt)("a",{parentName:"td",href:"#hierarchical-dictionaries"},"Hierarchical Dictionaries"),".",(0,i.kt)("br",null),(0,i.kt)("br",null),"Default value: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"injective")),(0,i.kt)("td",{parentName:"tr",align:null},"Flag that shows whether the ",(0,i.kt)("inlineCode",{parentName:"td"},"id -> attribute")," image is ",(0,i.kt)("a",{parentName:"td",href:"https://en.wikipedia.org/wiki/Injective_function"},"injective"),".",(0,i.kt)("br",null),"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", ClickHouse can automatically place after the ",(0,i.kt)("inlineCode",{parentName:"td"},"GROUP BY")," clause the requests to dictionaries with injection. Usually it significantly reduces the amount of such requests.",(0,i.kt)("br",null),(0,i.kt)("br",null),"Default value: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"is_object_id")),(0,i.kt)("td",{parentName:"tr",align:null},"Flag that shows whether the query is executed for a MongoDB document by ",(0,i.kt)("inlineCode",{parentName:"td"},"ObjectID"),".",(0,i.kt)("br",null),(0,i.kt)("br",null),"Default value: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),"."),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h2",{id:"hierarchical-dictionaries"},"Hierarchical Dictionaries"),(0,i.kt)("p",null,"ClickHouse supports hierarchical dictionaries with a ",(0,i.kt)("a",{parentName:"p",href:"#numeric-key"},"numeric key"),"."),(0,i.kt)("p",null,"Look at the following hierarchical structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"0 (Common parent)\n\u2502\n\u251c\u2500\u2500 1 (Russia)\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 2 (Moscow)\n\u2502       \u2502\n\u2502       \u2514\u2500\u2500 3 (Center)\n\u2502\n\u2514\u2500\u2500 4 (Great Britain)\n    \u2502\n    \u2514\u2500\u2500 5 (London)\n")),(0,i.kt)("p",null,"This hierarchy can be expressed as the following dictionary table."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"region_id"),(0,i.kt)("th",{parentName:"tr",align:null},"parent_region"),(0,i.kt)("th",{parentName:"tr",align:null},"region_name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"Russia")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"Moscow")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"Center")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"Great Britain")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"London")))),(0,i.kt)("p",null,"This table contains a column ",(0,i.kt)("inlineCode",{parentName:"p"},"parent_region")," that contains the key of the nearest parent for the element."),(0,i.kt)("p",null,"ClickHouse supports the hierarchical property for external dictionary attributes. This property allows you to configure the hierarchical dictionary similar to described above."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/ext-dict-functions#dictgethierarchy"},"dictGetHierarchy")," function allows you to get the parent chain of an element."),(0,i.kt)("p",null,"For our example, the structure of dictionary can be the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<dictionary>\n    <structure>\n        <id>\n            <name>region_id</name>\n        </id>\n\n        <attribute>\n            <name>parent_region</name>\n            <type>UInt64</type>\n            <null_value>0</null_value>\n            <hierarchical>true</hierarchical>\n        </attribute>\n\n        <attribute>\n            <name>region_name</name>\n            <type>String</type>\n            <null_value></null_value>\n        </attribute>\n\n    </structure>\n</dictionary>\n")),(0,i.kt)("h2",{id:"polygon-dictionaries"},"Polygon dictionaries"),(0,i.kt)("p",null,"Polygon dictionaries allow you to efficiently search for the polygon containing specified points.\nFor example: defining a city area by geographical coordinates."),(0,i.kt)("p",null,"Example of a polygon dictionary configuration:"),(0,i.kt)(s,{mdxType:"CloudDetails"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<dictionary>\n    <structure>\n        <key>\n            <attribute>\n                <name>key</name>\n                <type>Array(Array(Array(Array(Float64))))</type>\n            </attribute>\n        </key>\n\n        <attribute>\n            <name>name</name>\n            <type>String</type>\n            <null_value></null_value>\n        </attribute>\n\n        <attribute>\n            <name>value</name>\n            <type>UInt64</type>\n            <null_value>0</null_value>\n        </attribute>\n    </structure>\n\n    <layout>\n        <polygon>\n            <store_polygon_key_column>1</store_polygon_key_column>\n        </polygon>\n    </layout>\n\n    ...\n</dictionary>\n")),(0,i.kt)("p",null,"The corresponding ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/dictionary#create-dictionary-query"},"DDL-query"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DICTIONARY polygon_dict_name (\n    key Array(Array(Array(Array(Float64)))),\n    name String,\n    value UInt64\n)\nPRIMARY KEY key\nLAYOUT(POLYGON(STORE_POLYGON_KEY_COLUMN 1))\n...\n")),(0,i.kt)("p",null,"When configuring the polygon dictionary, the key must have one of two types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A simple polygon. It is an array of points."),(0,i.kt)("li",{parentName:"ul"},"MultiPolygon. It is an array of polygons. Each polygon is a two-dimensional array of points. The first element of this array is the outer boundary of the polygon, and subsequent elements specify areas to be excluded from it.")),(0,i.kt)("p",null,"Points can be specified as an array or a tuple of their coordinates. In the current implementation, only two-dimensional points are supported."),(0,i.kt)("p",null,"The user can upload their own data in all formats supported by ClickHouse."),(0,i.kt)("p",null,"There are 3 types of ",(0,i.kt)("a",{parentName:"p",href:"#storig-dictionaries-in-memory"},"in-memory storage")," available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"POLYGON_SIMPLE"),". This is a naive implementation, where a linear pass through all polygons is made for each query, and membership is checked for each one without using additional indexes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"POLYGON_INDEX_EACH"),". A separate index is built for each polygon, which allows you to quickly check whether it belongs in most cases (optimized for geographical regions).\nAlso, a grid is superimposed on the area under consideration, which significantly narrows the number of polygons under consideration.\nThe grid is created by recursively dividing the cell into 16 equal parts and is configured with two parameters.\nThe division stops when the recursion depth reaches ",(0,i.kt)("inlineCode",{parentName:"p"},"MAX_DEPTH")," or when the cell crosses no more than ",(0,i.kt)("inlineCode",{parentName:"p"},"MIN_INTERSECTIONS")," polygons.\nTo respond to the query, there is a corresponding cell, and the index for the polygons stored in it is accessed alternately.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"POLYGON_INDEX_CELL"),". This placement also creates the grid described above. The same options are available. For each sheet cell, an index is built on all pieces of polygons that fall into it, which allows you to quickly respond to a request.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"POLYGON"),". Synonym to ",(0,i.kt)("inlineCode",{parentName:"p"},"POLYGON_INDEX_CELL"),"."))),(0,i.kt)("p",null,"Dictionary queries are carried out using standard ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/ext-dict-functions"},"functions")," for working with dictionaries.\nAn important difference is that here the keys will be the points for which you want to find the polygon containing them."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"Example of working with the dictionary defined above:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE points (\n    x Float64,\n    y Float64\n)\n...\nSELECT tuple(x, y) AS key, dictGet(dict_name, 'name', key), dictGet(dict_name, 'value', key) FROM points ORDER BY x, y;\n")),(0,i.kt)("p",null,"As a result of executing the last command for each point in the 'points' table, a minimum area polygon containing this point will be found, and the requested attributes will be output."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"You can read columns from polygon dictionaries via SELECT query, just turn on the ",(0,i.kt)("inlineCode",{parentName:"p"},"store_polygon_key_column = 1")," in the dictionary configuration or corresponding DDL-query."),(0,i.kt)("p",null,"Query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE polygons_test_table\n(\n    key Array(Array(Array(Tuple(Float64, Float64)))),\n    name String\n) ENGINE = TinyLog;\n\nINSERT INTO polygons_test_table VALUES ([[[(3, 1), (0, 1), (0, -1), (3, -1)]]], 'Value');\n\nCREATE DICTIONARY polygons_test_dictionary\n(\n    key Array(Array(Array(Tuple(Float64, Float64)))),\n    name String\n)\nPRIMARY KEY key\nSOURCE(CLICKHOUSE(TABLE 'polygons_test_table'))\nLAYOUT(POLYGON(STORE_POLYGON_KEY_COLUMN 1))\nLIFETIME(0);\n\nSELECT * FROM polygons_test_dictionary;\n")),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500key\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500name\u2500\u2500\u2510\n\u2502 [[[(3,1),(0,1),(0,-1),(3,-1)]]] \u2502 Value \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("h2",{id:"regexp-tree-dictionary"},"RegExp Tree Dictionary"),(0,i.kt)("p",null,"Regexp Tree dictionary stores multiple trees of regular expressions with attributions. Users can retrieve strings in the dictionary. If a string matches the root of the regexp tree, we will collect the corresponding attributes of the matched root and continue to walk the children. If any of the children matches the string, we will collect attributes and rewrite the old ones if conflicts occur, then continue the traverse until we reach leaf nodes."),(0,i.kt)("p",null,"Example of the ddl query for creating Regexp Tree dictionary:"),(0,i.kt)(s,{mdxType:"CloudDetails"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"create dictionary regexp_dict\n(\n    regexp String,\n    name String,\n    version String\n)\nPRIMARY KEY(regexp)\nSOURCE(YAMLRegExpTree(PATH '/var/lib/clickhouse/user_files/regexp_tree.yaml'))\nLAYOUT(regexp_tree)\n...\n")),(0,i.kt)("p",null,"We only allow ",(0,i.kt)("inlineCode",{parentName:"p"},"YAMLRegExpTree")," to work with regexp_tree dicitionary layout. If you want to use other sources, please set variable ",(0,i.kt)("inlineCode",{parentName:"p"},"regexp_dict_allow_other_sources")," true."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Source")),(0,i.kt)("p",null,"We introduce a type of source called ",(0,i.kt)("inlineCode",{parentName:"p"},"YAMLRegExpTree")," representing the structure of Regexp Tree dictionary. An Example of a valid yaml config is like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"- regexp: 'Linux/(\\d+[\\.\\d]*).+tlinux'\n  name: 'TencentOS'\n  version: '\\1'\n\n- regexp: '\\d+/tclwebkit(?:\\d+[\\.\\d]*)'\n  name: 'Andriod'\n  versions:\n    - regexp: '33/tclwebkit'\n      version: '13'\n    - regexp: '3[12]/tclwebkit'\n      version: '12'\n    - regexp: '30/tclwebkit'\n      version: '11'\n    - regexp: '29/tclwebkit'\n      version: '10'\n")),(0,i.kt)("p",null,"The key ",(0,i.kt)("inlineCode",{parentName:"p"},"regexp")," represents the regular expression of a tree node. The name of key is same as the dictionary key. The ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"version")," is user-defined attributions in the dicitionary. The ",(0,i.kt)("inlineCode",{parentName:"p"},"versions")," (which can be any name that not appear in attributions or the key) indicates the children nodes of this tree."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Back Reference")),(0,i.kt)("p",null,"The value of an attribution could contain a back reference which refers to a capture group of the matched regular expression. Reference number ranges from 1 to 9 and writes as ",(0,i.kt)("inlineCode",{parentName:"p"},"$1")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"\\1"),"."),(0,i.kt)("p",null,"During the query execution, the back reference in the value will be replaced by the matched capture group."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Query")),(0,i.kt)("p",null,"Due to the specialty of Regexp Tree dictionary, we only allow functions ",(0,i.kt)("inlineCode",{parentName:"p"},"dictGet"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"dictGetOrDefault")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"dictGetOrNull")," work with it."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT dictGet('regexp_dict', ('name', 'version'), '31/tclwebkit1024');\n")),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u250c\u2500dictGet('regexp_dict', ('name', 'version'), '31/tclwebkit1024')\u2500\u2510\n\u2502 ('Andriod','12')                                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("h2",{id:"embedded-dictionaries"},"Embedded Dictionaries"),(0,i.kt)(r.ZP,{mdxType:"SelfManaged"}),(0,i.kt)("p",null,"ClickHouse contains a built-in feature for working with a geobase."),(0,i.kt)("p",null,"This allows you to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use a region\u2019s ID to get its name in the desired language."),(0,i.kt)("li",{parentName:"ul"},"Use a region\u2019s ID to get the ID of a city, area, federal district, country, or continent."),(0,i.kt)("li",{parentName:"ul"},"Check whether a region is part of another region."),(0,i.kt)("li",{parentName:"ul"},"Get a chain of parent regions.")),(0,i.kt)("p",null,"All the functions support \u201ctranslocality,\u201d the ability to simultaneously use different perspectives on region ownership. For more information, see the section \u201cFunctions for working with web analytics dictionaries\u201d."),(0,i.kt)("p",null,"The internal dictionaries are disabled in the default package.\nTo enable them, uncomment the parameters ",(0,i.kt)("inlineCode",{parentName:"p"},"path_to_regions_hierarchy_file")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"path_to_regions_names_files")," in the server configuration file."),(0,i.kt)("p",null,"The geobase is loaded from text files."),(0,i.kt)("p",null,"Place the ",(0,i.kt)("inlineCode",{parentName:"p"},"regions_hierarchy*.txt")," files into the ",(0,i.kt)("inlineCode",{parentName:"p"},"path_to_regions_hierarchy_file")," directory. This configuration parameter must contain the path to the ",(0,i.kt)("inlineCode",{parentName:"p"},"regions_hierarchy.txt")," file (the default regional hierarchy), and the other files (",(0,i.kt)("inlineCode",{parentName:"p"},"regions_hierarchy_ua.txt"),") must be located in the same directory."),(0,i.kt)("p",null,"Put the ",(0,i.kt)("inlineCode",{parentName:"p"},"regions_names_*.txt")," files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"path_to_regions_names_files")," directory."),(0,i.kt)("p",null,"You can also create these files yourself. The file format is as follows:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"regions_hierarchy*.txt"),": TabSeparated (no header), columns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"region ID (",(0,i.kt)("inlineCode",{parentName:"li"},"UInt32"),")"),(0,i.kt)("li",{parentName:"ul"},"parent region ID (",(0,i.kt)("inlineCode",{parentName:"li"},"UInt32"),")"),(0,i.kt)("li",{parentName:"ul"},"region type (",(0,i.kt)("inlineCode",{parentName:"li"},"UInt8"),"): 1 - continent, 3 - country, 4 - federal district, 5 - region, 6 - city; other types do not have values"),(0,i.kt)("li",{parentName:"ul"},"population (",(0,i.kt)("inlineCode",{parentName:"li"},"UInt32"),") \u2014 optional column")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"regions_names_*.txt"),": TabSeparated (no header), columns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"region ID (",(0,i.kt)("inlineCode",{parentName:"li"},"UInt32"),")"),(0,i.kt)("li",{parentName:"ul"},"region name (",(0,i.kt)("inlineCode",{parentName:"li"},"String"),") \u2014 Can\u2019t contain tabs or line feeds, even escaped ones.")),(0,i.kt)("p",null,"A flat array is used for storing in RAM. For this reason, IDs shouldn\u2019t be more than a million."),(0,i.kt)("p",null,"Dictionaries can be updated without restarting the server. However, the set of available dictionaries is not updated.\nFor updates, the file modification times are checked. If a file has changed, the dictionary is updated.\nThe interval to check for changes is configured in the ",(0,i.kt)("inlineCode",{parentName:"p"},"builtin_dictionaries_reload_interval")," parameter.\nDictionary updates (other than loading at first use) do not block queries. During updates, queries use the old versions of dictionaries. If an error occurs during an update, the error is written to the server log, and queries continue using the old version of dictionaries."),(0,i.kt)("p",null,"We recommend periodically updating the dictionaries with the geobase. During an update, generate new files and write them to a separate location. When everything is ready, rename them to the files used by the server."),(0,i.kt)("p",null,"There are also functions for working with OS identifiers and search engines, but they shouldn\u2019t be used."),(0,i.kt)("h2",{id:"embedded-dictionaries"},"Embedded Dictionaries"),(0,i.kt)(r.ZP,{mdxType:"SelfManaged"}),(0,i.kt)("p",null,"ClickHouse contains a built-in feature for working with a geobase."),(0,i.kt)("p",null,"This allows you to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use a region\u2019s ID to get its name in the desired language."),(0,i.kt)("li",{parentName:"ul"},"Use a region\u2019s ID to get the ID of a city, area, federal district, country, or continent."),(0,i.kt)("li",{parentName:"ul"},"Check whether a region is part of another region."),(0,i.kt)("li",{parentName:"ul"},"Get a chain of parent regions.")),(0,i.kt)("p",null,"All the functions support \u201ctranslocality,\u201d the ability to simultaneously use different perspectives on region ownership. For more information, see the section \u201cFunctions for working with web analytics dictionaries\u201d."),(0,i.kt)("p",null,"The internal dictionaries are disabled in the default package.\nTo enable them, uncomment the parameters ",(0,i.kt)("inlineCode",{parentName:"p"},"path_to_regions_hierarchy_file")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"path_to_regions_names_files")," in the server configuration file."),(0,i.kt)("p",null,"The geobase is loaded from text files."),(0,i.kt)("p",null,"Place the ",(0,i.kt)("inlineCode",{parentName:"p"},"regions_hierarchy*.txt")," files into the ",(0,i.kt)("inlineCode",{parentName:"p"},"path_to_regions_hierarchy_file")," directory. This configuration parameter must contain the path to the ",(0,i.kt)("inlineCode",{parentName:"p"},"regions_hierarchy.txt")," file (the default regional hierarchy), and the other files (",(0,i.kt)("inlineCode",{parentName:"p"},"regions_hierarchy_ua.txt"),") must be located in the same directory."),(0,i.kt)("p",null,"Put the ",(0,i.kt)("inlineCode",{parentName:"p"},"regions_names_*.txt")," files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"path_to_regions_names_files")," directory."),(0,i.kt)("p",null,"You can also create these files yourself. The file format is as follows:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"regions_hierarchy*.txt"),": TabSeparated (no header), columns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"region ID (",(0,i.kt)("inlineCode",{parentName:"li"},"UInt32"),")"),(0,i.kt)("li",{parentName:"ul"},"parent region ID (",(0,i.kt)("inlineCode",{parentName:"li"},"UInt32"),")"),(0,i.kt)("li",{parentName:"ul"},"region type (",(0,i.kt)("inlineCode",{parentName:"li"},"UInt8"),"): 1 - continent, 3 - country, 4 - federal district, 5 - region, 6 - city; other types do not have values"),(0,i.kt)("li",{parentName:"ul"},"population (",(0,i.kt)("inlineCode",{parentName:"li"},"UInt32"),") \u2014 optional column")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"regions_names_*.txt"),": TabSeparated (no header), columns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"region ID (",(0,i.kt)("inlineCode",{parentName:"li"},"UInt32"),")"),(0,i.kt)("li",{parentName:"ul"},"region name (",(0,i.kt)("inlineCode",{parentName:"li"},"String"),") \u2014 Can\u2019t contain tabs or line feeds, even escaped ones.")),(0,i.kt)("p",null,"A flat array is used for storing in RAM. For this reason, IDs shouldn\u2019t be more than a million."),(0,i.kt)("p",null,"Dictionaries can be updated without restarting the server. However, the set of available dictionaries is not updated.\nFor updates, the file modification times are checked. If a file has changed, the dictionary is updated.\nThe interval to check for changes is configured in the ",(0,i.kt)("inlineCode",{parentName:"p"},"builtin_dictionaries_reload_interval")," parameter.\nDictionary updates (other than loading at first use) do not block queries. During updates, queries use the old versions of dictionaries. If an error occurs during an update, the error is written to the server log, and queries continue using the old version of dictionaries."),(0,i.kt)("p",null,"We recommend periodically updating the dictionaries with the geobase. During an update, generate new files and write them to a separate location. When everything is ready, rename them to the files used by the server."),(0,i.kt)("p",null,"There are also functions for working with OS identifiers and search engines, but they shouldn\u2019t be used."))}f.isMDXComponent=!0}}]);
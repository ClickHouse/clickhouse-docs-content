"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[96660],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6815:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=["components"],i={slug:"/en/sql-reference/statements/delete",sidebar_position:36,sidebar_label:"DELETE"},s="DELETE Statement",c={unversionedId:"en/sql-reference/statements/delete",id:"en/sql-reference/statements/delete",title:"DELETE Statement",description:"DELETE FROM removes rows from table [db.]table that match expression expr. The deleted rows are marked as deleted immediately and will be automatically filtered out of all subsequent queries. Cleanup of data happens asynchronously in background. This feature is only available for MergeTree table engine family.",source:"@site/docs/en/sql-reference/statements/delete.md",sourceDirName:"en/sql-reference/statements",slug:"/en/sql-reference/statements/delete",permalink:"/docs/en/sql-reference/statements/delete",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/statements/delete.md",tags:[],version:"current",sidebarPosition:36,frontMatter:{slug:"/en/sql-reference/statements/delete",sidebar_position:36,sidebar_label:"DELETE"},sidebar:"english",previous:{title:"COMMENT",permalink:"/docs/en/sql-reference/statements/alter/comment"},next:{title:"SYSTEM",permalink:"/docs/en/sql-reference/statements/system"}},p={},u=[],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"delete-statement"},"DELETE Statement"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"DELETE FROM [db.]table [WHERE expr]\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"DELETE FROM")," removes rows from table ",(0,o.kt)("inlineCode",{parentName:"p"},"[db.]table")," that match expression ",(0,o.kt)("inlineCode",{parentName:"p"},"expr"),". The deleted rows are marked as deleted immediately and will be automatically filtered out of all subsequent queries. Cleanup of data happens asynchronously in background. This feature is only available for MergeTree table engine family."),(0,o.kt)("p",null,"For example, the following query deletes all rows from the ",(0,o.kt)("inlineCode",{parentName:"p"},"hits")," table where the ",(0,o.kt)("inlineCode",{parentName:"p"},"Title")," column contains the text ",(0,o.kt)("inlineCode",{parentName:"p"},"hello"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"DELETE FROM hits WHERE Title LIKE '%hello%';\n")),(0,o.kt)("p",null,"Lightweight deletes are asynchronous by default. Set ",(0,o.kt)("inlineCode",{parentName:"p"},"mutations_sync")," equal to 1 to wait for one replica to process the statement, and set ",(0,o.kt)("inlineCode",{parentName:"p"},"mutations_sync")," to 2 to wait for all replicas."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This feature is experimental and requires you to set ",(0,o.kt)("inlineCode",{parentName:"p"},"allow_experimental_lightweight_delete")," to true:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SET allow_experimental_lightweight_delete = true;\n")))),(0,o.kt)("p",null,"An ",(0,o.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/alter/delete"},"alternative way to delete rows")," in ClickHouse is ",(0,o.kt)("inlineCode",{parentName:"p"},"ALTER TABLE ... DELETE"),", which might be more efficient if you do bulk deletes only occasionally and don't need the operation to be applied instantly. In most use cases the new lightweight ",(0,o.kt)("inlineCode",{parentName:"p"},"DELETE FROM")," behavior will be considerably faster."),(0,o.kt)("p",null,":::warn\nEven though deletes are becoming more lightweight in ClickHouse, they should still not be used as aggressively as on OLTP system. Ligthweight deletes are currently efficient for wide parts, but for compact parts they can be a heavyweight operation, and it may be better to use ",(0,o.kt)("inlineCode",{parentName:"p"},"ALTER TABLE")," for some scenarios.\n:::"))}m.isMDXComponent=!0}}]);
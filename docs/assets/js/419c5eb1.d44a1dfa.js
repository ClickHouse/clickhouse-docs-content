"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[31922],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},12972:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],s={slug:"/en/operations/settings/constraints-on-settings",sidebar_position:62,sidebar_label:"Constraints on Settings"},l="Constraints on Settings",p={unversionedId:"en/operations/settings/constraints-on-settings",id:"en/operations/settings/constraints-on-settings",title:"Constraints on Settings",description:"The constraints on settings can be defined in the profiles section of the user.xml configuration file and prohibit users from changing some of the settings with the SET query.",source:"@site/docs/en/operations/settings/constraints-on-settings.md",sourceDirName:"en/operations/settings",slug:"/en/operations/settings/constraints-on-settings",permalink:"/docs/en/operations/settings/constraints-on-settings",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/operations/settings/constraints-on-settings.md",tags:[],version:"current",sidebarPosition:62,frontMatter:{slug:"/en/operations/settings/constraints-on-settings",sidebar_position:62,sidebar_label:"Constraints on Settings"},sidebar:"english",previous:{title:"Settings Profiles",permalink:"/docs/en/operations/settings/settings-profiles"},next:{title:"User Settings",permalink:"/docs/en/operations/settings/settings-users"}},c={},d=[],u={toc:d};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"constraints-on-settings"},"Constraints on Settings"),(0,i.kt)("p",null,"The constraints on settings can be defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"profiles")," section of the ",(0,i.kt)("inlineCode",{parentName:"p"},"user.xml")," configuration file and prohibit users from changing some of the settings with the ",(0,i.kt)("inlineCode",{parentName:"p"},"SET")," query.\nThe constraints are defined as the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<profiles>\n  <user_name>\n    <constraints>\n      <setting_name_1>\n        <min>lower_boundary</min>\n      </setting_name_1>\n      <setting_name_2>\n        <max>upper_boundary</max>\n      </setting_name_2>\n      <setting_name_3>\n        <min>lower_boundary</min>\n        <max>upper_boundary</max>\n      </setting_name_3>\n      <setting_name_4>\n        <readonly/>\n      </setting_name_4>\n      <setting_name_5>\n        <min>lower_boundary</min>\n        <max>upper_boundary</max>\n        <changeable_in_readonly/>\n      </setting_name_5>\n    </constraints>\n  </user_name>\n</profiles>\n")),(0,i.kt)("p",null,"If the user tries to violate the constraints an exception is thrown and the setting isn\u2019t changed.\nThere are supported few types of constraints: ",(0,i.kt)("inlineCode",{parentName:"p"},"min"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"max"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly")," (with alias ",(0,i.kt)("inlineCode",{parentName:"p"},"const"),") and ",(0,i.kt)("inlineCode",{parentName:"p"},"changeable_in_readonly"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"min")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"max")," constraints specify upper and lower boundaries for a numeric setting and can be used in combination. The ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," constraint specifies that the user cannot change the corresponding setting at all. The ",(0,i.kt)("inlineCode",{parentName:"p"},"changeable_in_readonly")," constraint type allows user to change the setting within ",(0,i.kt)("inlineCode",{parentName:"p"},"min"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"max")," range even if ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly")," setting is set to 1, otherwise settings are not allow to be changed in ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly=1")," mode. Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"changeable_in_readonly")," is supported only if ",(0,i.kt)("inlineCode",{parentName:"p"},"settings_constraints_replace_previous")," is enabled:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<access_control_improvements>\n  <settings_constraints_replace_previous>true<settings_constraints_replace_previous>\n</access_control_improvements>\n")),(0,i.kt)("p",null,"If there are multiple profiles active for a user, then constraints are merged. Merge process depends on ",(0,i.kt)("inlineCode",{parentName:"p"},"settings_constraints_replace_previous"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"true")," (recommended): constraints for the same setting are replaced during merge, such that the last constraint is used and all previous are ignored including fields that are not set in new constraint."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"false")," (default): constraints for the same setting are merged in a way that every not set type of constraint is taken from previous profile and every set type of constraint is replaced by value from new profile.")),(0,i.kt)("p",null,"Read-only mode is enabled by ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly")," setting (not to confuse with ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly")," constraint type):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"readonly=0"),": No read-only restrictions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"readonly=1"),": Only read queries are allowed and settings cannot be changes unless ",(0,i.kt)("inlineCode",{parentName:"li"},"changeable_in_readonly")," is set."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"readonly=2"),": Only read queries are allowed, but settings can be changed, except for ",(0,i.kt)("inlineCode",{parentName:"li"},"readonly")," setting itself.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," Let ",(0,i.kt)("inlineCode",{parentName:"p"},"users.xml")," includes lines:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<profiles>\n  <default>\n    <max_memory_usage>10000000000</max_memory_usage>\n    <force_index_by_date>0</force_index_by_date>\n    ...\n    <constraints>\n      <max_memory_usage>\n        <min>5000000000</min>\n        <max>20000000000</max>\n      </max_memory_usage>\n      <force_index_by_date>\n        <readonly/>\n      </force_index_by_date>\n    </constraints>\n  </default>\n</profiles>\n")),(0,i.kt)("p",null,"The following queries all throw exceptions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SET max_memory_usage=20000000001;\nSET max_memory_usage=4999999999;\nSET force_index_by_date=1;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Code: 452, e.displayText() = DB::Exception: Setting max_memory_usage should not be greater than 20000000000.\nCode: 452, e.displayText() = DB::Exception: Setting max_memory_usage should not be less than 5000000000.\nCode: 452, e.displayText() = DB::Exception: Setting force_index_by_date should not be changed.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," profile has special handling: all the constraints defined for the ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," profile become the default constraints, so they restrict all the users until they\u2019re overridden explicitly for these users."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/operations/settings/constraints_on_settings/"},"Original article")," "))}m.isMDXComponent=!0}}]);
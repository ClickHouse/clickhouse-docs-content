"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[87536],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},11651:function(e,t,n){n.d(t,{ZP:function(){return l}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),i=["components"],p={toc:[]};function l(e){var t=e.components,l=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"SQL console")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you need a SQL client connection, your ClickHouse Cloud service has an associated web based SQL console; expand ",(0,r.kt)("strong",{parentName:"p"},"Connect to SQL Console")," below for details."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Connect to SQL console"),(0,r.kt)("p",null,"From your ClickHouse Cloud services list, choose the service that you will work with and click ",(0,r.kt)("strong",{parentName:"p"},"Connect"),".  From here you can ",(0,r.kt)("strong",{parentName:"p"},"Connect to SQL console"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Connect to SQL Console",src:n(85294).Z,width:"657",height:"508"}))))}l.isMDXComponent=!0},28919:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),i=n(11651),p=["components"],l={slug:"/en/tutorial",sidebar_label:"ClickHouse Tutorial",sidebar_position:.5,keywords:["clickhouse","install","tutorial"]},s="ClickHouse Tutorial",c={unversionedId:"en/tutorial",id:"en/tutorial",title:"ClickHouse Tutorial",description:"What to Expect from This Tutorial?",source:"@site/docs/en/tutorial.md",sourceDirName:"en",slug:"/en/tutorial",permalink:"/docs/en/tutorial",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/tutorial.md",tags:[],version:"current",sidebarPosition:.5,frontMatter:{slug:"/en/tutorial",sidebar_label:"ClickHouse Tutorial",sidebar_position:.5,keywords:["clickhouse","install","tutorial"]},sidebar:"english",previous:{title:"Overview",permalink:"/docs/en/getting-started/example-datasets/"},next:{title:"UK Property Price Paid",permalink:"/docs/en/getting-started/example-datasets/uk-price-paid"}},d={},u=[{value:"What to Expect from This Tutorial?",id:"what-to-expect-from-this-tutorial",level:2},{value:"1. Create a New Table",id:"1-create-a-new-table",level:2},{value:"2. Insert the Dataset",id:"2-insert-the-dataset",level:2},{value:"3. Analyze the Data",id:"3-analyze-the-data",level:2},{value:"Congrats!",id:"congrats",level:4}],m={toc:u};function k(e){var t=e.components,n=(0,o.Z)(e,p);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"clickhouse-tutorial"},"ClickHouse Tutorial"),(0,r.kt)("h2",{id:"what-to-expect-from-this-tutorial"},"What to Expect from This Tutorial?"),(0,r.kt)("p",null,"In this tutorial, you will create a table and insert a large dataset (two million rows of the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/getting-started/example-datasets/nyc-taxi"},"New York taxi data"),"). Then you will run queries on the dataset."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This tutorial assumes you have access to a running ClickHouse service.  If not, check out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/quick-start"},"Quick Start"),"."))),(0,r.kt)("h2",{id:"1-create-a-new-table"},"1. Create a New Table"),(0,r.kt)("p",null,"The New York City taxi data contains the details of millions of taxi rides, with columns like pickup and drop-off times and locations, cost, tip amount, tolls, payment type and so on. Let's create a table to store this data..."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Connect to the SQL console"),(0,r.kt)(i.ZP,{mdxType:"SQLConsoleDetail"}),(0,r.kt)("p",{parentName:"li"},"If you are using self-managed ClickHouse you can connect to to the SQL console at https://",(0,r.kt)("em",{parentName:"p"},"hostname"),":8443/play (check with your ClickHouse administrator for the details).")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create the following ",(0,r.kt)("inlineCode",{parentName:"p"},"trips")," table in the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," database:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE trips\n(\n    `trip_id` UInt32,\n    `vendor_id` Enum8('1' = 1, '2' = 2, '3' = 3, '4' = 4, 'CMT' = 5, 'VTS' = 6, 'DDS' = 7, 'B02512' = 10, 'B02598' = 11, 'B02617' = 12, 'B02682' = 13, 'B02764' = 14, '' = 15),\n    `pickup_date` Date,\n    `pickup_datetime` DateTime,\n    `dropoff_date` Date,\n    `dropoff_datetime` DateTime,\n    `store_and_fwd_flag` UInt8,\n    `rate_code_id` UInt8,\n    `pickup_longitude` Float64,\n    `pickup_latitude` Float64,\n    `dropoff_longitude` Float64,\n    `dropoff_latitude` Float64,\n    `passenger_count` UInt8,\n    `trip_distance` Float64,\n    `fare_amount` Float32,\n    `extra` Float32,\n    `mta_tax` Float32,\n    `tip_amount` Float32,\n    `tolls_amount` Float32,\n    `ehail_fee` Float32,\n    `improvement_surcharge` Float32,\n    `total_amount` Float32,\n    `payment_type` Enum8('UNK' = 0, 'CSH' = 1, 'CRE' = 2, 'NOC' = 3, 'DIS' = 4),\n    `trip_type` UInt8,\n    `pickup` FixedString(25),\n    `dropoff` FixedString(25),\n    `cab_type` Enum8('yellow' = 1, 'green' = 2, 'uber' = 3),\n    `pickup_nyct2010_gid` Int8,\n    `pickup_ctlabel` Float32,\n    `pickup_borocode` Int8,\n    `pickup_ct2010` String,\n    `pickup_boroct2010` String,\n    `pickup_cdeligibil` String,\n    `pickup_ntacode` FixedString(4),\n    `pickup_ntaname` String,\n    `pickup_puma` UInt16,\n    `dropoff_nyct2010_gid` UInt8,\n    `dropoff_ctlabel` Float32,\n    `dropoff_borocode` UInt8,\n    `dropoff_ct2010` String,\n    `dropoff_boroct2010` String,\n    `dropoff_cdeligibil` String,\n    `dropoff_ntacode` FixedString(4),\n    `dropoff_ntaname` String,\n    `dropoff_puma` UInt16\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMM(pickup_date)\nORDER BY pickup_datetime;\n")))),(0,r.kt)("h2",{id:"2-insert-the-dataset"},"2. Insert the Dataset"),(0,r.kt)("p",null,"Now that you have a table created, let's add the NYC taxi data. It is in CSV files in S3, and you can load the data from there."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The following command inserts ~2,000,000 rows into your ",(0,r.kt)("inlineCode",{parentName:"p"},"trips")," table from two different files in S3: ",(0,r.kt)("inlineCode",{parentName:"p"},"trips_1.tsv.gz")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"trips_2.tsv.gz"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO trips\nSELECT * FROM s3(\n    'https://datasets-documentation.s3.eu-west-3.amazonaws.com/nyc-taxi/trips_{1..2}.gz',\n    'TabSeparatedWithNames', \"\n    `trip_id` UInt32,\n    `vendor_id` Enum8('1' = 1, '2' = 2, '3' = 3, '4' = 4, 'CMT' = 5, 'VTS' = 6, 'DDS' = 7, 'B02512' = 10, 'B02598' = 11, 'B02617' = 12, 'B02682' = 13, 'B02764' = 14, '' = 15),\n    `pickup_date` Date,\n    `pickup_datetime` DateTime,\n    `dropoff_date` Date,\n    `dropoff_datetime` DateTime,\n    `store_and_fwd_flag` UInt8,\n    `rate_code_id` UInt8,\n    `pickup_longitude` Float64,\n    `pickup_latitude` Float64,\n    `dropoff_longitude` Float64,\n    `dropoff_latitude` Float64,\n    `passenger_count` UInt8,\n    `trip_distance` Float64,\n    `fare_amount` Float32,\n    `extra` Float32,\n    `mta_tax` Float32,\n    `tip_amount` Float32,\n    `tolls_amount` Float32,\n    `ehail_fee` Float32,\n    `improvement_surcharge` Float32,\n    `total_amount` Float32,\n    `payment_type` Enum8('UNK' = 0, 'CSH' = 1, 'CRE' = 2, 'NOC' = 3, 'DIS' = 4),\n    `trip_type` UInt8,\n    `pickup` FixedString(25),\n    `dropoff` FixedString(25),\n    `cab_type` Enum8('yellow' = 1, 'green' = 2, 'uber' = 3),\n    `pickup_nyct2010_gid` Int8,\n    `pickup_ctlabel` Float32,\n    `pickup_borocode` Int8,\n    `pickup_ct2010` String,\n    `pickup_boroct2010` String,\n    `pickup_cdeligibil` String,\n    `pickup_ntacode` FixedString(4),\n    `pickup_ntaname` String,\n    `pickup_puma` UInt16,\n    `dropoff_nyct2010_gid` UInt8,\n    `dropoff_ctlabel` Float32,\n    `dropoff_borocode` UInt8,\n    `dropoff_ct2010` String,\n    `dropoff_boroct2010` String,\n    `dropoff_cdeligibil` String,\n    `dropoff_ntacode` FixedString(4),\n    `dropoff_ntaname` String,\n    `dropoff_puma` UInt16\n\") SETTINGS input_format_try_infer_datetimes = 0\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Wait for the ",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT")," to finish - it might take a moment for the 150MB of data to be downloaded."),(0,r.kt)("div",{parentName:"li",className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"s3")," function cleverly knows how to decompress the data, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"TabSeparatedWithNames")," format tells ClickHouse that the data is tab-separated and also to skip the header row of each file.")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"When the insert is finished, verify it worked:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count() FROM trips\n")),(0,r.kt)("p",{parentName:"li"},"You should see about 2M rows (1,999,657 rows, to be precise)."),(0,r.kt)("div",{parentName:"li",className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Notice how quickly and how few rows ClickHouse had to process to determine the count? You can get back the count in 0.001 seconds with only 6 rows processed. (6 just happens to be the number of ",(0,r.kt)("strong",{parentName:"p"},"parts")," that the ",(0,r.kt)("inlineCode",{parentName:"p"},"trips")," table currently has, and parts know how many rows they have.)")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If you run a query that needs to hit every row, you will notice considerably more rows need to be processed, but the run time is still blazing fast:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT(pickup_ntaname) FROM trips\n")),(0,r.kt)("p",{parentName:"li"},"This query has to process 2M rows and return 190 values, but notice it does this in about 1 second. The ",(0,r.kt)("inlineCode",{parentName:"p"},"pickup_ntaname")," column represents the name of the neighborhood in New York City where the taxi ride originated."))),(0,r.kt)("h2",{id:"3-analyze-the-data"},"3. Analyze the Data"),(0,r.kt)("p",null,"Let's run some queries to analyze the 2M rows of data..."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"We will start with some simple calculations, like computing the average tip amount (which is right on $1)"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT round(avg(tip_amount), 2) FROM trips\n")),(0,r.kt)("p",{parentName:"li"},"The response is:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500round(avg(tip_amount), 2)\u2500\u2510\n\u2502                      1.68 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"This query computes the average cost based on the number of passengers:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    passenger_count,\n    ceil(avg(total_amount),2) AS average_total_amount\nFROM trips\nGROUP BY passenger_count\n")),(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"passenger_count")," ranges from 0 to 9:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500passenger_count\u2500\u252c\u2500average_total_amount\u2500\u2510\n\u2502               0 \u2502                22.69 \u2502\n\u2502               1 \u2502                15.97 \u2502\n\u2502               2 \u2502                17.15 \u2502\n\u2502               3 \u2502                16.76 \u2502\n\u2502               4 \u2502                17.33 \u2502\n\u2502               5 \u2502                16.35 \u2502\n\u2502               6 \u2502                16.04 \u2502\n\u2502               7 \u2502                 59.8 \u2502\n\u2502               8 \u2502                36.41 \u2502\n\u2502               9 \u2502                 9.81 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Here is a query that calculates the daily number of pickups per neighborhood:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    pickup_date,\n    pickup_ntaname,\n    SUM(1) AS number_of_trips\nFROM trips\nGROUP BY pickup_date, pickup_ntaname\nORDER BY pickup_date ASC\n")),(0,r.kt)("p",{parentName:"li"},"The result looks like:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500pickup_date\u2500\u252c\u2500pickup_ntaname\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500number_of_trips\u2500\u2510\n\u2502  2015-07-01 \u2502 Brooklyn Heights-Cobble Hill                             \u2502              13 \u2502\n\u2502  2015-07-01 \u2502 Old Astoria                                              \u2502               5 \u2502\n\u2502  2015-07-01 \u2502 Flushing                                                 \u2502               1 \u2502\n\u2502  2015-07-01 \u2502 Yorkville                                                \u2502             378 \u2502\n\u2502  2015-07-01 \u2502 Gramercy                                                 \u2502             344 \u2502\n\u2502  2015-07-01 \u2502 Fordham South                                            \u2502               2 \u2502\n\u2502  2015-07-01 \u2502 SoHo-TriBeCa-Civic Center-Little Italy                   \u2502             621 \u2502\n\u2502  2015-07-01 \u2502 Park Slope-Gowanus                                       \u2502              29 \u2502\n\u2502  2015-07-01 \u2502 Bushwick South                                           \u2502               5 \u2502\n")))),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"This query computes the length of the trip and groups the results by that value:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    avg(tip_amount) AS avg_tip,\n    avg(fare_amount) AS avg_fare,\n    avg(passenger_count) AS avg_passenger,\n    count() AS count,\n    truncate(date_diff('second', pickup_datetime, dropoff_datetime)/3600) as trip_minutes\nFROM trips\nWHERE trip_minutes > 0\nGROUP BY trip_minutes\nORDER BY trip_minutes DESC\n")),(0,r.kt)("p",{parentName:"li"},"The result looks like:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500avg_tip\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500avg_fare\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500avg_passenger\u2500\u252c\u2500count\u2500\u252c\u2500trip_minutes\u2500\u2510\n\u2502 0.9800000190734863 \u2502                 10 \u2502                1.5 \u2502     2 \u2502          458 \u2502\n\u2502   1.18236789075801 \u2502 14.493377928590297 \u2502  2.060200668896321 \u2502  1495 \u2502           23 \u2502\n\u2502 2.1159574744549206 \u2502  23.22872340425532 \u2502 2.4680851063829787 \u2502    47 \u2502           22 \u2502\n\u2502 1.1218181631781838 \u2502 13.681818181818182 \u2502 1.9090909090909092 \u2502    11 \u2502           21 \u2502\n\u2502 0.3218181837688793 \u2502 18.045454545454547 \u2502 2.3636363636363638 \u2502    11 \u2502           20 \u2502\n\u2502 2.1490000009536745 \u2502              17.55 \u2502                1.5 \u2502    10 \u2502           19 \u2502\n\u2502  4.537058907396653 \u2502                 37 \u2502 1.7647058823529411 \u2502    17 \u2502           18 \u2502\n")))),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"This query shows the number of pickups in each neighborhood, broken down by hour of the day:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    pickup_ntaname,\n    toHour(pickup_datetime) as pickup_hour,\n    SUM(1) AS pickups\nFROM trips\nWHERE pickup_ntaname != ''\nGROUP BY pickup_ntaname, pickup_hour\nORDER BY pickup_ntaname, pickup_hour\n")),(0,r.kt)("p",{parentName:"li"},"The result looks like:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500pickup_ntaname\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500pickup_hour\u2500\u252c\u2500pickups\u2500\u2510\n\u2502 Airport                                                  \u2502           0 \u2502    3509 \u2502\n\u2502 Airport                                                  \u2502           1 \u2502    1184 \u2502\n\u2502 Airport                                                  \u2502           2 \u2502     401 \u2502\n\u2502 Airport                                                  \u2502           3 \u2502     152 \u2502\n\u2502 Airport                                                  \u2502           4 \u2502     213 \u2502\n\u2502 Airport                                                  \u2502           5 \u2502     955 \u2502\n\u2502 Airport                                                  \u2502           6 \u2502    2161 \u2502\n\u2502 Airport                                                  \u2502           7 \u2502    3013 \u2502\n\u2502 Airport                                                  \u2502           8 \u2502    3601 \u2502\n\u2502 Airport                                                  \u2502           9 \u2502    3792 \u2502\n\u2502 Airport                                                  \u2502          10 \u2502    4546 \u2502\n\u2502 Airport                                                  \u2502          11 \u2502    4659 \u2502\n\u2502 Airport                                                  \u2502          12 \u2502    4621 \u2502\n\u2502 Airport                                                  \u2502          13 \u2502    5348 \u2502\n\u2502 Airport                                                  \u2502          14 \u2502    5889 \u2502\n\u2502 Airport                                                  \u2502          15 \u2502    6505 \u2502\n\u2502 Airport                                                  \u2502          16 \u2502    6119 \u2502\n\u2502 Airport                                                  \u2502          17 \u2502    6341 \u2502\n\u2502 Airport                                                  \u2502          18 \u2502    6173 \u2502\n\u2502 Airport                                                  \u2502          19 \u2502    6329 \u2502\n\u2502 Airport                                                  \u2502          20 \u2502    6271 \u2502\n\u2502 Airport                                                  \u2502          21 \u2502    6649 \u2502\n\u2502 Airport                                                  \u2502          22 \u2502    6356 \u2502\n\u2502 Airport                                                  \u2502          23 \u2502    6016 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502           4 \u2502       1 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502           6 \u2502       1 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502           7 \u2502       1 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502           9 \u2502       5 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502          10 \u2502       3 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502          15 \u2502       1 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502          20 \u2502       2 \u2502\n\u2502 Allerton-Pelham Gardens                                  \u2502          23 \u2502       1 \u2502\n\u2502 Annadale-Huguenot-Prince's Bay-Eltingville               \u2502          23 \u2502       1 \u2502\n\u2502 Arden Heights                                            \u2502          11 \u2502       1 \u2502\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's look at rides to LaGuardia or JFK airports:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    pickup_datetime,\n    dropoff_datetime,\n    total_amount,\n    pickup_nyct2010_gid,\n    dropoff_nyct2010_gid,\n    CASE\n        WHEN dropoff_nyct2010_gid = 138 THEN 'LGA'\n        WHEN dropoff_nyct2010_gid = 132 THEN 'JFK'\n    END AS airport_code,\n    EXTRACT(YEAR FROM pickup_datetime) AS year,\n    EXTRACT(DAY FROM pickup_datetime) AS day,\n    EXTRACT(HOUR FROM pickup_datetime) AS hour\nFROM trips\nWHERE dropoff_nyct2010_gid IN (132, 138)\nORDER BY pickup_datetime\n")),(0,r.kt)("p",{parentName:"li"},"The response is:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500\u2500\u2500\u2500\u2500pickup_datetime\u2500\u252c\u2500\u2500\u2500\u2500dropoff_datetime\u2500\u252c\u2500total_amount\u2500\u252c\u2500pickup_nyct2010_gid\u2500\u252c\u2500dropoff_nyct2010_gid\u2500\u252c\u2500airport_code\u2500\u252c\u2500year\u2500\u252c\u2500day\u2500\u252c\u2500hour\u2500\u2510\n\u2502 2015-07-01 00:04:14 \u2502 2015-07-01 00:15:29 \u2502         13.3 \u2502                 -34 \u2502                  132 \u2502 JFK          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:09:42 \u2502 2015-07-01 00:12:55 \u2502          6.8 \u2502                  50 \u2502                  138 \u2502 LGA          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:23:04 \u2502 2015-07-01 00:24:39 \u2502          4.8 \u2502                -125 \u2502                  132 \u2502 JFK          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:27:51 \u2502 2015-07-01 00:39:02 \u2502        14.72 \u2502                -101 \u2502                  138 \u2502 LGA          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:32:03 \u2502 2015-07-01 00:55:39 \u2502        39.34 \u2502                  48 \u2502                  138 \u2502 LGA          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:34:12 \u2502 2015-07-01 00:40:48 \u2502         9.95 \u2502                 -93 \u2502                  132 \u2502 JFK          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:38:26 \u2502 2015-07-01 00:49:00 \u2502         13.3 \u2502                 -11 \u2502                  138 \u2502 LGA          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 00:41:48 \u2502 2015-07-01 00:44:45 \u2502          6.3 \u2502                 -94 \u2502                  132 \u2502 JFK          \u2502 2015 \u2502   1 \u2502    0 \u2502\n\u2502 2015-07-01 01:06:18 \u2502 2015-07-01 01:14:43 \u2502        11.76 \u2502                  37 \u2502                  132 \u2502 JFK          \u2502 2015 \u2502   1 \u2502    1 \u2502\n")))),(0,r.kt)("h4",{id:"congrats"},"Congrats!"),(0,r.kt)("p",null,"Well done - you made it through the tutorial, and hopefully you have a better understanding of how to use ClickHouse. Here are some options for what to do next:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Read ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/guides/improving-query-performance/sparse-primary-indexes/sparse-primary-indexes-intro"},"how primary keys work in ClickHouse")," - this knowledge will move you a long ways forward along your journey to becoming a ClickHouse expert"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./integrations/"},"Integrate an external data source")," like files, Kafka, PostgreSQL, data pipelines, or lots of other data sources"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./integrations/data-visualization/"},"Connect your favorite UI/BI tool")," to ClickHouse"),(0,r.kt)("li",{parentName:"ul"},"Check out the ",(0,r.kt)("a",{parentName:"li",href:"./sql-reference/"},"SQL Reference")," and browse through the various functions. ClickHouse has an amazing collection of functions for transforming, processing and analyzing data")))}k.isMDXComponent=!0},85294:function(e,t,n){t.Z=n.p+"assets/images/cloud-connect-to-sql-console-420fb3e154a7a523950694ded988a225.png"}}]);
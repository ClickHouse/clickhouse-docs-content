"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[22761],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=l,k=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},67740:function(e,t,n){n.d(t,{ZP:function(){return s}});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),i=["components"],o={toc:[]};function s(e){var t=e.components,s=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},o,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To connect to ClickHouse with HTTP(S) you need this information:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The HOST and PORT: typically, the port is 8443 when using TLS or 8123 when not using TLS.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The DATABASE NAME: out of the box, there is a database named ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),", use the name of the database that you want to connect to.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The USERNAME and PASSWORD: out of the box, the username is ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),". Use the username appropriate for your use case."))),(0,r.kt)("p",null,"The details for your ClickHouse Cloud service are available in the ClickHouse Cloud console.  Select the service that you will connect to and click ",(0,r.kt)("strong",{parentName:"p"},"Connect"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"ClickHouse Cloud service connect button",src:n(64872).Z,width:"939",height:"474"})),(0,r.kt)("p",null,"Choose ",(0,r.kt)("strong",{parentName:"p"},"HTTPS"),", and the details are available in an example ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," command. "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"ClickHouse Cloud HTTPS connection details",src:n(33273).Z,width:"586",height:"470"})),(0,r.kt)("p",null,"If you are using self-managed ClickHouse, the connection details are set by your ClickHouse administrator."))}s.isMDXComponent=!0},40505:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),i=n(67740),o=["components"],s={sidebar_label:"Nodejs",sidebar_position:1,keywords:["clickhouse","nodejs","client","connect","integrate"],slug:"/en/integrations/language-clients/nodejs",description:"The official Node.js client for connecting to ClickHouse."},p="ClickHouse JS",u={unversionedId:"en/integrations/language-clients/nodejs",id:"en/integrations/language-clients/nodejs",title:"ClickHouse JS",description:"The official Node.js client for connecting to ClickHouse.",source:"@site/docs/en/integrations/language-clients/nodejs.md",sourceDirName:"en/integrations/language-clients",slug:"/en/integrations/language-clients/nodejs",permalink:"/docs/en/integrations/language-clients/nodejs",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/language-clients/nodejs.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Nodejs",sidebar_position:1,keywords:["clickhouse","nodejs","client","connect","integrate"],slug:"/en/integrations/language-clients/nodejs",description:"The official Node.js client for connecting to ClickHouse."},sidebar:"english",previous:{title:"Language Clients",permalink:"/docs/en/integrations/language-clients"},next:{title:"Java",permalink:"/docs/en/integrations/language-clients/java/"}},m={},c=[{value:"Environment requirements",id:"environment-requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Compatibility with ClickHouse",id:"compatibility-with-clickhouse",level:2},{value:"ClickHouse Client API",id:"clickhouse-client-api",level:2},{value:"Creating a client instance",id:"creating-a-client-instance",level:4},{value:"Configuration",id:"configuration",level:4},{value:"Connecting",id:"connecting",level:3},{value:"Gather your connection details",id:"gather-your-connection-details",level:4},{value:"Connection pool",id:"connection-pool",level:4},{value:"Exec method",id:"exec-method",level:3},{value:"Insert method",id:"insert-method",level:3},{value:"Query method",id:"query-method",level:3},{value:"ResultSet and Row abstractions",id:"resultset-and-row-abstractions",level:4},{value:"Ping",id:"ping",level:3},{value:"Close",id:"close",level:3},{value:"Supported Data formats",id:"supported-data-formats",level:2},{value:"Supported ClickHouse data types",id:"supported-clickhouse-data-types",level:2},{value:"Date* / DateTime* types caveats",id:"date--datetime-types-caveats",level:3},{value:"Decimal* types caveats",id:"decimal-types-caveats",level:3},{value:"Integral types: Int64, Int128, Int256, UInt64, UInt128, UInt256",id:"integral-types-int64-int128-int256-uint64-uint128-uint256",level:3},{value:"ClickHouse settings",id:"clickhouse-settings",level:2},{value:"Advanced topics",id:"advanced-topics",level:2},{value:"Queries with parameters",id:"queries-with-parameters",level:3},{value:"Compression",id:"compression",level:3},{value:"Logging",id:"logging",level:3},{value:"TLS certificates",id:"tls-certificates",level:2},{value:"Known limitations",id:"known-limitations",level:2},{value:"Tips for performance optimizations",id:"tips-for-performance-optimizations",level:2}],d={toc:c};function k(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"clickhouse-js"},"ClickHouse JS"),(0,r.kt)("p",null,"The official Node.js client for connecting to ClickHouse.\nThe client is written in TypeScript and provides typings for the client public API."),(0,r.kt)("h2",{id:"environment-requirements"},"Environment requirements"),(0,r.kt)("p",null,"Node.js must be available in the environment to run the client.\nThe client is compatible with all the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nodejs/release#readme"},"maintained")," Node.js releases."),(0,r.kt)("p",null,"As soon as a Node.js version approaches End-Of-Life, the client drops support for it as it is considered outdated and\ninsecure."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note"),": The Browser environment is not officially supported at the moment."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"To install the latest available client version, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm i @clickhouse/client\n")),(0,r.kt)("h2",{id:"compatibility-with-clickhouse"},"Compatibility with ClickHouse"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Client version"),(0,r.kt)("th",{parentName:"tr",align:null},"ClickHouse"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.0.1 - 0.0.9"),(0,r.kt)("td",{parentName:"tr",align:null},"22.8, 22.9")))),(0,r.kt)("h2",{id:"clickhouse-client-api"},"ClickHouse Client API"),(0,r.kt)("h4",{id:"creating-a-client-instance"},"Creating a client instance"),(0,r.kt)("p",null,"You can instantiate as many client instances as necessary with ",(0,r.kt)("inlineCode",{parentName:"p"},"createClient")," factory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createClient } from '@clickhouse/client'\n\nconst client = createClient({\n  /* configuration */\n})\n")),(0,r.kt)("p",null,"If your environment doesn't support ESM modules, you can use CJS syntax instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const { createClient } = require('@clickhouse/client');\n\nconst client = createClient({\n  /* configuration */\n})\n")),(0,r.kt)("p",null,"A client instance can be ",(0,r.kt)("a",{parentName:"p",href:"#configuration"},"pre-configured")," during instantiation."),(0,r.kt)("h4",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"When creating a client instance, the following connection settings can be adjusted:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"host?: string")," - a ClickHouse instance URL. Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:8123")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"connect_timeout?: number")," - the timeout to set up a connection in milliseconds. Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"10_000"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"request_timeout?: number")," - the request timeout in milliseconds. Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"30_000"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"max_open_connections?: number")," - maximum number of sockets to allow per host. Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"Infinity"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"compression?: { response?: boolean; request?: boolean }")," - enable compression. ",(0,r.kt)("a",{parentName:"li",href:"#compression"},"Compression docs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"username?: string")," - The name of the user on whose behalf requests are made. Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"default"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"password?: string")," - The user password. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"''"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"application?: string")," - The name of the application using the Node.js client. Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"clickhouse-js"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"database?: string")," - Database name to use. Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"default")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"clickhouse_settings?: ClickHouseSettings")," - ClickHouse settings to apply to all requests. Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"{}"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"log?: { enable?: boolean, LoggerClass?: Logger }")," - configure logging. ",(0,r.kt)("a",{parentName:"li",href:"#logging"},"Logging docs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"tls?: { ca_cert: Buffer, cert?: Buffer, key?: Buffer }")," - configure TLS certificates. ",(0,r.kt)("a",{parentName:"li",href:"#tls-certificates"},"TLS docs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"session_id?: string"),"  - optional ClickHouse Session ID to send with every request.")),(0,r.kt)("h3",{id:"connecting"},"Connecting"),(0,r.kt)("h4",{id:"gather-your-connection-details"},"Gather your connection details"),(0,r.kt)(i.ZP,{mdxType:"ConnectionDetails"}),(0,r.kt)("p",null,"The client implements a connection via HTTP(s) protocol.\nThe ClickHouse binary protocol is not supported yet."),(0,r.kt)("p",null,"The following example demonstrates how to set up a connection against ClickHouse Cloud. It assumes ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," (including\nprotocol and port) and ",(0,r.kt)("inlineCode",{parentName:"p"},"password")," values are specified via environment variables, and ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," user is used."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Client instance\ncreation. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/ping_cloud.ts"},"Source code"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createClient } from '@clickhouse/client'\n\nconst client = createClient({\n  host: process.env.CLICKHOUSE_HOST ?? 'http://localhost:8123',\n  user: process.env.CLICKHOUSE_USER ?? 'default',\n  password: process.env.CLICKHOUSE_PASSWORD ?? '',\n})\n")),(0,r.kt)("h4",{id:"connection-pool"},"Connection pool"),(0,r.kt)("p",null,"To avoid the overhead of establishing a connection on every request, the client creates a pool of connections to\nClickHouse to reuse. By default, the size of connection pool is not limited, but you can change it\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"max_open_connections")," ",(0,r.kt)("a",{parentName:"p",href:"#configuration"},"configuration option"),".\nThere is no guarantee the same connection in a pool will be used for subsequent queries unless the user\nsets ",(0,r.kt)("inlineCode",{parentName:"p"},"max_open_connections: 1"),". This is rarely needed but may be required for cases where users are using temporary\ntables."),(0,r.kt)("h3",{id:"exec-method"},"Exec method"),(0,r.kt)("p",null,"It can be used for statements that do not have any output, when the format clause is not applicable, or when you are not\ninterested in the response at all. An example of such a statement can be ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE TABLE")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ALTER TABLE"),"."),(0,r.kt)("p",null,"Should be awaited."),(0,r.kt)("p",null,"Optionally, it returns a readable stream that can be consumed on the application side if you need it for some reason.\nBut in that case, you might consider using ",(0,r.kt)("a",{parentName:"p",href:"#query-method"},"query")," instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ExecParams {\n  // Statement to execute.\n  query: string\n  // ClickHouse settings that can be applied on query level\n  clickhouse_settings?: ClickHouseSettings\n  // Parameters for query binding.\n  query_params?: Record<string, unknown>\n  // AbortSignal instance to cancel a request in progress.\n  abort_signal?: AbortSignal\n}\n\ninterface ClickHouseClient {\n  exec(params: ExecParams): Promise<Stream.Readable>\n}\n")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"A request cancelled with ",(0,r.kt)("inlineCode",{parentName:"p"},"abort_signal")," does not guarantee that DDL wasn't executed by server."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Create a table in ClickHouse\nCloud. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/create_table_cloud.ts"},"Source code"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await client.exec({\n  query: `\n    CREATE TABLE IF NOT EXISTS my_cloud_table\n    (id UInt64, name String)\n    ORDER BY (id)\n  `,\n  // Recommended for cluster usage to avoid situations\n  // where a query processing error occurred after the response code\n  // and HTTP headers were sent to the client.\n  // See https://clickhouse.com/docs/en/interfaces/http/#response-buffering\n  clickhouse_settings: {\n    wait_end_of_query: 1,\n  },\n})\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Create a table in a self-hosted ClickHouse\ninstance. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/create_table_single_node.ts"},"Source code"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await client.exec({\n  query: `\n    CREATE TABLE IF NOT EXISTS my_table\n    (id UInt64, name String)\n    ENGINE MergeTree()\n    ORDER BY (id)\n  `,\n})\n")),(0,r.kt)("h3",{id:"insert-method"},"Insert method"),(0,r.kt)("p",null,"The primary method for data insertion. It can work with both ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream.Readable")," (all formats except ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON"),") and\nplain ",(0,r.kt)("inlineCode",{parentName:"p"},"Array<T>")," (",(0,r.kt)("inlineCode",{parentName:"p"},"JSON*")," family formats only). It is recommended to avoid arrays in case of large inserts to reduce\napplication memory consumption and consider streaming for most of the use cases."),(0,r.kt)("p",null,"Should be awaited, but it does not return anything."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface InsertParams<T> {\n  // Table name to insert the data into\n  table: string\n  // A dataset to insert. Stream will work for all formats except JSON.\n  values: ReadonlyArray<T> | Stream.Readable\n  // Format of the dataset to insert.\n  format?: DataFormat\n  // ClickHouse settings that can be applied on statement level.\n  clickhouse_settings?: ClickHouseSettings\n  // Parameters for query binding.\n  query_params?: Record<string, unknown>\n  // AbortSignal instance to cancel an insert in progress.\n  abort_signal?: AbortSignal\n}\n\ninterface ClickHouseClient {\n  insert(params: InsertParams): Promise<void>\n}\n")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"A request canceled with ",(0,r.kt)("inlineCode",{parentName:"p"},"abort_signal")," does not guarantee that data insertion did not take place."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert an array of\nvalues. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/array_json_each_row.ts"},"Source code"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await client.insert({\n  table: 'my_table',\n  // structure should match the desired format, JSONEachRow in this example\n  values: [\n    { id: 42, name: 'foo' },\n    { id: 42, name: 'bar' },\n  ],\n  format: 'JSONEachRow',\n})\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert a stream of\nobjects. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/insert_json_stream.ts"},"Source code"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const stream = new Stream.Readable({ objectMode: true, ... });\nstream.push({ id: '42' })\nsetTimeout(function closeStream() {\n  stream.push(null)\n}, 100)\nawait client.insert({\n  table: 'my_table',\n  values: stream,\n  format: 'JSONCompactEachRow',\n})\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert a stream of strings in CSV format from a CSV\nfile. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/insert_file_stream_csv.ts"},"Source code"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await client.insert({\n  table: 'my_table',\n  values: fs.createReadStream('./path/to/a/file.csv'),\n  format: 'CSV',\n})\n")),(0,r.kt)("h3",{id:"query-method"},"Query method"),(0,r.kt)("p",null,"Used for most statements that can have a response, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT"),", or for sending DDLs such as ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE TABLE"),".\nPlease consider using the dedicated method ",(0,r.kt)("a",{parentName:"p",href:"#insert-method"},"insert")," for data insertion."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface QueryParams {\n  // Query to execute that might return some data.\n  query: string\n  // Format of the resulting dataset.\n  format?: DataFormat\n  // ClickHouse settings that can be applied on query level.\n  clickhouse_settings?: ClickHouseSettings\n  // Parameters for query binding.\n  query_params?: Record<string, unknown>\n  // AbortSignal instance to cancel a query in progress.\n  abort_signal?: AbortSignal\n}\n\ninterface ClickHouseClient {\n  query(params: QueryParams): Promise<ResultSet>\n}\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Do not specify the FORMAT clause in ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),", use ",(0,r.kt)("inlineCode",{parentName:"p"},"format")," parameter instead."))),(0,r.kt)("h4",{id:"resultset-and-row-abstractions"},"ResultSet and Row abstractions"),(0,r.kt)("p",null,"Provides several convenience methods for data processing in your application."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ResultSet {\n  // Consume the entire stream and get the contents as a string\n  // Can be used with any DataFormat\n  // Should be called only once\n  text(): Promise<string>\n\n  // Consume the entire stream and parse the contents as a JS object\n  // Can be used only with JSON formats\n  // Should be called only once\n  json<T>(): Promise<T>\n\n  // Returns a readable stream for responses that can be streamed (i.e. all except JSON)\n  // Every iteration provides an array of Row[] in the selected DataFormat\n  // Should be called only once\n  // NB: if called for the second time, the second stream will be just empty\n  stream(): Stream.Readable\n}\n\ninterface Row {\n  // Get the content of the row as a plain string\n  text: string\n\n  // Parse the content of the row as a JS object\n  json<T>(): T\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," A query with a resulting dataset as ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONEachRow"),"\nformat. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/array_json_each_row.ts"},"Source code"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const resultSet = await client.query({\n  query: 'SELECT * FROM my_table',\n  format: 'JSONEachRow',\n})\nconst dataset = await resultSet.json()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," A query with a resulting dataset as a stream of objects in ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONEachRow"),"\nformat consumed using classic ",(0,r.kt)("inlineCode",{parentName:"p"},"on('data')"),"\napproach. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/select_streaming_on_data.ts"},"Source code")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const resultSet = await client.query({\n  query: 'SELECT number FROM system.numbers_mt LIMIT 5',\n  format: 'CSV',\n})\nconst stream = resultSet.stream()\nstream.on('data', (rows: Row[]) => {\n  rows.forEach((row: Row) => {\n    console.log(row.text)\n  })\n})\nawait new Promise((resolve) => {\n  stream.on('end', () => {\n    console.log('Completed!')\n    resolve(0)\n  })\n})\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," A query with a resulting dataset as a stream of objects in ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONEachRow"),"\nformat consumed using ",(0,r.kt)("inlineCode",{parentName:"p"},"for await const"),"\nsyntax. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/select_streaming_for_await.ts"},"Source code"),"."),(0,r.kt)("p",null,"A bit less code than ",(0,r.kt)("inlineCode",{parentName:"p"},"on('data')")," approach, but it may have negative performance impact.\nSee ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nodejs/node/issues/31979"},"this issue")," for more details."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const resultSet = await client.query({\n  query: 'SELECT number FROM system.numbers LIMIT 10',\n  format: 'JSONEachRow',\n})\nfor await (const rows of resultSet.stream()) {\n  rows.forEach(row => {\n    console.log(row.text)\n  })\n}\n")),(0,r.kt)("h3",{id:"ping"},"Ping"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ping")," method provided to check the connectivity status returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the server can be reached.\nIt can throw a standard Node.js Error such as ",(0,r.kt)("inlineCode",{parentName:"p"},"ECONNREFUSED"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ClickHouseClient {\n  ping(): Promise<boolean>\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Ping a ClickHouse server\ninstance. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/ping_cloud.ts"},"Source code"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const isAlive = await client.ping();\n")),(0,r.kt)("h3",{id:"close"},"Close"),(0,r.kt)("p",null,"Closes all the open connections and releases resources."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await client.close()\n")),(0,r.kt)("h2",{id:"supported-data-formats"},"Supported Data formats"),(0,r.kt)("p",null,"The client handles data formats as JSON or text."),(0,r.kt)("p",null,"If you specify ",(0,r.kt)("inlineCode",{parentName:"p"},"format")," as one of the JSON-family (",(0,r.kt)("inlineCode",{parentName:"p"},"JSONEachRow"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONCompactEachRow"),", etc.), the client will serialize\nand deserialize data during the communication over the wire."),(0,r.kt)("p",null,"Data provided in the text formats (",(0,r.kt)("inlineCode",{parentName:"p"},"CSV"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TabSeparated")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomSeparated")," families) are sent over the wire without\nadditional transformations."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Format"),(0,r.kt)("th",{parentName:"tr",align:null},"Input (array)"),(0,r.kt)("th",{parentName:"tr",align:null},"Input (stream)"),(0,r.kt)("th",{parentName:"tr",align:null},"Input (object)"),(0,r.kt)("th",{parentName:"tr",align:null},"Output (JSON)"),(0,r.kt)("th",{parentName:"tr",align:null},"Output (text)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSON"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSONObjectEachRow"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSONEachRow"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSONStringsEachRow"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSONCompactEachRow"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSONCompactStringsEachRow"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSONCompactEachRowWithNames"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSONCompactEachRowWithNamesAndTypes"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSONCompactStringsEachRowWithNames"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSONCompactStringsEachRowWithNamesAndTypes"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CSV"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CSVWithNames"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CSVWithNamesAndTypes"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TabSeparated"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TabSeparatedRaw"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TabSeparatedWithNames"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TabSeparatedWithNamesAndTypes"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CustomSeparated"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CustomSeparatedWithNames"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CustomSeparatedWithNamesAndTypes"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")))),(0,r.kt)("p",null,"The entire list of ClickHouse input and output formats is\navailable ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/interfaces/formats"},"here"),"."),(0,r.kt)("h2",{id:"supported-clickhouse-data-types"},"Supported ClickHouse data types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"JS type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt8/16/32"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt64/128/256"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f\u2757- see below"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int8/16/32"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int64/128/256"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f\u2757- see below"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Float32/64"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Decimal"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f\u2757- see below"),(0,r.kt)("td",{parentName:"tr",align:null},"number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FixedString"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UUID"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date32/64"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f\u2757- see below"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DateTime32/64"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f\u2757- see below"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Enum"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LowCardinality"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Array(T)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"T[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSON"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nested"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tuple"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"Tuple")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nullable(T)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"JS type for T or null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IPv4"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IPv6"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Point"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"[ number, number ]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Ring"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"Array<Point",">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Polygon"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"Array<Ring",">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MultiPolygon"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"Array<Polygon",">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map(K, V)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"Record<K, V",">")))),(0,r.kt)("p",null,"The entire list of supported ClickHouse formats is\navailable ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/"},"here"),"."),(0,r.kt)("h3",{id:"date--datetime-types-caveats"},"Date* / DateTime","*"," types caveats"),(0,r.kt)("p",null,"Since the client inserts values without additional type conversion, ",(0,r.kt)("inlineCode",{parentName:"p"},"Date*")," type columns can only be inserted as\nstrings and not as Unix time epochs. It might be changed with the future ClickHouse database releases."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert a ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," type\nvalue. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/ba387d7f4ce375a60982ac2d99cb47391cf76cec/__tests__/integration/date_time.test.ts"},"Source code"),"\n."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await client.insert({\n  table: 'my_table',\n  values: [ { date: '2022-09-05' } ],\n  format: 'JSONEachRow',\n})\n")),(0,r.kt)("h3",{id:"decimal-types-caveats"},"Decimal","*"," types caveats"),(0,r.kt)("p",null,"Since the client performs no additional type conversion, it is not possible to insert ",(0,r.kt)("inlineCode",{parentName:"p"},"Decimal*")," type columns as\nstrings, only as numbers. This is a suboptimal approach as it might end in float precision loss. Thus, it is recommended\nto avoid ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON*")," formats when using ",(0,r.kt)("inlineCode",{parentName:"p"},"Decimals")," as of now. Consider ",(0,r.kt)("inlineCode",{parentName:"p"},"TabSeparated*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CSV*")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomSeparated*")," formats\nfamilies for that kind of workflows."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert a ",(0,r.kt)("inlineCode",{parentName:"p"},"Decimal")," type\nvalue. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/c1b70c82f525c39edb3ca1ee05cb5e6b43dba5b3/__tests__/integration/data_types.test.ts#L98-L131"},"Source code"),"\n."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await client.insert({\n  table: 'my_table',\n  values: [ { decimal: '1234567891234567891234567891.1234567891' } ],\n  format: 'JSONEachRow',\n})\n")),(0,r.kt)("h3",{id:"integral-types-int64-int128-int256-uint64-uint128-uint256"},"Integral types: Int64, Int128, Int256, UInt64, UInt128, UInt256"),(0,r.kt)("p",null,"Though the server can accept it as a number, it is returned as a string in ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON*")," family output formats to avoid\ninteger overflow as max values for these types are bigger than ",(0,r.kt)("inlineCode",{parentName:"p"},"Number.MAX_SAFE_INTEGER"),"."),(0,r.kt)("p",null,"This behavior, however, can be modified\nwith ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/operations/settings/settings/#output_format_json_quote_64bit_integers"},(0,r.kt)("inlineCode",{parentName:"a"},"output_format_json_quote_64bit_integers")," setting"),"\n."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Adjust the JSON output format for 64-bit numbers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const resultSet = await client.query({\n  query: 'SELECT * from system.numbers LIMIT 1',\n  format: 'JSONEachRow',\n})\n\nexpect(await resultSet.json()).toEqual([ { number: '0' } ])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const resultSet = await client.query({\n  query: 'SELECT * from system.numbers LIMIT 1',\n  format: 'JSONEachRow',\n  clickhouse_settings: { output_format_json_quote_64bit_integers: 0 },\n})\n\nexpect(await resultSet.json()).toEqual([ { number: 0 } ])\n")),(0,r.kt)("h2",{id:"clickhouse-settings"},"ClickHouse settings"),(0,r.kt)("p",null,"The client can adjust ClickHouse behavior via ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/operations/settings/settings/"},"settings"),"\nmechanism.\nThe settings can be set on the client instance level so that they will be applied to every request sent to the\nClickHouse:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const client = createClient({\n  clickhouse_settings: {}\n})\n")),(0,r.kt)("p",null,"Or a setting can be configured on a request-level:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"client.query({\n  clickhouse_settings: {}\n})\n")),(0,r.kt)("p",null,"A type declaration file with all the supported ClickHouse settings can be\nfound ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/730b1b2516e2d47dc9a32b1d8d0b8ba8ceb95ead/src/settings.ts"},"here"),"."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Make sure that the user on whose behalf the queries are made has sufficient rights to change the settings."))),(0,r.kt)("h2",{id:"advanced-topics"},"Advanced topics"),(0,r.kt)("h3",{id:"queries-with-parameters"},"Queries with parameters"),(0,r.kt)("p",null,"You can create a query with parameters and pass values to them from client application. This allows to avoid formatting\nquery with specific dynamic values on client side."),(0,r.kt)("p",null,"Format a query as usual, then place the values that you want to pass from the app parameters to the query in braces in\nthe following format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{<name>: <data type>}\n")),(0,r.kt)("p",null,"where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," \u2014 Placeholder identifier."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data type")," -  ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/data-types/"},"Data type")," of the app parameter value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:"),": Query with\nparameters. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/query_with_parameter_binding.ts"},"Source code"),"\n."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await client.query({\n  query: 'SELECT plus({val1: Int32}, {val2: Int32})',\n  format: 'CSV',\n  query_params: {\n    val1: 10,\n    val2: 20,\n  },\n})\n")),(0,r.kt)("p",null,"Check ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/interfaces/cli#cli-queries-with-parameters-syntax"},"https://clickhouse.com/docs/en/interfaces/cli#cli-queries-with-parameters-syntax")," for additional details."),(0,r.kt)("h3",{id:"compression"},"Compression"),(0,r.kt)("p",null,"Data applications operating with large datasets over the wire can benefit from enabling compression. Currently,\nonly ",(0,r.kt)("inlineCode",{parentName:"p"},"GZIP")," is supported using ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/docs/latest-v14.x/api/zlib.html"},"zlib"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"createClient({\n  compression: {\n    response: true,\n    request: true\n  }\n})\n")),(0,r.kt)("p",null,"Configurations parameters are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"response: true")," instructs ClickHouse server to respond with compressed response body. Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"response: true")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"request: true")," enables compression on the client request body. Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"request: false"))),(0,r.kt)("h3",{id:"logging"},"Logging"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The logging is an experimental feature and is subject to change in the future."))),(0,r.kt)("p",null,"You can enable logging for debugging purposes by setting in the client configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"createClient({\n  log: { enable: true },\n})\n")),(0,r.kt)("p",null,"The default logger implementation emits log records into ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout")," via ",(0,r.kt)("inlineCode",{parentName:"p"},"console.debug/info/warn/error")," methods.\nYou can customize the logging logic via providing a ",(0,r.kt)("inlineCode",{parentName:"p"},"LoggerClass"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { Logger } from '@clickhouse/client'\n\nclass FileLogger implements Logger {\n  // ...\n}\n\ncreateClient({\n  log: {\n    enable: true,\n    LoggerClass: FileLogger,\n  }\n})\n")),(0,r.kt)("p",null,"Check an example\nimplementation ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/1977fa466201929a2736bd8ebc442731e0f00d12/__tests__/utils/test_logger.ts"},"here"),"\n."),(0,r.kt)("h2",{id:"tls-certificates"},"TLS certificates"),(0,r.kt)("p",null,"Node.js client optionally supports both basic (Certificate Authority only)\nand mutual (Certificate Authority and client certificates) TLS."),(0,r.kt)("p",null,"Basic TLS configuration example, assuming that you have your certificates in ",(0,r.kt)("inlineCode",{parentName:"p"},"certs")," folder\nand CA file name is ",(0,r.kt)("inlineCode",{parentName:"p"},"CA.pem"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"createClient({\n  host: 'https://<hostname>:<port>',\n  username: '<username>',\n  password: '<password>', // if required\n  tls: {\n    ca_cert: fs.readFileSync('certs/CA.pem'),\n  },\n})\n")),(0,r.kt)("p",null,"Mutual TLS configuration example using client certificates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"createClient({\n  host: 'https://<hostname>:<port>',\n  username: '<username>',\n  tls: {\n    ca_cert: fs.readFileSync('certs/CA.pem'),\n    cert: fs.readFileSync(`certs/client.crt`),\n    key: fs.readFileSync(`certs/client.key`),\n  },\n})\n")),(0,r.kt)("p",null,"See full examples\nfor ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/basic_tls.ts"},"basic"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-js/blob/main/examples/mutual_tls.ts"},"mutual"),"\nTLS in the repository. "),(0,r.kt)("h2",{id:"known-limitations"},"Known limitations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Browser environment is not supported."),(0,r.kt)("li",{parentName:"ul"},"There are no data mappers for the result sets, so only language primitives are used."),(0,r.kt)("li",{parentName:"ul"},"There are some ",(0,r.kt)("a",{parentName:"li",href:"#date--datetime-types-caveats"},"Decimal* and Date","*"," / DateTime","*"," data types caveats"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/nested-data-structures/nested"},"Nested")," data type is currently not officially\nsupported.")),(0,r.kt)("h2",{id:"tips-for-performance-optimizations"},"Tips for performance optimizations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To reduce application memory consumption, consider using streams for large inserts and selects when applicable."),(0,r.kt)("li",{parentName:"ul"},"Node.js HTTP(s) Agent has ",(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/api/http.html#agentmaxsockets"},"infinite max open sockets")," by default. In\nsome cases, you might want to limit that by using ",(0,r.kt)("inlineCode",{parentName:"li"},"ClickHouseClientConfigOptions.max_open_connections")," setting."),(0,r.kt)("li",{parentName:"ul"},"The client enable compression for ",(0,r.kt)("inlineCode",{parentName:"li"},"query")," responses by default, but ",(0,r.kt)("inlineCode",{parentName:"li"},"insert")," compression is disabled. When using large\ninserts, you might want to enable request compression as well. You can\nuse ",(0,r.kt)("inlineCode",{parentName:"li"},"ClickHouseClientConfigOptions.compression.request")," for that."),(0,r.kt)("li",{parentName:"ul"},"Compression has some performance penalty. As it is enabled by default for responses, you might consider disabling it\nif you need to speed the selects up, but, on the other hand, it comes with a cost of network traffic increase.")))}k.isMDXComponent=!0},64872:function(e,t,n){t.Z=n.p+"assets/images/cloud-connect-button-e2247559831d9d3549387ddfb0deee9b.png"},33273:function(e,t,n){t.Z=n.p+"assets/images/connection-details-https-6ceceb667ac0b41ab35a2ad390b7e2dc.png"}}]);
"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[72234],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=d(n),c=r,k=u["".concat(s,".").concat(c)]||u[c]||p[c]||l;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},67740:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),r=(n(67294),n(3905));const l={toc:[]},i="wrapper";function o(e){let{components:t,...o}=e;return(0,r.kt)(i,(0,a.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To connect to ClickHouse with HTTP(S) you need this information:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The HOST and PORT: typically, the port is 8443 when using TLS or 8123 when not using TLS.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The DATABASE NAME: out of the box, there is a database named ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),", use the name of the database that you want to connect to.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The USERNAME and PASSWORD: out of the box, the username is ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),". Use the username appropriate for your use case."))),(0,r.kt)("p",null,"The details for your ClickHouse Cloud service are available in the ClickHouse Cloud console.  Select the service that you will connect to and click ",(0,r.kt)("strong",{parentName:"p"},"Connect"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"ClickHouse Cloud service connect button",src:n(64872).Z,width:"939",height:"474"})),(0,r.kt)("p",null,"Choose ",(0,r.kt)("strong",{parentName:"p"},"HTTPS"),", and the details are available in an example ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," command. "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"ClickHouse Cloud HTTPS connection details",src:n(33273).Z,width:"586",height:"470"})),(0,r.kt)("p",null,"If you are using self-managed ClickHouse, the connection details are set by your ClickHouse administrator."))}o.isMDXComponent=!0},90903:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),l=n(67740);const i={sidebar_label:"Python",sidebar_position:10,keywords:["clickhouse","python","client","connect","integrate"],slug:"/en/integrations/python",description:"The ClickHouse Connect project suite for connecting Python to ClickHouse"},o="Python Integration with ClickHouse Connect",s={unversionedId:"en/integrations/language-clients/python/index",id:"en/integrations/language-clients/python/index",title:"Python Integration with ClickHouse Connect",description:"The ClickHouse Connect project suite for connecting Python to ClickHouse",source:"@site/docs/en/integrations/language-clients/python/index.md",sourceDirName:"en/integrations/language-clients/python",slug:"/en/integrations/python",permalink:"/docs/en/integrations/python",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/language-clients/python/index.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_label:"Python",sidebar_position:10,keywords:["clickhouse","python","client","connect","integrate"],slug:"/en/integrations/python",description:"The ClickHouse Connect project suite for connecting Python to ClickHouse"},sidebar:"docs",previous:{title:"Java",permalink:"/docs/en/integrations/java"},next:{title:"Nodejs",permalink:"/docs/en/integrations/language-clients/nodejs"}},d={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Requirements and Compatibility",id:"requirements-and-compatibility",level:3},{value:"Installation",id:"installation",level:3},{value:"Support Policy",id:"support-policy",level:3},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Gather your connection details",id:"gather-your-connection-details",level:3},{value:"Establish a connection",id:"establish-a-connection",level:4},{value:"Use a ClickHouse Connect client instance to connect to a ClickHouse server on localhost:",id:"use-a-clickhouse-connect-client-instance-to-connect-to-a-clickhouse-server-on-localhost",level:5},{value:"Use a ClickHouse Connect client instance to connect to a ClickHouse Cloud service:",id:"use-a-clickhouse-connect-client-instance-to-connect-to-a-clickhouse-cloud-service",level:5},{value:"Interact with your database",id:"interact-with-your-database",level:4},{value:"ClickHouse Connect Driver API",id:"clickhouse-connect-driver-api",level:2},{value:"Client Initialization",id:"client-initialization",level:3},{value:"Connection Arguments",id:"connection-arguments",level:4},{value:"HTTPS/TLS Arguments",id:"httpstls-arguments",level:4},{value:"Settings Argument",id:"settings-argument",level:4},{value:"Client Creation Examples",id:"client-creation-examples",level:4},{value:"Common Method Arguments",id:"common-method-arguments",level:3},{value:"Parameters Argument",id:"parameters-argument",level:4},{value:"Server Side Binding",id:"server-side-binding",level:5},{value:"Client Side Binding",id:"client-side-binding",level:5},{value:"Settings Argument",id:"settings-argument-1",level:4},{value:"Client <em>command</em> Method",id:"client-command-method",level:3},{value:"Client <em>query</em> Method",id:"client-query-method",level:3},{value:"The QueryResult Object",id:"the-queryresult-object",level:4},{value:"Specialized Client Query Methods",id:"specialized-client-query-methods",level:3},{value:"Client Streaming Query Methods",id:"client-streaming-query-methods",level:3},{value:"Client <em>insert</em> Method",id:"client-insert-method",level:3},{value:"File Inserts",id:"file-inserts",level:3},{value:"Raw API",id:"raw-api",level:3},{value:"Client <em>raw_query</em> Method",id:"client-raw_query-method",level:4},{value:"Client <em>raw_insert</em> Method",id:"client-raw_insert-method",level:4},{value:"Querying Data with ClickHouse Connect:  Advanced Usage",id:"querying-data-with-clickhouse-connect--advanced-usage",level:2},{value:"QueryContexts",id:"querycontexts",level:3},{value:"Streaming Queries",id:"streaming-queries",level:3},{value:"Data Blocks",id:"data-blocks",level:4},{value:"StreamContexts",id:"streamcontexts",level:4},{value:"Stream Types",id:"stream-types",level:4},{value:"Read Formats",id:"read-formats",level:3},{value:"Read Format Options (Python Types)",id:"read-format-options-python-types",level:4},{value:"Inserting Data with ClickHouse Connect:  Advanced Usage",id:"inserting-data-with-clickhouse-connect--advanced-usage",level:2},{value:"InsertContexts",id:"insertcontexts",level:3},{value:"Write Formats",id:"write-formats",level:3},{value:"Write Format Options",id:"write-format-options",level:4},{value:"Additional Options",id:"additional-options",level:2},{value:"Global Settings",id:"global-settings",level:3},{value:"Compression",id:"compression",level:3},{value:"HTTP Proxy Support",id:"http-proxy-support",level:3}],u={toc:m},p="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-integration-with-clickhouse-connect"},"Python Integration with ClickHouse Connect"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"ClickHouse Connect is a suite of Python packages providing interoperability with a wide range of Python applications.\nThe three primary components are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A low level driver in the package ",(0,r.kt)("inlineCode",{parentName:"li"},"clickhouse_connect.driver"),". This package includes a basic client that handles\nall ClickHouse Connect requests to the ClickHouse Server, as well assorted helper classes and utility functions."),(0,r.kt)("li",{parentName:"ul"},"A limited ",(0,r.kt)("a",{parentName:"li",href:"https://www.sqlalchemy.org/"},"SQLAlchemy")," dialect in the package ",(0,r.kt)("inlineCode",{parentName:"li"},"clickhouse_connect.cc_sqlalchemy"),". This\npackage focuses implements query/cursor functionality, and does not generally support SQLAlchemy DDL and ORM\noperations.\n(SQLAlchemy is targeted toward OLTP databases, and we recommend more specialized tools and frameworks to manage\nthe ClickHouse OLAP database.)"),(0,r.kt)("li",{parentName:"ul"},"An Apache ",(0,r.kt)("a",{parentName:"li",href:"https://superset.apache.org/"},"Superset")," EngineSpec in the ",(0,r.kt)("inlineCode",{parentName:"li"},"clickhouse_connect.cc_superset"),".  Note that\nthis sub-package is deprecated and will be removed in a future release.  The functionality has been moved to the\nmain Superset project, and is included here for backward compatibility with older Superset version.")),(0,r.kt)("p",null,"This documentation is current as of the beta release 0.5.13."),(0,r.kt)("h3",{id:"requirements-and-compatibility"},"Requirements and Compatibility"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"Python"),(0,r.kt)("th",{parentName:"tr",align:"left"}),(0,r.kt)("th",{parentName:"tr",align:"right"},"Platform\xb9"),(0,r.kt)("th",{parentName:"tr",align:"left"}),(0,r.kt)("th",{parentName:"tr",align:"right"},"ClickHouse"),(0,r.kt)("th",{parentName:"tr",align:"left"}),(0,r.kt)("th",{parentName:"tr",align:"right"},"SQLAlchemy\xb2"),(0,r.kt)("th",{parentName:"tr",align:"left"}),(0,r.kt)("th",{parentName:"tr",align:"right"},"Apache Superset"),(0,r.kt)("th",{parentName:"tr",align:"left"}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"2.x, <3.7"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:"right"},"Linux (x86)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"<22.3\xb3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\ud83d\udfe1"),(0,r.kt)("td",{parentName:"tr",align:"right"},"<1.3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:"right"},"<1.4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"3.7.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"Linux (Aarch64)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"22.3.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.3.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.4.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"3.8.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"macOS (x86)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"22.4-22.7\xb3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\ud83d\udfe1"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.4.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.5.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"3.9.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"macOs (M1)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"22.8.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},">=2.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2.0.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"3.10.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"Windows"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"},"22.9-22.12\xb3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\ud83d\udfe1"),(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"3.11.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"right"},"22.12.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"right"},"23.1.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"right"},"23.2.x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"right"}),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("p",null,"\xb9ClickHouse Connect has been explicitly tested against the listed platforms.  In addition, untested binary wheels (with C\noptimization) are built for all architectures supported by the excellent ",(0,r.kt)("a",{parentName:"p",href:"https://cibuildwheel.readthedocs.io/en/stable/"},"cibuildwheel")," project.\nFinally, because ClickHouse Connect can also run as pure Python, the source installation should work on any recent\nPython installation."),(0,r.kt)("p",null,"\xb2Again SQLAlchemy support is limited primarily to query functionality.  The full SQLAlchemy API is not supported."),(0,r.kt)("p",null,"\xb3ClickHouse Connect has been tested against all currently supported ClickHouse versions. Because it uses the HTTP\nprotocol, it should also work correctly for most other versions of ClickHouse, although there may be some\nincompatibilities with certain advanced data types."),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install ClickHouse Connect from PyPI via pip:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pip install clickhouse-connect")),(0,r.kt)("p",null,"ClickHouse Connect can also be installed from source:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git clone")," the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ClickHouse/clickhouse-connect"},"GitHub repository"),"."),(0,r.kt)("li",{parentName:"ul"},"(Optional) run ",(0,r.kt)("inlineCode",{parentName:"li"},"pip install cython")," to build and enable the C/Cython optimizations"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cd")," to the project root directory and run ",(0,r.kt)("inlineCode",{parentName:"li"},"pip install ."))),(0,r.kt)("h3",{id:"support-policy"},"Support Policy"),(0,r.kt)("p",null,"ClickHouse Connect is currently in beta and only the current beta release is actively supported. Please update to the latest\nversion before reported any issues. Issues should be filed in\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/clickhouse-connect/issues"},"GitHub project"),".\nFuture releases of ClickHouse Connect are guaranteed to be compatible with actively supported ClickHouse versions at the\ntime of release (generally the three most recent ",(0,r.kt)("inlineCode",{parentName:"p"},"stable")," and two most recent ",(0,r.kt)("inlineCode",{parentName:"p"},"lts")," releases)."),(0,r.kt)("h3",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("h3",{id:"gather-your-connection-details"},"Gather your connection details"),(0,r.kt)(l.ZP,{mdxType:"ConnectionDetails"}),(0,r.kt)("h4",{id:"establish-a-connection"},"Establish a connection"),(0,r.kt)("p",null,"There are two examples shown for connecting to ClickHouse:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Connecting to a ClickHouse server on localhost."),(0,r.kt)("li",{parentName:"ul"},"Connecting to a ClickHouse Cloud service.")),(0,r.kt)("h5",{id:"use-a-clickhouse-connect-client-instance-to-connect-to-a-clickhouse-server-on-localhost"},"Use a ClickHouse Connect client instance to connect to a ClickHouse server on localhost:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import clickhouse_connect\n\nclient = clickhouse_connect.get_client(host='localhost', username='default', password='password')\n")),(0,r.kt)("h5",{id:"use-a-clickhouse-connect-client-instance-to-connect-to-a-clickhouse-cloud-service"},"Use a ClickHouse Connect client instance to connect to a ClickHouse Cloud service:"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Use the connection details gathered earlier.  ClickHouse Cloud services require TLS, so use port 8443.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import clickhouse_connect\n\nclient = clickhouse_connect.get_client(host='HOSTNAME.clickhouse.cloud', port=8443, username='default', password='your password')\n")),(0,r.kt)("h4",{id:"interact-with-your-database"},"Interact with your database"),(0,r.kt)("p",null,"To run a ClickHouse SQL command, use the client ",(0,r.kt)("inlineCode",{parentName:"p"},"command")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"client.command('CREATE TABLE new_table (key UInt32, value String, metric Float64) ENGINE MergeTree ORDER BY key')\n")),(0,r.kt)("p",null,"To insert batch data, use the client ",(0,r.kt)("inlineCode",{parentName:"p"},"insert")," method with a two-dimensional array of rows and values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"row1 = [1000, 'String Value 1000', 5.233]\nrow2 = [2000, 'String Value 2000', -107.04]\ndata = [row1, row2]\nclient.insert('new_table', data, column_names=['key', 'value', 'metric'])\n")),(0,r.kt)("p",null,"To retrieve data using ClickHouse SQL, use the client ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"result = client.query('SELECT max(key), avg(metric) FROM new_table')\nresult.result_rows\nOut[13]: [(2000, -50.9035)]\n")),(0,r.kt)("h2",{id:"clickhouse-connect-driver-api"},"ClickHouse Connect Driver API"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Note:"))," Passing keyword arguments is recommended for most api methods given the number of\npossible arguments, many of which are optional."),(0,r.kt)("h3",{id:"client-initialization"},"Client Initialization"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"clickhouse_connect.driver.client")," class provides the primary interface between a Python application and the\nClickHouse database server. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"clickhouse_connect.get_client")," function to obtain a Client instance, which accepts\nthe following arguments:"),(0,r.kt)("h4",{id:"connection-arguments"},"Connection Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"interface"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},"http"),(0,r.kt)("td",{parentName:"tr",align:null},"Must be http or https.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"host"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"The hostname or IP address of the ClickHouse server.  If not set, ",(0,r.kt)("inlineCode",{parentName:"td"},"localhost")," will be used.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"port"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"8123 or 8443"),(0,r.kt)("td",{parentName:"tr",align:null},"The ClickHouse HTTP or HTTPS port. If not set will default to 8123, or to 8443 if ",(0,r.kt)("em",{parentName:"td"},"secure"),"=",(0,r.kt)("em",{parentName:"td"},"True")," or ",(0,r.kt)("em",{parentName:"td"},"interface"),"=",(0,r.kt)("em",{parentName:"td"},"https"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"username"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"The ClickHouse user name. If not set, the ",(0,r.kt)("inlineCode",{parentName:"td"},"default")," ClickHouse user will be used.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"password"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"<","empty string",">")),(0,r.kt)("td",{parentName:"tr",align:null},"The password for ",(0,r.kt)("em",{parentName:"td"},"username"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"The default database for the connection. If not set, ClickHouse Connect will use the default database for ",(0,r.kt)("em",{parentName:"td"},"username"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"secure"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"Use https/TLS.  This overrides inferred values from the interface or port arguments.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dsn"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"A string in standard DSN (Data Source Name) format.  Other connection values (such as host or user) will be extracted from this string if not set otherwise.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"compress"),(0,r.kt)("td",{parentName:"tr",align:null},"bool or str"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable compression for ClickHouse HTTP inserts and query results. See ",(0,r.kt)("a",{parentName:"td",href:"#compression"},"Additional Options (Compression)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query_limit"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"0 (unlimited)"),(0,r.kt)("td",{parentName:"tr",align:null},"Maximum number of rows to return for any ",(0,r.kt)("inlineCode",{parentName:"td"},"query")," response. Set this to zero to return unlimited rows.  Note that large query limits may result in out of memory exceptions if results are not streamed, as all results are loaded into memory at once.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query_retries"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Maximum number of retries for a ",(0,r.kt)("inlineCode",{parentName:"td"},"query"),' request. Only "retryable" HTTP responses will be retried. ',(0,r.kt)("inlineCode",{parentName:"td"},"command")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"insert")," requests are not automatically retried by the driver to prevent unintended duplicate requests.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"connect_timeout"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP connection timeout in seconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"send_receive_timeout"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"300"),(0,r.kt)("td",{parentName:"tr",align:null},"Send/receive timeout for the HTTP connection in seconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"client_name"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"client_name prepended to the HTTP User Agent header. Set this to track client queries in the ClickHouse system.query_log.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"send_progress"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"Deprecated as of v0.5.9, does nothing.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pool_mgr"),(0,r.kt)("td",{parentName:"tr",align:null},"obj"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"<","default PoolManager",">")),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"urllib3")," library PoolManager to use.   For advanced use cases requiring multiple connection pools to different hosts.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"http_proxy"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP proxy address (equivalent to setting the HTTP_PROXY environment variable).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"https_proxy"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"HTTPS proxy address (equivalent to setting the HTTPS_PROXY environment variable).")))),(0,r.kt)("h4",{id:"httpstls-arguments"},"HTTPS/TLS Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"verify"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"Validate the ClickHouse server TLS/SSL certificate (hostname, expiration, etc.) if using HTTPS/TLS.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ca_cert"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("em",{parentName:"td"},"verify"),"=",(0,r.kt)("em",{parentName:"td"},"True"),", the file path to Certificate Authority root to validate ClickHouse server certificate, in .pem format. Ignored if verify is False. This is not necessary if the ClickHouse server certificate is a globally trusted root as verified by the operating system.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"client_cert"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"File path to a TLS Client certificate in .pem format (for mutual TLS authentication). The file should contain a full certificate chain, including any intermediate certificates.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"client_cert_key"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"File path to the private key for the Client Certificate. Required if the private key is not included the Client Certificate key file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"server_host_name"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"The ClickHouse server hostname as identified by the CN or SNI of its TLS certificate.  Set this to avoid SSL errors when connecting through a proxy or tunnel with a different hostname")))),(0,r.kt)("h4",{id:"settings-argument"},"Settings Argument"),(0,r.kt)("p",null,"Finally, the ",(0,r.kt)("inlineCode",{parentName:"p"},"settings")," argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"get_client")," is used to pass additional ClickHouse settings to the server for each\nclient request. Note that\nin most cases, users with ",(0,r.kt)("em",{parentName:"p"},"readonly"),"=",(0,r.kt)("em",{parentName:"p"},"1")," access cannot alter settings sent with a query, so ClickHouse Connect will drop\nsuch settings in the final request and log a warning.\nThe following settings apply only to HTTP queries/sessions used by ClickHouse Connect, and are not documented as general\nClickHouse settings."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Setting"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"buffer_size"),(0,r.kt)("td",{parentName:"tr",align:null},"Buffer size (in bytes) used by ClickHouse Server before writing to the HTTP channel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"session_id"),(0,r.kt)("td",{parentName:"tr",align:null},"A unique session id to associate related queries on the server. Required for temporary tables.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"compress"),(0,r.kt)("td",{parentName:"tr",align:null},'Whether the ClickHouse server should compress the POST response data. This setting should only be used for "raw" queries.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"decompress"),(0,r.kt)("td",{parentName:"tr",align:null},'Whether the data sent to ClickHouse server must be decompressed. This setting is should only be used for "raw" inserts.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"quota_key"),(0,r.kt)("td",{parentName:"tr",align:null},"The quota key associated with this requests. See the ClickHouse server documentation on quotas.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"session_check"),(0,r.kt)("td",{parentName:"tr",align:null},"Used to check the session status.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"session_timeout"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of seconds of inactivity before the identified by the session id will timeout and no longer be considered valid. Defaults to 60 seconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"wait_end_of_query"),(0,r.kt)("td",{parentName:"tr",align:null},"Buffers the entire response on the ClickHouse server. This setting is necessary to return summary information. It is set automatically when ",(0,r.kt)("em",{parentName:"td"},"send_progress"),"=",(0,r.kt)("em",{parentName:"td"},"True"),".")))),(0,r.kt)("p",null,"For other ClickHouse settings that can be sent with each query,\nsee ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/operations/settings/settings"},"the ClickHouse documentation"),"."),(0,r.kt)("h4",{id:"client-creation-examples"},"Client Creation Examples"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Without any parameters, a ClickHouse Connect client will connect to the default HTTP port on ",(0,r.kt)("inlineCode",{parentName:"li"},"localhost")," with the\ndefault user and no password:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import clickhouse_connect\n\nclient = clickhouse_connect.get_client()\nclient.server_version\nOut[2]: '22.10.1.98'\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Connecting to a secure (https) external ClickHouse server")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import clickhouse_connect\n\nclient = clickhouse_connect.get_client(host='play.clickhouse.com', secure=True, port=443, user='play', password='clickhouse')\nclient.command('SELECT timezone()')\nOut[2]: 'Etc/UTC'\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Connecting with a session id and other custom connection parameters and ClickHouse settings.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import clickhouse_connect\n\nclient = clickhouse_connect.get_client(host='play.clickhouse.com',\n                                       user='play',\n                                       password='clickhouse',\n                                       port=443,\n                                       session_id='example_session_1',\n                                       connect_timeout=15,\n                                       database='github',\n                                       settings={'distributed_ddl_task_timeout':300)\nclient.database\nOut[2]: 'github'\n")),(0,r.kt)("h3",{id:"common-method-arguments"},"Common Method Arguments"),(0,r.kt)("p",null,"Several client methods use one or both of the common ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"settings")," arguments. These keyword\narguments are described below."),(0,r.kt)("h4",{id:"parameters-argument"},"Parameters Argument"),(0,r.kt)("p",null,"ClickHouse Connect Client ",(0,r.kt)("inlineCode",{parentName:"p"},"query*")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"command")," methods accept an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters")," keyword argument used for\nbinding Python expressions to a ClickHouse value expression. Two sorts of binding are available."),(0,r.kt)("h5",{id:"server-side-binding"},"Server Side Binding"),(0,r.kt)("p",null,"ClickHouse supports ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/interfaces/http/#cli-queries-with-parameters"},"server side binding"),"\nfor most query values,\nwhere the bound value is sent separate from the query as an HTTP query parameter. ClickHouse Connect will add the\nappropriate\nquery parameters if it detects a binding expression of the form {","<","name",">",":","<","datatype",">","}. For server side\nbinding,\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters")," argument should be a Python dictionary."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Server Side Binding with Python Dictionary, DateTime value and string value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import datetime\n\nmy_date = datetime.datetime(2022, 10, 01, 15, 20, 5)\n\nparameters = {'table': 'my_table', v1': my_date, 'v2': \"a string with a single quote'\"}\nclient.query('SELECT * FROM {table:Identifier} WHERE date >= {v1:DateTime} AND string ILIKE {v2:String}', parameters=parameters)\n\n# Generates the following query on the server\n# SELECT * FROM my_table WHERE date >= '2022-10-01 15:20:05' AND string ILIKE 'a string with a single quote\\''\n")),(0,r.kt)("h5",{id:"client-side-binding"},"Client Side Binding"),(0,r.kt)("p",null,"ClickHouse Connect also supports client side parameter binding which can allow more flexibility in generating templated\nSQL queries. For client side binding, the ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters")," argument should be a dictionary or a sequence. Client side\nbinding\nuses the Python ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#old-string-formatting"},'"printf" style')," string\nformatting\nfor parameter substitution."),(0,r.kt)("p",null,"Note that unlike server side binding, client side binding doesn't work for database identifiers such as database, table,\nor column names, since Python style formatting can't distinguish between the different types of strings, and they\nneed to be formatted differently (backticks or double quotes for database identifiers, single quotes for data values)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example with Python Dictionary, DateTime value and string escaping")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import datetime\n\nmy_date = datetime.datetime(2022, 10, 01, 15, 20, 5)\n\nparameters = {'v1': my_date, 'v2': \"a string with a single quote'\"}\nclient.query('SELECT * FROM some_table WHERE date >= %(v1)s AND string ILIKE %(v2)s', parameters=parameters)\n\n# Generates the following query:\n# SELECT * FROM some_table WHERE date >= '2022-10-01 15:20:05' AND string ILIKE 'a string with a single quote\\''\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example with Python Sequence (Tuple), Float64, and IPv4Address")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import ipaddress\n\nparameters = (35200.44, ipaddress.IPv4Address(0x443d04fe))\nclient.query('SELECT * FROM some_table WHERE metric >= %s AND ip_address = %s', parameters=parameters)\n\n# Generates the following query:\n# SELECT * FROM some_table WHERE metric >= 35200.44 AND ip_address = '68.61.4.254''\n")),(0,r.kt)("h4",{id:"settings-argument-1"},"Settings Argument"),(0,r.kt)("p",null,"All the core SQL Client ClickHouse database server accept an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"settings")," keyword argument used for passing\nClickHouse server ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/operations/settings/settings"},"user settings")," for the included SQL\nstatement. The ",(0,r.kt)("inlineCode",{parentName:"p"},"settings")," argument should be a dictionary. Each item should be a ClickHouse setting name and its\nassociated value. Note that values will be converted to strings when sent to the server as query parameters."),(0,r.kt)("p",null,"As with client level settings, ClickHouse Connect will drop any settings that the server marks as ",(0,r.kt)("em",{parentName:"p"},"readonly"),"=",(0,r.kt)("em",{parentName:"p"},"1"),", with\nan associated log message. Settings that apply only to queries via the ClickHouse HTTP interface are always valid. Those\nsettings are described under the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_client")," ",(0,r.kt)("a",{parentName:"p",href:"#settings-argument"},"API"),"."),(0,r.kt)("p",null,"Example of using ClickHouse settings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"settings = {'merge_tree_min_rows_for_concurrent_read': 65535,\n            'session_id': 'session_1234',\n            'use_skip_indexes': False}\nclient.query(\"SELECT event_type, sum(timeout) FROM event_errors WHERE event_time > '2022-08-01'\", settings=settings)\n")),(0,r.kt)("h3",{id:"client-command-method"},"Client ",(0,r.kt)("em",{parentName:"h3"},"command")," Method"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Client.command")," method to send SQL queries to the ClickHouse Server that do not normally return data or return\na simple single value rather than a full dataset. This method takes the following parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cmd"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"A ClickHouse SQL statement that returns a single value or a single row of values.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"parameters"),(0,r.kt)("td",{parentName:"tr",align:null},"dict or iterable"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)("a",{parentName:"td",href:"#parameters-argument"},"parameters description"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},"str or bytes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional data to include with the command as the POST body.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"settings"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)("a",{parentName:"td",href:"#settings-argument"},"settings description"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"use_database"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"Use the client database (specified when creating the client). False means the command will use the default ClickHouse Server database for the connected user.")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"command")," can be used for DDL statements")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"client.command('CREATE TABLE test_command (col_1 String, col_2 DateTime) Engine MergeTree ORDER BY tuple()')\nclient.command('SHOW CREATE TABLE test_command')\nOut[6]: 'CREATE TABLE default.test_command\\\\n(\\\\n    `col_1` String,\\\\n    `col_2` DateTime\\\\n)\\\\nENGINE = MergeTree\\\\nORDER BY tuple()\\\\nSETTINGS index_granularity = 8192'\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"command")," can also be used for simple queries that return only a single row")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"result = client.command('SELECT count() FROM system.tables')\nresult\nOut[7]: 110\n")),(0,r.kt)("h3",{id:"client-query-method"},"Client ",(0,r.kt)("em",{parentName:"h3"},"query")," Method"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Client.query"),' method is the primary way to retrieve a single "batch" dataset from the ClickHouse Server. It\nutilizes the Native\nClickHouse format over HTTP to transmit large datasets (up to approximately one million rows) efficiently. This method\ntakes the following parameters.'),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"The ClickHouse SQL SELECT or DESCRIBE query.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"parameters"),(0,r.kt)("td",{parentName:"tr",align:null},"dict or iterable"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)("a",{parentName:"td",href:"#parameters-argument"},"parameters description"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"settings"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)("a",{parentName:"td",href:"#settings-argument"},"settings description"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query_formats"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Datatype formatting specification for result values. See Advanced Usage (Read Formats)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"column_formats"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Datatype formatting per column. See Advanced Usage (Read Formats)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"encoding"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Encoding used to encode ClickHouse String columns into Python strings.  Python defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"UTF-8")," if not set.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"use_none"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"Use Python ",(0,r.kt)("em",{parentName:"td"},"None")," type for ClickHouse nulls. If False, use a datatype default (such as 0) for ClickHouse nulls. Note - defaults to False for numpy/Pandas for performance reasons.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"column_oriented"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"Return the results as a sequence of columns rather than a sequence of rows.  Helpful for transforming Python data to other column oriented data formats.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query_tz"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"A timezone name from the zoneinfo database.  This timezone will be applied to all datetime or Pandas Timestamp objects returned by the query.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"column_tzs"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"A dictionary of column name to timezone name.  Like ",(0,r.kt)("inlineCode",{parentName:"td"},"query_tz"),", but allows specifying different timezones for different columns.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"use_na_values"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"Use Pandas missing types such as pandas.NA and pandas.NaT for ClickHouse NULL values.  Only relevant to the ",(0,r.kt)("inlineCode",{parentName:"td"},"query_df")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"query_df_stream")," methods.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"context"),(0,r.kt)("td",{parentName:"tr",align:null},"QueryContext"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"A reusable QueryContext object can be used to encapsulate the above method arguments. See ",(0,r.kt)("a",{parentName:"td",href:"#querycontexts"},"Advanced Queries (QueryContexts)"))))),(0,r.kt)("h4",{id:"the-queryresult-object"},"The QueryResult Object"),(0,r.kt)("p",null,"The base ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," method returns a QueryResult object with the following public properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result_rows")," -- A matrix of the data returned in the form of a Sequence of rows, with each row element being a\nsequence of column values."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result_columns")," -- A matrix of the data returned in the form of a Sequence of columns, with each column element being\na\nsequence of the row values for that column"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"column_names")," -- A tuple of strings representing the column names in the ",(0,r.kt)("inlineCode",{parentName:"li"},"result_set")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"column_types")," -- A tuple of ClickHouseType instances representing the ClickHouse data type for each column in\nthe ",(0,r.kt)("inlineCode",{parentName:"li"},"result_columns")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query_id")," -- The ClickHouse query_id (useful for examining the query in the ",(0,r.kt)("inlineCode",{parentName:"li"},"system.query_log")," table)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"summary")," -- Any data returned by the ",(0,r.kt)("inlineCode",{parentName:"li"},"X-ClickHouse-Summary")," HTTP response header"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"first_item")," -- A convenience property for retrieving the first row of the response as a dictionary (keys are column\nnames)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"first_row")," -- A convenience property to return the first row of the result"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"column_block_stream")," -- A generator of query results in column oriented format. This property should not be\nreferenced directly (see below)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"row_block_stream")," -- A generator of query results in row oriented format. This property should not be referenced\ndirectly (see below)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rows_stream")," -- A generator of query results that yields a single row per invocation. This property should not be\nreferenced directly (see below).")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"*_stream")," properties return a Python Context that can be used as an iterator for the returned data. They should\nonly be\naccessed indirectly using the Client ",(0,r.kt)("inlineCode",{parentName:"p"},"*_stream")," methods. In a future release, the QueryResult object returned by the\nmain Client ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),"\nmethod will have consumed the stream and contain the entire populated ",(0,r.kt)("inlineCode",{parentName:"p"},"result_set"),' to provide a clean separation between\ncompleted, "batch" results retrieved via the Client ',(0,r.kt)("inlineCode",{parentName:"p"},"query")," method and streaming results retrieved via the\nClient ",(0,r.kt)("inlineCode",{parentName:"p"},"query_*_stream")," methods."),(0,r.kt)("p",null,"The complete details of streaming query results (using StreamContext objects) are outlined in\n",(0,r.kt)("a",{parentName:"p",href:"#streaming-queries"},"Advanced Queries (Streaming Queries)"),"."),(0,r.kt)("p",null,"Note -- streaming behavior from versions v0.5.0-v0.5.3 using the QueryResult object as a Python context is deprecated as\nversion v0.5.4\nand will be removed in a future release. The QueryResult methods ",(0,r.kt)("inlineCode",{parentName:"p"},"stream_column_blocks"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"stream_row_blocks"),",\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"stream_rows"),"\nshould not be used and are only included for backward compatibility."),(0,r.kt)("h3",{id:"specialized-client-query-methods"},"Specialized Client Query Methods"),(0,r.kt)("p",null,"There are three specialized versions of the main ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," method:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query_np")," -- This version returns a Numpy Array instead a ClickHouse Connect QueryResult."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query_df")," -- This version returns a Pandas Dataframe instead of a ClickHouse Connect QueryResult."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query_arrow")," -- This version returns a PyArrow Table. It utilizes the ClickHouse ",(0,r.kt)("inlineCode",{parentName:"li"},"Arrow")," format directly, so\nit only accepts three arguments in common with the main ",(0,r.kt)("inlineCode",{parentName:"li"},"query method"),":  ",(0,r.kt)("inlineCode",{parentName:"li"},"query"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"parameters"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"settings"),". In\naddition there is additional argument ",(0,r.kt)("inlineCode",{parentName:"li"},"use_strings")," which determines whether the Arrow Table will render ClickHouse\nString types as strings (if True) or bytes (if False).")),(0,r.kt)("h3",{id:"client-streaming-query-methods"},"Client Streaming Query Methods"),(0,r.kt)("p",null,"The ClickHouse Connect Client provides multiple methods for retrieving data as a stream (implemented as a Python\ngenerator):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query_column_block_stream")," -- Returns query data in blocks as a sequence of columns using native Python object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query_column_rows_stream")," -- Returns query data as a block of rows using native Python object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query_rows_stream")," -- Returns query data as a sequence of rows using native Python object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query_np_stream")," -- Returns each ClickHouse block of query data as a Numpy array"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query_df_stream")," -- Returns each ClickHouse Block of query data as a Pandas Dataframe")),(0,r.kt)("p",null,"Each of these methods returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"ContextStream")," object that must be opened via a ",(0,r.kt)("inlineCode",{parentName:"p"},"with")," statement to start consuming the\nstream.\nSee ",(0,r.kt)("a",{parentName:"p",href:"#streaming-queries"},"Advanced Queries (Streaming Queries)"),"\nfor details and examples."),(0,r.kt)("h3",{id:"client-insert-method"},"Client ",(0,r.kt)("em",{parentName:"h3"},"insert")," Method"),(0,r.kt)("p",null,"For the common use case of inserting multiple records into ClickHouse, there is the ",(0,r.kt)("inlineCode",{parentName:"p"},"Client.insert")," method. It takes the\nfollowing parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"table"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"The ClickHouse table to insert into. The full table name (including database) is permitted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},"Sequence of Sequences"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"The matrix of data to insert, either a Sequence of rows, each of which is a sequence of column values, or a Sequence of columns, each of which is a sequence of row values.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"column_names"),(0,r.kt)("td",{parentName:"tr",align:null},"Sequence of str, or str"),(0,r.kt)("td",{parentName:"tr",align:null},"'*'"),(0,r.kt)("td",{parentName:"tr",align:null},"A list of column_names for the data matrix. If '*' is used instead, ClickHouse Connect will execute a \"pre-query\" to retrieve all of the column names for the table.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},"''"),(0,r.kt)("td",{parentName:"tr",align:null},"The target database of the insert. If not specified, the database for the client will be assumed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"column_types"),(0,r.kt)("td",{parentName:"tr",align:null},"Sequence of ClickHouseType"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},'A list of ClickHouseType instances. If neither column_types or column_type_names is specified, ClickHouse Connect will execute a "pre-query" to retrieve all the column types for the table.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"column_type_names"),(0,r.kt)("td",{parentName:"tr",align:null},"Sequence of ClickHouse type names"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},'A list of ClickHouse datatype names. If neither column_types or column_type_names is specified, ClickHouse Connect will execute a "pre-query" to retrieve all the column types for the table.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"column_oriented"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"If True, the ",(0,r.kt)("inlineCode",{parentName:"td"},"data"),' argument is assume to be a Sequence of columns (and no "pivot" will be necessary to insert the data). Otherwise ',(0,r.kt)("inlineCode",{parentName:"td"},"data")," is interpreted as a Sequence of rows.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"settings"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)("a",{parentName:"td",href:"#settings-argument"},"settings description"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"insert_context"),(0,r.kt)("td",{parentName:"tr",align:null},"InsertContext"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"A reusable InsertContext object can be used to encapsulate the above method arguments.  See ",(0,r.kt)("a",{parentName:"td",href:"#insertcontexts"},"Advanced Inserts (InsertContexts)"))))),(0,r.kt)("p",null,"This method does not return a value. An exception will be raised if the insert fails for any reason."),(0,r.kt)("p",null,"There are two specialized versions of the main ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," method:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"insert_df")," -- Instead of Python Sequence of Sequences ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," argument, the second parameter of this method requires\na ",(0,r.kt)("inlineCode",{parentName:"li"},"df"),"\nargument that must be a Pandas Dataframe instance. ClickHouse Connect automatically processes the Dataframe as a\ncolumn oriented datasource,\nso the ",(0,r.kt)("inlineCode",{parentName:"li"},"column_oriented")," parameter is not required or available."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"insert_arrow")," -- Instead of a Python Sequence of Sequences ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," argument, this method requires an ",(0,r.kt)("inlineCode",{parentName:"li"},"arrow_table"),".\nClickHouse\nConnect passes the Arrow table unmodified to the ClickHouse server for processing, so only the ",(0,r.kt)("inlineCode",{parentName:"li"},"database"),"\nand ",(0,r.kt)("inlineCode",{parentName:"li"},"settings")," arguments\nare available in addition to ",(0,r.kt)("inlineCode",{parentName:"li"},"table")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"arrow_table"),".")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note:")," A Numpy array is a valid Sequence of Sequences and can be used as the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," argument to the main ",(0,r.kt)("inlineCode",{parentName:"p"},"insert"),"\nmethod, so a specialized\nmethod is not required."),(0,r.kt)("h3",{id:"file-inserts"},"File Inserts"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"clickhouse_connect.driver.tools")," includes the ",(0,r.kt)("inlineCode",{parentName:"p"},"insert_file")," method that allows inserting data directly from the\nfile system\ninto an existing ClickHouse table. Parsing is delegated to the ClickHouse server.  ",(0,r.kt)("inlineCode",{parentName:"p"},"insert_file")," accepts the following\nparameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"client"),(0,r.kt)("td",{parentName:"tr",align:null},"Client"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"driver.Client")," used to perform the insert")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"table"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"The ClickHouse table to insert into. The full table name (including database) is permitted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"file_path"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"The native file system path to the data file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fmt"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},"CSV, CSVWithNames"),(0,r.kt)("td",{parentName:"tr",align:null},"The ClickHouse Input Format of the file.  CSVWithNames is assumed if ",(0,r.kt)("inlineCode",{parentName:"td"},"column_names")," is not provided")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"column_names"),(0,r.kt)("td",{parentName:"tr",align:null},"Sequence of str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"A list of column_names in the data file.  Not required for formats that include column names")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Database of the table.  Ignored if the table is fully qualified.  If not specified, the insert will use the client database")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"settings"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)("a",{parentName:"td",href:"#settings-argument"},"settings description"),".")))),(0,r.kt)("p",null,"For files with inconsistent data or date/time values in an unusual format, settings that apply to data imports (such as\n",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_allow_errors_num")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"input_format_allow_errors_num"),") are recognized for this method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import clickhouse_connect\nfrom clickhouse_connect.driver.tools import insert_file\n\nclient = clickhouse_connect.get_client()\ninsert_file(client, 'example_table', 'my_data.csv',\n            settings={'input_format_allow_errors_ratio': .2,\n                      'input_format_allow_errors_num': 5})\n")),(0,r.kt)("h3",{id:"raw-api"},"Raw API"),(0,r.kt)("p",null,"For use cases which do not require transformation between ClickHouse data and native or third party data types and\nstructures,\nthe ClickHouse Connect client provides two methods for direct usage of the ClickHouse connection."),(0,r.kt)("h4",{id:"client-raw_query-method"},"Client ",(0,r.kt)("em",{parentName:"h4"},"raw_query")," Method"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Client.raw_query")," method allows direct usage of the ClickHouse HTTP query interface using the client connection.\nThe\nreturn value is an unprocessed ",(0,r.kt)("inlineCode",{parentName:"p"},"bytes")," object. It offers a convenient wrapper with parameter binding, error handling,\nretries, and settings management using a minimal interface:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"Any valid ClickHouse query")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"parameters"),(0,r.kt)("td",{parentName:"tr",align:null},"dict or iterable"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)("a",{parentName:"td",href:"#parameters-argument"},"parameters description"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"settings"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)("a",{parentName:"td",href:"#settings-argument"},"settings description"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fmt"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse Output Format for the resulting bytes.  (ClickHouse uses TSV if not specified)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"use_database"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"Use the clickhouse-connect Client assigned database for the query context")))),(0,r.kt)("p",null,"It is the caller's responsibility to handle the resulting ",(0,r.kt)("inlineCode",{parentName:"p"},"bytes")," object. Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Client.query_arrow")," is just a\nthin wrapper\naround this method using the ClickHouse ",(0,r.kt)("inlineCode",{parentName:"p"},"Arrow")," output format."),(0,r.kt)("h4",{id:"client-raw_insert-method"},"Client ",(0,r.kt)("em",{parentName:"h4"},"raw_insert")," Method"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Client.raw_insert")," method allows direct inserts of ",(0,r.kt)("inlineCode",{parentName:"p"},"bytes")," objects or ",(0,r.kt)("inlineCode",{parentName:"p"},"bytes")," object generators using the client\nconnection. Because it does no processing of the insert payload, it is highly performant. The method provides options\nto specify settings and insert format:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"table"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"Either the simple or database qualified table name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"column_names"),(0,r.kt)("td",{parentName:"tr",align:null},"Sequence","[str]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"Column names for the insert block.  Required if the ",(0,r.kt)("inlineCode",{parentName:"td"},"fmt")," parameter does not include names")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"insert_block"),(0,r.kt)("td",{parentName:"tr",align:null},"str, bytes, Generator","[bytes]",", BinaryIO"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"Data to insert.  Strings will be encoding with the client encoding.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"settings"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"See ",(0,r.kt)("a",{parentName:"td",href:"#settings-argument"},"settings description"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fmt"),(0,r.kt)("td",{parentName:"tr",align:null},"str"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse Input Format of the ",(0,r.kt)("inlineCode",{parentName:"td"},"insert_block")," bytes.  (ClickHouse uses TSV if not specified)")))),(0,r.kt)("p",null,"It is the caller's responsibility that the ",(0,r.kt)("inlineCode",{parentName:"p"},"insert_block")," is in the specified format. ClickHouse Connect uses these raw\ninserts for file uploads and PyArrow Tables, delegating parsing to the ClickHouse server."),(0,r.kt)("h2",{id:"querying-data-with-clickhouse-connect--advanced-usage"},"Querying Data with ClickHouse Connect:  Advanced Usage"),(0,r.kt)("h3",{id:"querycontexts"},"QueryContexts"),(0,r.kt)("p",null,"ClickHouse Connect executes standard queries within a QueryContext.  The QueryContext contains the key structures that are used\nto build queries against the ClickHouse database, and the configuration used to process the result into a QueryResult or other\nresponse data structure.  That includes the query itself, parameters, settings, read formats, and other properties."),(0,r.kt)("p",null,"A QueryContext can be acquired using the client ",(0,r.kt)("inlineCode",{parentName:"p"},"create_query_context")," method.  This method takes the same parameters\nas the core query method.  This query context can then be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"query_df"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"query_np")," methods as the ",(0,r.kt)("inlineCode",{parentName:"p"},"context"),"\nkeyword argument instead of any or all of the other arguments to those methods.  Note that additional arguments specified for the\nmethod call will override any properties of QueryContext."),(0,r.kt)("p",null,"The clearest use case for a QueryContext is to send the same query with different binding parameter values.  All parameter values can\nbe updated by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryContext.set_parameters")," method with a dictionary, or any single value can be updated by calling\n",(0,r.kt)("inlineCode",{parentName:"p"},"QueryContext.set_parameter")," with the desired ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," pair."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"client.create_query_context(query='SELECT value1, value2 FROM data_table WHERE key = {k:Int32}',\n                            parameters={'k': 2},\n                            column_oriented=True)\nresult = client.query(context=qc)\nassert result.result_set[1][0] == 'second_value2'\nqc.set_parameter('k', 1)\nresult = test_client.query(context=qc)\nassert result.result_set[1][0] == 'first_value2'\n")),(0,r.kt)("p",null,"Note that QueryContexts are not thread safe, but a copy can be obtained in a multithreaded environment by calling the\n",(0,r.kt)("inlineCode",{parentName:"p"},"QueryContext.updated_copy")," method."),(0,r.kt)("h3",{id:"streaming-queries"},"Streaming Queries"),(0,r.kt)("h4",{id:"data-blocks"},"Data Blocks"),(0,r.kt)("p",null,"ClickHouse Connect processes all data from the primary ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),' method as a stream of blocks received from the ClickHouse server.\nThese blocks are transmitted in the custom "Native" format to and from ClickHouse. A "block" is simply a sequence of columns of binary data,\nwhere each column contains an equal number of data values of the specified data type. (As a columnar database, ClickHouse stores this data\nin a similar form.)  The size of a block returned from a query is governed by two user settings that can be set at several levels\n(user profile, user, session, or query).  They are:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size"},"max_block_size")," -- Limit on the size of the block in rows.  Default 65536."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/operations/settings/settings/#preferred-block-size-bytes"},"preferred_block_size_bytes")," -- Soft limit on the size of the block in bytes.  Default 1,000,0000.")),(0,r.kt)("p",null,"Regardless of the ",(0,r.kt)("inlineCode",{parentName:"p"},"preferred_block_size_setting"),", each block will never be more than ",(0,r.kt)("inlineCode",{parentName:"p"},"max_block_size")," rows.  Depending on the\ntype of query, the actual blocks returned can be of any size.  For example, queries to a distributed table covering many shards\nmay contain smaller blocks retrieved directly from each shard."),(0,r.kt)("p",null,"When using one of the Client ",(0,r.kt)("inlineCode",{parentName:"p"},"query_*_stream")," methods, results are returned on a block by block basis.  ClickHouse Connect only\nloads a single block at a time.  This allows processing large amounts of data without the need to load all of a large result\nset into memory.  Note the application should be prepared to process any number of blocks and the exact size of each block\ncannot be controlled."),(0,r.kt)("h4",{id:"streamcontexts"},"StreamContexts"),(0,r.kt)("p",null,"Each of the ",(0,r.kt)("inlineCode",{parentName:"p"},"query_*_stream")," methods (like ",(0,r.kt)("inlineCode",{parentName:"p"},"query_row_block_stream"),") returns a ClickHouse ",(0,r.kt)("inlineCode",{parentName:"p"},"StreamContext")," object, which\nis a combined Python context/generator.  This is the basic usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"with client.query_row_block_stream('SELECT pickup, dropoff, pickup_longitude, pickup_latitude FROM taxi_trips') as stream:\n    for block in stream:\n        for row in block:\n            <do something with each row of Python trip data>\n")),(0,r.kt)("p",null,"Note that trying to use a StreamContext without a ",(0,r.kt)("inlineCode",{parentName:"p"},"with")," statement will raise an error.  The use of a Python context ensures\nthat the stream (in this case, a streaming HTTP response) will be properly closed even if not all the data is consumed and/or\nan exception is raised during processing.  Also, StreamContexts can only be used once to consume the stream.  Trying to use a StreamContext\nafter it has exited will produce a ",(0,r.kt)("inlineCode",{parentName:"p"},"StreamClosedError"),"."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," property of the StreamContext to access the parent ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryResult")," object, which includes column names\nand types."),(0,r.kt)("h4",{id:"stream-types"},"Stream Types"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"query_column_block_stream")," method returns the block as a sequence of column data stored as native Python data types.  Using\nthe above ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi_trips")," queries, the data returned will be a list where each element of the list is another list (or tuple)\ncontaining all the data for the  associated column.  So ",(0,r.kt)("inlineCode",{parentName:"p"},"block[0]")," would be a tuple containing nothing but strings.  Column\noriented formats are most used for doing aggregate operations for all the values in a column, like adding up total fairs."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"query_row_block_stream")," method returns the block as a sequence of rows like a traditional relational database.  For taxi\ntrips, the data returned will be a list where each element of the list is another list representing a row of data.  So ",(0,r.kt)("inlineCode",{parentName:"p"},"block[0]"),"\nwould contain all the fields (in order) for the first taxi trip , ",(0,r.kt)("inlineCode",{parentName:"p"},"block[1]")," would contain a row for all the fields in\nthe second taxi trip, and so on.  Row oriented results are normally used for display or transformation processes."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"query_row_stream")," is a convenience method that automatically moves to the next block when iterating through the stream.\nOtherwise, it is identical to ",(0,r.kt)("inlineCode",{parentName:"p"},"query_row_block_stream"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"query_np_stream"),' method return each block as a two-dimensional Numpy Array.  Internally Numpy arrays are (usually) stored as columns,\nso no distinct row or column methods are needed.  The "shape" of the numpy array will be expressed as (columns, rows).  The Numpy\nlibrary provides many methods of manipulating numpy arrays.  Note that if all columns in the query share the same Numpy dtype,\nthe returned numpy array will only have one dtype as well, and can be reshaped/rotated without actually changing its internal structure.'),(0,r.kt)("p",null,"Finally, the ",(0,r.kt)("inlineCode",{parentName:"p"},"query_df_stream")," method returns each ClickHouse Block as a two-dimensional Pandas Dataframe.  Here's an example\nwhich shows that the StreamContext object can be used as a context in a deferred fashion (but only once)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df_stream = client.query_df_stream('SELECT * FROM hits')\ncolumn_names = df_stream.source.column_names\nwith df_stream:\n    for df in df_stream:\n        <do something with the pandas DataFrame>\n")),(0,r.kt)("h3",{id:"read-formats"},"Read Formats"),(0,r.kt)("p",null,"Read formats control the data types of values returned from the client ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"query_np"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"query_df")," methods.  (The ",(0,r.kt)("inlineCode",{parentName:"p"},"raw_query"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"query_arrow")," do not modify incoming data from ClickHouse, so format control does not apply.)  For example, if the read format\nfor a UUID is changed from the default ",(0,r.kt)("inlineCode",{parentName:"p"},"native")," format to the alternative ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," format, a ClickHouse query of ",(0,r.kt)("inlineCode",{parentName:"p"},"UUID")," column will be\nreturned as string values (using the standard 8-4-4-4-12 RFC 1422 format) instead of Python UUID objects."),(0,r.kt)("p",null,'The "data type" argument for any formatting function can include wildcards.  The format is a single lower case string.'),(0,r.kt)("p",null,"Read formats can be set at several levels:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Globally, using the methods defined in the ",(0,r.kt)("inlineCode",{parentName:"li"},"clickhouse_connect.datatypes.format")," package.  This will control the format of the\nconfigured datatype for all queries.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clickhouse_connect.datatypes.format import set_read_format\n\n# Return both IPv6 and IPv4 values as strings\nset_read_format('IPv*', 'string')\n\n# Return all Date types as the underlying epoch second or epoch day\nset_read_format('Date*', 'int')\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For an entire query, using the optional ",(0,r.kt)("inlineCode",{parentName:"li"},"query_formats")," dictionary argument.  In that case any column (or subcolumn) of the\nspecified data types(s) will use the configured format.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Return any UUID column as a string\nclient.query('SELECT user_id, user_uuid, device_uuid from users', query_formats={'UUID': 'string'})\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For the values in a specific column, using the optional ",(0,r.kt)("inlineCode",{parentName:"li"},"column_formats"),' dictionary argument.  The key is the column named as\nreturn by ClickHouse, and format for the data column or a second level "format" dictionary of a ClickHouse type name and a value\nof query formats.  This secondary dictionary can be used for nested column types such as Tuples or Maps.')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Return IPv6 values in the `dev_address` column as strings\nclient.query('SELECT device_id, dev_address, gw_address from devices', column_formats={'dev_address', 'string'})\n")),(0,r.kt)("h4",{id:"read-format-options-python-types"},"Read Format Options (Python Types)"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ClickHouse Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Native Python Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Read Formats"),(0,r.kt)("th",{parentName:"tr",align:null},"Comments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int","[8-64]",", UInt","[8-32]"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt64"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"signed"),(0,r.kt)("td",{parentName:"tr",align:null},"Superset does not currently handle large unsigned UInt64 values")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[U]","Int","[128,256]"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Pandas and Numpy int values are 64 bits maximum, so these can be returned as strings")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Float32"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"All Python floats are 64 bits internally")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Float64"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Decimal"),(0,r.kt)("td",{parentName:"tr",align:null},"decimal.Decimal"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FixedString"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"FixedStrings are fixed size byte arrays, but sometimes are treated as Python strings")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Enum","[8,16]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string, int"),(0,r.kt)("td",{parentName:"tr",align:null},"Python enums don't accept empty strings, so all enums are rendered as either strings or the underlying int value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date"),(0,r.kt)("td",{parentName:"tr",align:null},"datetime.date"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse stores Dates as days since 01/01/1970.  This value is available as an int")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date32"),(0,r.kt)("td",{parentName:"tr",align:null},"datetime.date"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Same as Date, but for a wider range of dates")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DateTime"),(0,r.kt)("td",{parentName:"tr",align:null},"datetime.datetime"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse stores DateTime in epoch seconds.  This value is available as an int")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DateTime64"),(0,r.kt)("td",{parentName:"tr",align:null},"datetime.datetime"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Python datetime.datetime is limited to microsecond precision. The raw 64 bit int value is available")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IPv4"),(0,r.kt)("td",{parentName:"tr",align:null},"ipaddress.IPv4Address"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"IP addresses can be read as strings and properly formatted strings can be inserted as IP addresses")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IPv6"),(0,r.kt)("td",{parentName:"tr",align:null},"ipaddress.IPv6Address"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"IP addresses can be read as strings and properly formatted can be inserted as IP addresses")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tuple"),(0,r.kt)("td",{parentName:"tr",align:null},"dict or tuple"),(0,r.kt)("td",{parentName:"tr",align:null},"tuple, json"),(0,r.kt)("td",{parentName:"tr",align:null},"Named tuples returned as dictionaries by default.  Named tuples can also be returned as JSON strings")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nested"),(0,r.kt)("td",{parentName:"tr",align:null},"Sequence","[dict]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UUID"),(0,r.kt)("td",{parentName:"tr",align:null},"uuid.UUID"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"UUIDs can be read as strings formatted as per RFC 4122")))),(0,r.kt)("h2",{id:"inserting-data-with-clickhouse-connect--advanced-usage"},"Inserting Data with ClickHouse Connect:  Advanced Usage"),(0,r.kt)("h3",{id:"insertcontexts"},"InsertContexts"),(0,r.kt)("p",null,"ClickHouse Connect executes all inserts within an InsertContext.  The InsertContext includes  all the values sent as arguments to\nthe client ",(0,r.kt)("inlineCode",{parentName:"p"},"insert"),' method.  In addition, when an InsertContext is originally constructed, ClickHouse Connect retrieves the data types\nfor the insert columns required for efficient Native format inserts.  By reusing the  InsertContext for multiple inserts, this "pre-query"\nis avoided and inserts are executed more quickly and efficiently.'),(0,r.kt)("p",null,"An InsertContext can be acquired using the client ",(0,r.kt)("inlineCode",{parentName:"p"},"get_insert_context")," method.  The method takes the same arguments as\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"insert")," function.  Note that only the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," property of InsertContexts should be modified for reuse.  This is consistent\nwith its intended purpose of providing a reusable object for repeated inserts of new data to the same table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"test_data = [[1, 'v1', 'v2'], [2, 'v3', 'v4']]\nic = test_client.create_insert_context(table='test_table', data='test_data')\nclient.insert(context=ic)\nassert client.command('SELECT count() FROM test_table') == 2\nnew_data = [[3, 'v5', 'v6'], [4, 'v7', 'v8']]\nic.data = new_data\nclient.insert(context=ic)\nqr = test_client.query('SELECT * FROM test_table ORDER BY key DESC')\nassert qr.row_count == 4\nassert qr[0][0] == 4\n")),(0,r.kt)("p",null,"InsertContexts include mutable state that is updated during the insert process, so they are not thread safe."),(0,r.kt)("h3",{id:"write-formats"},"Write Formats"),(0,r.kt)("p",null,"Write formats are currently implemented for limited number of types.  In most cases ClickHouse Connect will attempt to\nautomatically determine the correct write format for a column by checking the type of the first (non-null) data value.\nFor example, if inserting into a DateTime column, and the first insert value of the column is a Python integer, ClickHouse\nConnect will directly insert the integer value under the assumption that it's actually an epoch second."),(0,r.kt)("p",null,"In most cases, it is unnecessary to override the write format for a data type, but the associated methods in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"clickhouse_connect.datatypes.format")," package can be used to do so at a global level."),(0,r.kt)("h4",{id:"write-format-options"},"Write Format Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ClickHouse Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Native Python Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Write Formats"),(0,r.kt)("th",{parentName:"tr",align:null},"Comments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int","[8-64]",", UInt","[8-32]"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UInt64"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[U]","Int","[128,256]"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Float32"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Float64"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Decimal"),(0,r.kt)("td",{parentName:"tr",align:null},"decimal.Decimal"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FixedString"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"If inserted as a string, additional bytes will be set to zeros")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Enum","[8,16]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date"),(0,r.kt)("td",{parentName:"tr",align:null},"datetime.date"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},'ClickHouse stores Dates as days since 01/01/1970.  int types will be assumed to be this "epoch date" value')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date32"),(0,r.kt)("td",{parentName:"tr",align:null},"datetime.date"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Same as Date, but for a wider range of dates")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DateTime"),(0,r.kt)("td",{parentName:"tr",align:null},"datetime.datetime"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},'ClickHouse stores DateTime in epoch seconds.  int types will be assumed to be this "epoch second" value')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DateTime64"),(0,r.kt)("td",{parentName:"tr",align:null},"datetime.datetime"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Python datetime.datetime is limited to microsecond precision. The raw 64 bit int value is available")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IPv4"),(0,r.kt)("td",{parentName:"tr",align:null},"ipaddress.IPv4Address"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Properly formatted strings can be inserted as IPv4 addresses")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IPv6"),(0,r.kt)("td",{parentName:"tr",align:null},"ipaddress.IPv6Address"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Properly formatted strings can be inserted as IPv6 addresses")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tuple"),(0,r.kt)("td",{parentName:"tr",align:null},"dict or tuple"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nested"),(0,r.kt)("td",{parentName:"tr",align:null},"Sequence","[dict]"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSON/Object('json')"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Either dictionaries or JSON strings can be inserted into JSON Columns.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"UUID"),(0,r.kt)("td",{parentName:"tr",align:null},"uuid.UUID"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Properly formatted strings can be inserted as ClickHouse UUIDs")))),(0,r.kt)("h2",{id:"additional-options"},"Additional Options"),(0,r.kt)("p",null,"ClickHouse Connect provides a number of additional options for advanced use cases"),(0,r.kt)("h3",{id:"global-settings"},"Global Settings"),(0,r.kt)("p",null,"There are a small number of settings that control ClickHouse Connect behavior globally.  They are accessed from the top\nlevel ",(0,r.kt)("inlineCode",{parentName:"p"},"common")," package:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from clickhouse_connect import common\n\ncommon.set_setting('autogenerate_session_id', False)\ncommon.get_setting('invalid_setting_action')\n'drop'\n")),(0,r.kt)("p",null,"Four global settings are currently defined:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Setting Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Options"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"autogenerate_session_id"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"True, False"),(0,r.kt)("td",{parentName:"tr",align:null},"Autogenerate a new UUID(1) session id (if not provided) for each client session.  If no session id is provided (either at the client or query level, ClickHouse will generate random internal id for each query")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"invalid_setting_action"),(0,r.kt)("td",{parentName:"tr",align:null},"'error'"),(0,r.kt)("td",{parentName:"tr",align:null},"'drop', 'send', 'error'"),(0,r.kt)("td",{parentName:"tr",align:null},"Action to take when an invalid or readonly setting is provided (either for the client session or query).  If ",(0,r.kt)("inlineCode",{parentName:"td"},"drop"),", the setting will be ignored, if ",(0,r.kt)("inlineCode",{parentName:"td"},"send"),", the setting will be sent to ClickHouse, if ",(0,r.kt)("inlineCode",{parentName:"td"},"error")," a client side ProgrammingError will be raised")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dict_parameter_format"),(0,r.kt)("td",{parentName:"tr",align:null},"'json'"),(0,r.kt)("td",{parentName:"tr",align:null},"'json', 'map'"),(0,r.kt)("td",{parentName:"tr",align:null},"This controls whether parameterized queries convert a Python dictionary to JSON or ClickHouse Map syntax. ",(0,r.kt)("inlineCode",{parentName:"td"},"json")," should be used for inserts into JSON columns, ",(0,r.kt)("inlineCode",{parentName:"td"},"map")," for ClickHouse Map columns")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"product_name"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"A string that is passed with the query to clickhouse for tracking the app using ClickHouse Connect.  Should be in the form ","<","product name;&gl/","<","product version",">")))),(0,r.kt)("h3",{id:"compression"},"Compression"),(0,r.kt)("p",null,"ClickHouse Connect supports lz4, zstd, brotli, and gzip compression for both query results and inserts.  Always keep in mind\nthat using compression usually involves a tradeoff between network bandwidth/transfer speed against CPU usage (both on the\nclient and the server.)"),(0,r.kt)("p",null,"To receive compressed data, the ClickHouse server ",(0,r.kt)("inlineCode",{parentName:"p"},"enable_http_compression"),' must be set to 1, or the user must have\npermission to change the setting on a "per query" basis.'),(0,r.kt)("p",null,"Compression is controlled by the ",(0,r.kt)("inlineCode",{parentName:"p"},"compress")," parameter when calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"clickhouse_connect.get_client")," factory method.\nBy default, ",(0,r.kt)("inlineCode",{parentName:"p"},"compress")," is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),", which will trigger the default compression settings.  For queries executed\nwith the ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"query_np"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"query_df")," client methods,  ClickHouse Connect will add the ",(0,r.kt)("inlineCode",{parentName:"p"},"Accept-Encoding")," header with\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"lz4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"zstd"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"br")," (brotli, if the brotli library is installed), ",(0,r.kt)("inlineCode",{parentName:"p"},"gzip"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"deflate")," encodings to queries executed\nwith the ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," client method (and indirectly, ",(0,r.kt)("inlineCode",{parentName:"p"},"query_np")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"query_df"),".  (For the majority of requests the ClickHouse\nserver will return with a ",(0,r.kt)("inlineCode",{parentName:"p"},"zstd")," compressed payload.)  For inserts, by default ClickHouse Connect will compress insert\nblocks with ",(0,r.kt)("inlineCode",{parentName:"p"},"lz4")," compression, and send the ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Encoding: lz4")," HTTP header."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"get_client")," ",(0,r.kt)("inlineCode",{parentName:"p"},"compress")," parameter can also be set to a specific compression method, one of ",(0,r.kt)("inlineCode",{parentName:"p"},"lz4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"zstd"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"br"),", or\n",(0,r.kt)("inlineCode",{parentName:"p"},"gzip"),".  That method will then be used for both inserts and query results (if supported by the ClickHouse server.)  The required\n",(0,r.kt)("inlineCode",{parentName:"p"},"zstd")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lz4")," compression libraries are now installed by default with ClickHouse Connect.  If ",(0,r.kt)("inlineCode",{parentName:"p"},"br"),"/brotli is specified,\nthe brotli library must be installed separately."),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"raw*")," client methods don't use the compression specified by the client configuration."),(0,r.kt)("p",null,"We also recommend against using ",(0,r.kt)("inlineCode",{parentName:"p"},"gzip")," compression, as it is significantly slower than the alternatives for both compressing\nand decompressing data."),(0,r.kt)("h3",{id:"http-proxy-support"},"HTTP Proxy Support"),(0,r.kt)("p",null,"ClickHouse Connect adds basic HTTP proxy support using the urllib3 library.  It recognizes the standard ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP_PROXY")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"HTTPS_PROXY")," environment variables.  Note that using these environment variables will apply to any client created with the\n",(0,r.kt)("inlineCode",{parentName:"p"},"clickhouse_connect.get_client")," method.  Alternatively, to configure per client, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"http_proxy")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"https_proxy"),"\narguments to the get_client method. For details on the implementation of HTTP Proxy support, see the ",(0,r.kt)("a",{parentName:"p",href:"https://urllib3.readthedocs.io/en/stable/advanced-usage.html#http-and-https-proxies"},"urllib3"),"\ndocumentation."),(0,r.kt)("p",null,"To use a Socks proxy, you can send a urllib3 SOCKSProxyManager as the ",(0,r.kt)("inlineCode",{parentName:"p"},"pool_mgr")," argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"get_client"),".  Note that\nthis will require installing the PySocks library either directly or using the ",(0,r.kt)("inlineCode",{parentName:"p"},"[socks]")," option for the urllib3 dependency."))}c.isMDXComponent=!0},64872:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cloud-connect-button-e2247559831d9d3549387ddfb0deee9b.png"},33273:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/connection-details-https-6ceceb667ac0b41ab35a2ad390b7e2dc.png"}}]);
"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[9800],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>u});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),p=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=p(t.components);return a.createElement(s.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),c=p(n),u=r,k=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return n?a.createElement(k,l(l({ref:e},d),{},{components:n})):a.createElement(k,l({ref:e},d))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},67429:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={slug:"/en/native-protocol/compression",sidebar_position:6},l="Compression",i={unversionedId:"en/native-protocol/compression",id:"en/native-protocol/compression",title:"Compression",description:"ClickHouse protocol supports data blocks compression with checksums.",source:"@site/docs/en/native-protocol/compression.md",sourceDirName:"en/native-protocol",slug:"/en/native-protocol/compression",permalink:"/docs/en/native-protocol/compression",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/native-protocol/compression.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{slug:"/en/native-protocol/compression",sidebar_position:6},sidebar:"english",previous:{title:"CityHash",permalink:"/docs/en/native-protocol/hash"},next:{title:"FAQ",permalink:"/docs/en/faq"}},s={},p=[{value:"Modes",id:"modes",level:2},{value:"Block",id:"block",level:2},{value:"None mode",id:"none-mode",level:2}],d={toc:p};function m(t){let{components:e,...o}=t;return(0,r.kt)("wrapper",(0,a.Z)({},d,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"compression"},"Compression"),(0,r.kt)("p",null,"ClickHouse protocol supports ",(0,r.kt)("strong",{parentName:"p"},"data blocks")," compression with checksums.\nUse ",(0,r.kt)("inlineCode",{parentName:"p"},"LZ4")," if not sure what mode to pick."),(0,r.kt)("h2",{id:"modes"},"Modes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"value"),(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x02")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#none-mode"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"No compression, only checksums")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x82")),(0,r.kt)("td",{parentName:"tr",align:null},"LZ4"),(0,r.kt)("td",{parentName:"tr",align:null},"Extremely fast, good compression")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x90")),(0,r.kt)("td",{parentName:"tr",align:null},"ZSTD"),(0,r.kt)("td",{parentName:"tr",align:null},"Zstandard, pretty fast, best compression")))),(0,r.kt)("p",null,"Both LZ4 and ZSTD are made by same author, but with different tradeoffs.\nFrom ",(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/zstd/#benchmarks"},"facebook benchmarks"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"ratio"),(0,r.kt)("th",{parentName:"tr",align:null},"encoding"),(0,r.kt)("th",{parentName:"tr",align:null},"decoding"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"zstd")," 1.4.5 -1"),(0,r.kt)("td",{parentName:"tr",align:null},"2.8"),(0,r.kt)("td",{parentName:"tr",align:null},"500 MB/s"),(0,r.kt)("td",{parentName:"tr",align:null},"1660 MB/s")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"lz4")," 1.9.2"),(0,r.kt)("td",{parentName:"tr",align:null},"2.1"),(0,r.kt)("td",{parentName:"tr",align:null},"740 MB/s"),(0,r.kt)("td",{parentName:"tr",align:null},"4530 MB/s")))),(0,r.kt)("h2",{id:"block"},"Block"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"field"),(0,r.kt)("th",{parentName:"tr",align:null},"type"),(0,r.kt)("th",{parentName:"tr",align:null},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"checksum"),(0,r.kt)("td",{parentName:"tr",align:null},"uint128"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/en/native-protocol/hash"},"Hash")," of (header + compressed data)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"raw_size"),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"Raw size without header")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data_size"),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"Uncompressed data size")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode"),(0,r.kt)("td",{parentName:"tr",align:null},"byte"),(0,r.kt)("td",{parentName:"tr",align:null},"Compression mode")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"compressed_data"),(0,r.kt)("td",{parentName:"tr",align:null},"binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Block of compressed data")))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"compression block diagram",src:n(93116).Z,width:"574",height:"161"})," "),(0,r.kt)("p",null,"Header is (raw_size + data_size + mode), raw size consists of len(header + compressed_data)."),(0,r.kt)("p",null,"Checksum is ",(0,r.kt)("inlineCode",{parentName:"p"},"hash(header + compressed_data)"),", using ",(0,r.kt)("a",{parentName:"p",href:"./hash"},"ClickHouse CityHash"),"."),(0,r.kt)("h2",{id:"none-mode"},"None mode"),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"None")," mode is used, ",(0,r.kt)("inlineCode",{parentName:"p"},"compressed_data")," is equal to original data.\nNo compression mode is useful to ensure additional data integrity with checksums, because\nhashing overhead is negligible."))}m.isMDXComponent=!0},93116:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/ch_compression_block.drawio-ca3ebf78ba66358fb9f32f0da1aca27a.svg"}}]);
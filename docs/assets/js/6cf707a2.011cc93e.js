"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[21328],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var r=a.createContext({}),u=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(r.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,r=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=o,k=c["".concat(r,".").concat(m)]||c[m]||p[m]||l;return n?a.createElement(k,s(s({ref:t},d),{},{components:n})):a.createElement(k,s({ref:t},d))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,s=new Array(l);s[0]=m;var i={};for(var r in t)hasOwnProperty.call(t,r)&&(i[r]=t[r]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var u=2;u<l;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},69166:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=n(87462),o=(n(67294),n(3905));const l={slug:"/en/getting-started/example-datasets/youtube-dislikes",sidebar_label:"YouTube Dislikes",description:"A collection is dislikes of YouTube videos."},s="YouTube dataset of dislikes",i={unversionedId:"en/getting-started/example-datasets/youtube-dislikes",id:"en/getting-started/example-datasets/youtube-dislikes",title:"YouTube dataset of dislikes",description:"A collection is dislikes of YouTube videos.",source:"@site/docs/en/getting-started/example-datasets/youtube-dislikes.md",sourceDirName:"en/getting-started/example-datasets",slug:"/en/getting-started/example-datasets/youtube-dislikes",permalink:"/docs/en/getting-started/example-datasets/youtube-dislikes",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/getting-started/example-datasets/youtube-dislikes.md",tags:[],version:"current",frontMatter:{slug:"/en/getting-started/example-datasets/youtube-dislikes",sidebar_label:"YouTube Dislikes",description:"A collection is dislikes of YouTube videos."},sidebar:"docs",previous:{title:"WikiStat",permalink:"/docs/en/getting-started/example-datasets/wikistat"},next:{title:"Integrations",permalink:"/docs/en/integrations"}},r={},u=[{value:"Step-by-step instructions",id:"step-by-step-instructions",level:2}],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"youtube-dataset-of-dislikes"},"YouTube dataset of dislikes"),(0,o.kt)("p",null,"In November of 2021, YouTube removed the public ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"dislike"))," count from all of its videos. While creators can still see the number of dislikes, viewers can only see how many ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"likes"))," a video has received."),(0,o.kt)("admonition",{type:"important"},(0,o.kt)("p",{parentName:"admonition"},"The dataset has over 4.55 billion records, so be careful just copying-and-pasting the commands below unless your resources can handle that type of volume. The commands below were executed on a ",(0,o.kt)("strong",{parentName:"p"},"Production")," instance of ",(0,o.kt)("a",{parentName:"p",href:"https://clickhouse.cloud"},"ClickHouse Cloud"),".")),(0,o.kt)("p",null,"The data is in a JSON format and can be downloaded from ",(0,o.kt)("a",{parentName:"p",href:"https://archive.org/download/dislikes_youtube_2021_12_video_json_files"},"archive.org"),". We have made this same data available in S3 so that it can be downloaded more efficiently into a ClickHouse Cloud instance."),(0,o.kt)("p",null,"Here are the steps to create a table in ClickHouse Cloud and insert the data."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The steps below will easily work on a local install of ClickHouse too. The only change would be to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"s3")," function instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"s3cluster")," (unless you have a cluster configured - in which case change ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," to the name of your cluster).")),(0,o.kt)("h2",{id:"step-by-step-instructions"},"Step-by-step instructions"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Let's see what the data looks like. The ",(0,o.kt)("inlineCode",{parentName:"li"},"s3cluster")," table function returns a table, so we can ",(0,o.kt)("inlineCode",{parentName:"li"},"DESCRIBE")," the reult:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE s3Cluster(\n    'default',\n    'https://clickhouse-public-datasets.s3.amazonaws.com/youtube/original/files/*.zst',\n    'JSONLines'\n);\n")),(0,o.kt)("p",null,"ClickHouse infers the following schema from the JSON file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id                  \u2502 Nullable(String)                     \u2502\n\u2502 fetch_date          \u2502 Nullable(Int64)                      \u2502\n\u2502 upload_date         \u2502 Nullable(String)                     \u2502\n\u2502 title               \u2502 Nullable(String)                     \u2502\n\u2502 uploader_id         \u2502 Nullable(String)                     \u2502\n\u2502 uploader            \u2502 Nullable(String)                     \u2502\n\u2502 uploader_sub_count  \u2502 Nullable(Int64)                      \u2502\n\u2502 is_age_limit        \u2502 Nullable(Bool)                       \u2502\n\u2502 view_count          \u2502 Nullable(Int64)                      \u2502\n\u2502 like_count          \u2502 Nullable(Int64)                      \u2502\n\u2502 dislike_count       \u2502 Nullable(Int64)                      \u2502\n\u2502 is_crawlable        \u2502 Nullable(Bool)                       \u2502\n\u2502 is_live_content     \u2502 Nullable(Bool)                       \u2502\n\u2502 has_subtitles       \u2502 Nullable(Bool)                       \u2502\n\u2502 is_ads_enabled      \u2502 Nullable(Bool)                       \u2502\n\u2502 is_comments_enabled \u2502 Nullable(Bool)                       \u2502\n\u2502 description         \u2502 Nullable(String)                     \u2502\n\u2502 rich_metadata       \u2502 Array(Map(String, Nullable(String))) \u2502\n\u2502 super_titles        \u2502 Array(Map(String, Nullable(String))) \u2502\n\u2502 uploader_badges     \u2502 Nullable(String)                     \u2502\n\u2502 video_badges        \u2502 Nullable(String)                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Based on the inferred schema, we cleaned up the data types and added a primary key. Define the following table:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE youtube\n(\n    `id` String,\n    `fetch_date` DateTime,\n    `upload_date` String,\n    `title` String,\n    `uploader_id` String,\n    `uploader` String,\n    `uploader_sub_count` Int64,\n    `is_age_limit` Bool,\n    `view_count` Int64,\n    `like_count` Int64,\n    `dislike_count` Int64,\n    `is_crawlable` Bool,\n    `has_subtitles` Bool,\n    `is_ads_enabled` Bool,\n    `is_comments_enabled` Bool,\n    `description` String,\n    `rich_metadata` Array(Map(String, String)),\n    `super_titles` Array(Map(String, String)),\n    `uploader_badges` String,\n    `video_badges` String\n)\nENGINE = MergeTree\nORDER BY (upload_date, uploader);\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"The following command streams the records from the S3 files into the ",(0,o.kt)("inlineCode",{parentName:"li"},"youtube")," table.")),(0,o.kt)("admonition",{type:"important"},(0,o.kt)("p",{parentName:"admonition"},"This inserts a lot of data - 4.65 billion rows. If you do not want the entire dataset, simply add a ",(0,o.kt)("inlineCode",{parentName:"p"},"LIMIT")," clause with the desired number of rows.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO youtube\nSETTINGS input_format_null_as_default = 1\nSELECT\n    id,\n    parseDateTimeBestEffortUS(toString(fetch_date)) AS fetch_date,\n    upload_date,\n    ifNull(title, '') AS title,\n    uploader_id,\n    ifNull(uploader, '') AS uploader,\n    uploader_sub_count,\n    is_age_limit,\n    view_count,\n    like_count,\n    dislike_count,\n    is_crawlable,\n    has_subtitles,\n    is_ads_enabled,\n    is_comments_enabled,\n    ifNull(description, '') AS description,\n    rich_metadata,\n    super_titles,\n    ifNull(uploader_badges, '') AS uploader_badges,\n    ifNull(video_badges, '') AS video_badges\nFROM s3Cluster(\n       'default',\n       'https://clickhouse-public-datasets.s3.amazonaws.com/youtube/original/files/*.zst',\n       'JSONLines'\n    );\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Open a new tab in the SQL Console of ClickHouse Cloud (or a new ",(0,o.kt)("inlineCode",{parentName:"li"},"clickhouse-client")," window) and watch the count increase. It will take a while to insert 4.56B rows, depending on your server resources. (Withtout any tweaking of settings, it takes about 4.5 hours.)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT formatReadableQuantity(count())\nFROM youtube\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500formatReadableQuantity(count())\u2500\u2510\n\u2502 4.56 billion                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Once the data is inserted, go ahead and count the number of dislikes of your favorite videos or channels. Let's see how many videos were uploaded by ClickHouse:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count()\nFROM youtube\nWHERE uploader = 'ClickHouse';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500count()\u2500\u2510\n\u2502      84 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 row in set. Elapsed: 0.570 sec. Processed 237.57 thousand rows, 5.77 MB (416.54 thousand rows/s., 10.12 MB/s.)\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The query above runs so quickly because we chose ",(0,o.kt)("inlineCode",{parentName:"p"},"uploader")," as the first column of the primary key - so it only had to process 237k rows.")),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"Let's look and likes and dislikes of ClickHouse videos:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    title,\n    like_count,\n    dislike_count\nFROM youtube\nWHERE uploader = 'ClickHouse'\nORDER BY dislike_count DESC;\n")),(0,o.kt)("p",null,"The response looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500title\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500like_count\u2500\u252c\u2500dislike_count\u2500\u2510\n\u2502 ClickHouse v21.11 Release Webinar                                                                    \u2502         52 \u2502             3 \u2502\n\u2502 ClickHouse Introduction                                                                              \u2502         97 \u2502             3 \u2502\n\u2502 Casa Modelo Algarve                                                                                  \u2502        180 \u2502             3 \u2502\n\u2502 \u041f\u0440\u043e\u0444\u0430\u0439\u043b\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432:  \u0442\u0440\u0443\u0434\u043d\u044b\u0439 \u043f\u0443\u0442\u044c                                                                    \u2502         33 \u2502             3 \u2502\n\u2502 ClickHouse \u0432 \u041a\u0443\u0440\u0441\u043e\u043c\u0435\u0442\u0440\u0435                                                                              \u2502          4 \u2502             2 \u2502\n\u2502 10 Good Reasons to Use ClickHouse                                                                    \u2502         27 \u2502             2 \u2502\n...\n\n84 rows in set. Elapsed: 0.013 sec. Processed 155.65 thousand rows, 16.94 MB (11.96 million rows/s., 1.30 GB/s.)\n")),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},"Here is a search for videos with ",(0,o.kt)("strong",{parentName:"li"},"ClickHouse")," in the ",(0,o.kt)("inlineCode",{parentName:"li"},"title")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"description")," fields:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    view_count,\n    like_count,\n    dislike_count,\n    concat('https://youtu.be/', id) AS url,\n    title\nFROM youtube\nWHERE (title ILIKE '%ClickHouse%') OR (description ILIKE '%ClickHouse%')\nORDER BY\n    like_count DESC,\n    view_count DESC\n")),(0,o.kt)("p",null,"This query has to process every row, and also parse through two columns of strings. Even then, we get decent performance at 4.15M rows/second:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"1174 rows in set. Elapsed: 1099.368 sec. Processed 4.56 billion rows, 1.98 TB (4.15 million rows/s., 1.80 GB/s.)\n")),(0,o.kt)("p",null,"The results look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500view_count\u2500\u252c\u2500like_count\u2500\u252c\u2500dislike_count\u2500\u252c\u2500url\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500title\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       1919 \u2502         63 \u2502             1 \u2502 https://youtu.be/b9MeoOtAivQ \u2502 ClickHouse v21.10 Release Webinar                                                                      \u2502\n\u2502       8710 \u2502         62 \u2502             4 \u2502 https://youtu.be/PeV1mC2z--M \u2502 What is JDBC DriverManager? | JDBC                                                                     \u2502\n\u2502       3534 \u2502         62 \u2502             1 \u2502 https://youtu.be/8nWRhK9gw10 \u2502 CLICKHOUSE - Arquitetura Modular                                                                       \u2502\n")))}p.isMDXComponent=!0}}]);
"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[62833],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,g=c["".concat(s,".").concat(u)]||c[u]||m[u]||l;return a?n.createElement(g,o(o({ref:t},d),{},{components:a})):n.createElement(g,o({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},49182:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_label:"PostgreSQL",sidebar_position:10,slug:"/en/integrations/postgresql",keywords:["clickhouse","postgres","postgresql","connect","integrate","table","engine"]},o="Connecting ClickHouse to PostgreSQL",i={unversionedId:"en/integrations/data-ingestion/dbms/postgresql/index",id:"en/integrations/data-ingestion/dbms/postgresql/index",title:"Connecting ClickHouse to PostgreSQL",description:"This page covers two options for integrating PostgreSQL with ClickHouse:",source:"@site/docs/en/integrations/data-ingestion/dbms/postgresql/index.md",sourceDirName:"en/integrations/data-ingestion/dbms/postgresql",slug:"/en/integrations/postgresql",permalink:"/docs/en/integrations/postgresql",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/data-ingestion/dbms/postgresql/index.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_label:"PostgreSQL",sidebar_position:10,slug:"/en/integrations/postgresql",keywords:["clickhouse","postgres","postgresql","connect","integrate","table","engine"]},sidebar:"docs",previous:{title:"Google Cloud Storage (GCS)",permalink:"/docs/en/integrations/gcs"},next:{title:"MySQL",permalink:"/docs/en/integrations/mysql"}},s={},p=[{value:"Using the PostgreSQL Table Engine",id:"using-the-postgresql-table-engine",level:2},{value:"1. Setting up PostgreSQL",id:"1-setting-up-postgresql",level:3},{value:"2. Define a Table in ClickHouse",id:"2-define-a-table-in-clickhouse",level:3},{value:"3 Test the Integration",id:"3-test-the-integration",level:3},{value:"Using the MaterializedPostgreSQL database engine",id:"using-the-materializedpostgresql-database-engine",level:2},{value:"1. In PostgreSQL",id:"1-in-postgresql",level:3},{value:"2. In ClickHouse",id:"2-in-clickhouse",level:3},{value:"3. Test basic replication",id:"3-test-basic-replication",level:3},{value:"4. Summary",id:"4-summary",level:3}],d={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"connecting-clickhouse-to-postgresql"},"Connecting ClickHouse to PostgreSQL"),(0,r.kt)("p",null,"This page covers two options for integrating PostgreSQL with ClickHouse:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using the ",(0,r.kt)("inlineCode",{parentName:"li"},"PostgreSQL")," table engine, for reading from a PostgreSQL table"),(0,r.kt)("li",{parentName:"ul"},"using the ",(0,r.kt)("inlineCode",{parentName:"li"},"MaterializedPostgreSQL")," database engine, for syncing a database in PostgreSQL with a database in ClickHouse")),(0,r.kt)("h2",{id:"using-the-postgresql-table-engine"},"Using the PostgreSQL Table Engine"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PostgreSQL")," table engine allows ",(0,r.kt)("strong",{parentName:"p"},"SELECT")," and ",(0,r.kt)("strong",{parentName:"p"},"INSERT")," operations on data stored on the remote PostgreSQL server from ClickHouse.\nThis article is to illustrate basic methods of integration using one table."),(0,r.kt)("h3",{id:"1-setting-up-postgresql"},"1. Setting up PostgreSQL"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In ",(0,r.kt)("inlineCode",{parentName:"p"},"postgresql.conf"),", add the following entry to enable PostgreSQL to listen on the network interfaces:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"listen_addresses = '*'\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a user to connect from ClickHouse. For demonstration purposes, this example grants full superuser rights."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE ROLE clickhouse_user SUPERUSER LOGIN PASSWORD 'ClickHouse_123';\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a new database in PostgreSQL:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE db_in_psg;\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a new table:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE table1 (\n    id         integer primary key,\n    column1    varchar(10)\n);\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's add a few rows for testing:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO table1\n  (id, column1)\nVALUES\n  (1, 'abc'),\n  (2, 'def');\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"To configure PostgreSQL to allow connections to the new database with the new user for replication, add the following entry to the ",(0,r.kt)("inlineCode",{parentName:"p"},"pg_hba.conf")," file. Update the address line with either the subnet or IP address of your PostgreSQL server:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    db_in_psg             clickhouse_user 192.168.1.0/24          password\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Reload the ",(0,r.kt)("inlineCode",{parentName:"p"},"pg_hba.conf")," configuration (adjust this command depending on your version):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"/usr/pgsql-12/bin/pg_ctl reload\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Verify the new ",(0,r.kt)("inlineCode",{parentName:"p"},"clickhouse_user")," can login:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"psql -U clickhouse_user -W -d db_in_psg -h <your_postgresql_host>\n")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you are using this feaure in ClickHouse Cloud, you may need the to allow the ClickHouse Cloud IP addresses to access your PostgreSQL instance.\nView the ClickHouse Cloud public list of ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/manage/security/ip-egress-traffic-list"},"IP address")," for egress traffic.")),(0,r.kt)("h3",{id:"2-define-a-table-in-clickhouse"},"2. Define a Table in ClickHouse"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Login to the ",(0,r.kt)("inlineCode",{parentName:"p"},"clickhouse-client"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"clickhouse-client --user default --password ClickHouse123!\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's create a new database:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE db_in_ch;\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a table that uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"PostgreSQL"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE db_in_ch.table1\n(\n    id UInt64,\n    column1 String\n)\nENGINE = PostgreSQL('postgres-host.domain.com:5432', 'db_in_psg', 'table1', 'clickhouse_user', 'ClickHouse_123');\n")),(0,r.kt)("p",{parentName:"li"},"The minimum parameters needed are:"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"host:port"),(0,r.kt)("td",{parentName:"tr",align:null},"hostname or IP and port"),(0,r.kt)("td",{parentName:"tr",align:null},"postgres-host.domain.com:5432")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database"),(0,r.kt)("td",{parentName:"tr",align:null},"PostgreSQL database name"),(0,r.kt)("td",{parentName:"tr",align:null},"db_in_psg")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"user"),(0,r.kt)("td",{parentName:"tr",align:null},"username to connect to postgres"),(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse_user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"password"),(0,r.kt)("td",{parentName:"tr",align:null},"password to connect to postgres"),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse_123")))),(0,r.kt)("admonition",{parentName:"li",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"View the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/integrations/postgresql"},"PostgreSQL table engine")," doc page for a complete list of parameters.")))),(0,r.kt)("h3",{id:"3-test-the-integration"},"3 Test the Integration"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In ClickHouse, view initial rows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM db_in_ch.table1\n")),(0,r.kt)("p",{parentName:"li"},"The ClickHouse table should automatically be populated with the two rows that already existed in the table in PostgreSQL:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"Query id: 34193d31-fe21-44ac-a182-36aaefbd78bf\n\n\u250c\u2500id\u2500\u252c\u2500column1\u2500\u2510\n\u2502  1 \u2502 abc     \u2502\n\u2502  2 \u2502 def     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Back in PostgreSQL, add a couple of rows to the table:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO table1\n  (id, column1)\nVALUES\n  (3, 'ghi'),\n  (4, 'jkl');\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Those two new rows should appear in your ClickHouse table:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM db_in_ch.table1\n")),(0,r.kt)("p",{parentName:"li"},"The response should be:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-response"},"Query id: 86fa2c62-d320-4e47-b564-47ebf3d5d27b\n\n\u250c\u2500id\u2500\u252c\u2500column1\u2500\u2510\n\u2502  1 \u2502 abc     \u2502\n\u2502  2 \u2502 def     \u2502\n\u2502  3 \u2502 ghi     \u2502\n\u2502  4 \u2502 jkl     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's see what happens when you add rows to the ClickHouse table:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO db_in_ch.table1\n  (id, column1)\nVALUES\n  (5, 'mno'),\n  (6, 'pqr');\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The rows added in ClickHouse should appear in the table in PostgreSQL:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"db_in_psg=# SELECT * FROM table1;\nid | column1\n----+---------\n  1 | abc\n  2 | def\n  3 | ghi\n  4 | jkl\n  5 | mno\n  6 | pqr\n(6 rows)\n")))),(0,r.kt)("p",null,"This example demonstrated the basic integration between PostgreSQL and ClickHouse using the ",(0,r.kt)("inlineCode",{parentName:"p"},"PostrgeSQL")," table engine.\nCheck out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/integrations/postgresql"},"doc page for the PostgreSQL table engine")," for more features, such as specifying schemas, returning only a subset of columns, and connecting to multiple replicas. Also check out the ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/blog/migrating-data-between-clickhouse-postgres"},"ClickHouse and PostgreSQL - a match made in data heaven - part 1")," blog."),(0,r.kt)("h2",{id:"using-the-materializedpostgresql-database-engine"},"Using the MaterializedPostgreSQL database engine"),(0,r.kt)("p",null,"The PostgreSQL database engine uses the PostgreSQL replication features to create a replica of the database with all or a subset of schemas and tables.\nThis article is to illustrate basic methods of integration using one database, one schema and one table."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"In the following procedures, the PostgreSQL CLI (psql) and the ClickHouse CLI (clickhouse-client) are used. The PostgreSQL server is installed on linux. The following has minimum settings if the postgresql database is new test install"))),(0,r.kt)("h3",{id:"1-in-postgresql"},"1. In PostgreSQL"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"In ",(0,r.kt)("inlineCode",{parentName:"li"},"postgresql.conf"),", set minimum listen levels, replication wal level and replication slots:")),(0,r.kt)("p",null,"add the following entries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"listen_addresses = '*'\nmax_replication_slots = 10\nwal_level = logical\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"*ClickHouse needs minimum of ",(0,r.kt)("inlineCode",{parentName:"em"},"logical")," wal level and minimum ",(0,r.kt)("inlineCode",{parentName:"em"},"2")," replication slots")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Using an admin account, create a user to connect from ClickHouse:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE ROLE clickhouse_user SUPERUSER LOGIN PASSWORD 'ClickHouse_123';\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"*for demonstration purposes, full superuser rights have been granted.")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"create a new database:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE db1;\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"connect to the new database in ",(0,r.kt)("inlineCode",{parentName:"li"},"psql"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\\connect db1\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"create a new table:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE table1 (\n    id         integer primary key,\n    column1    varchar(10)\n);\n")),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"add initial rows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO table1\n(id, column1)\nVALUES\n(1, 'abc'),\n(2, 'def');\n")),(0,r.kt)("ol",{start:7},(0,r.kt)("li",{parentName:"ol"},"Configure the PostgreSQLto allow connections to the new database with the new user for replication:\nbelow is the minimum entry to add to the ",(0,r.kt)("inlineCode",{parentName:"li"},"pg_hba.conf")," file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    db1             clickhouse_user 192.168.1.0/24          password\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"*for demonstration purposes, this is using clear text password authentication method. update the address line with either the subnet or the address of the server per PostgreSQL documentation")),(0,r.kt)("ol",{start:8},(0,r.kt)("li",{parentName:"ol"},"reload the ",(0,r.kt)("inlineCode",{parentName:"li"},"pg_hba.conf")," configuration with something like this (adjust for your version):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"/usr/pgsql-12/bin/pg_ctl reload\n")),(0,r.kt)("ol",{start:9},(0,r.kt)("li",{parentName:"ol"},"Test the login with new ",(0,r.kt)("inlineCode",{parentName:"li"},"clickhouse_user"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," psql -U clickhouse_user -W -d db1 -h <your_postgresql_host>\n")),(0,r.kt)("h3",{id:"2-in-clickhouse"},"2. In ClickHouse"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"log into the ClickHouse CLI")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"clickhouse-client --user default --password ClickHouse123!\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Enable the PosgreSQL experimental feature for the database engine:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET allow_experimental_database_materialized_postgresql=1\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Create the new database to be replicated and define the intitial table:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE db1_postgres\nENGINE = MaterializedPostgreSQL('postgres-host.domain.com:5432', 'db1', 'clickhouse_user', 'ClickHouse_123')\nSETTINGS materialized_postgresql_tables_list = 'table1';\n")),(0,r.kt)("p",null,"minimum options:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"host:port"),(0,r.kt)("td",{parentName:"tr",align:null},"hostname or IP and port"),(0,r.kt)("td",{parentName:"tr",align:null},"postgres-host.domain.com:5432")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database"),(0,r.kt)("td",{parentName:"tr",align:null},"PostgreSQL database name"),(0,r.kt)("td",{parentName:"tr",align:null},"db1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"user"),(0,r.kt)("td",{parentName:"tr",align:null},"username to connect to postgres"),(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse_user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"password"),(0,r.kt)("td",{parentName:"tr",align:null},"password to connect to postgres"),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse_123")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"settings"),(0,r.kt)("td",{parentName:"tr",align:null},"additional settings for the engine"),(0,r.kt)("td",{parentName:"tr",align:null},"materialized_postgresql_tables_list = 'table1'")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For complete guide to the PostgreSQL database engine, refer to ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/engines/database-engines/materialized-postgresql/#settings"},"https://clickhouse.com/docs/en/engines/database-engines/materialized-postgresql/#settings"))),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Verify the initial table has data:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ch_env_2 :) select * from db1_postgres.table1;\n\nSELECT *\nFROM db1_postgres.table1\n\nQuery id: df2381ac-4e30-4535-b22e-8be3894aaafc\n\n\u250c\u2500id\u2500\u252c\u2500column1\u2500\u2510\n\u2502  1 \u2502 abc     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500id\u2500\u252c\u2500column1\u2500\u2510\n\u2502  2 \u2502 def     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h3",{id:"3-test-basic-replication"},"3. Test basic replication"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"In PostgreSQL, add new rows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO table1\n(id, column1)\nVALUES\n(3, 'ghi'),\n(4, 'jkl');\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"In ClickHouse, verify the new rows are visible:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ch_env_2 :) select * from db1_postgres.table1;\n\nSELECT *\nFROM db1_postgres.table1\n\nQuery id: b0729816-3917-44d3-8d1a-fed912fb59ce\n\n\u250c\u2500id\u2500\u252c\u2500column1\u2500\u2510\n\u2502  1 \u2502 abc     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500id\u2500\u252c\u2500column1\u2500\u2510\n\u2502  4 \u2502 jkl     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500id\u2500\u252c\u2500column1\u2500\u2510\n\u2502  3 \u2502 ghi     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500id\u2500\u252c\u2500column1\u2500\u2510\n\u2502  2 \u2502 def     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h3",{id:"4-summary"},"4. Summary"),(0,r.kt)("p",null,"This integration guide focused on a simple example on how to replicate a database with a table, however, there exist more advanced options which include replicating the whole database or adding new tables and schemas to the existing replications. Although DDL commands are not supported for this replication, the engine can be set to detect changes and reload the tables when there are structural changes made."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For more features available for advanced options, please see the reference documenation: ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/engines/database-engines/materialized-postgresql/"},"https://clickhouse.com/docs/en/engines/database-engines/materialized-postgresql/"))))}m.isMDXComponent=!0}}]);
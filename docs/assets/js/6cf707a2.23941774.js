"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[21328],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var r=a.createContext({}),u=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(r.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,r=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=u(t),m=l,k=c["".concat(r,".").concat(m)]||c[m]||p[m]||o;return t?a.createElement(k,s(s({ref:n},d),{},{components:t})):a.createElement(k,s({ref:n},d))}));function k(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var r in n)hasOwnProperty.call(n,r)&&(i[r]=n[r]);i.originalType=e,i[c]="string"==typeof e?e:l,s[1]=i;for(var u=2;u<o;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},69166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=t(87462),l=(t(67294),t(3905));const o={slug:"/en/getting-started/example-datasets/youtube-dislikes",sidebar_label:"YouTube Dislikes",description:"A collection is dislikes of YouTube videos."},s="YouTube dataset of dislikes",i={unversionedId:"en/getting-started/example-datasets/youtube-dislikes",id:"en/getting-started/example-datasets/youtube-dislikes",title:"YouTube dataset of dislikes",description:"A collection is dislikes of YouTube videos.",source:"@site/docs/en/getting-started/example-datasets/youtube-dislikes.md",sourceDirName:"en/getting-started/example-datasets",slug:"/en/getting-started/example-datasets/youtube-dislikes",permalink:"/docs/en/getting-started/example-datasets/youtube-dislikes",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/getting-started/example-datasets/youtube-dislikes.md",tags:[],version:"current",frontMatter:{slug:"/en/getting-started/example-datasets/youtube-dislikes",sidebar_label:"YouTube Dislikes",description:"A collection is dislikes of YouTube videos."},sidebar:"docs",previous:{title:"WikiStat",permalink:"/docs/en/getting-started/example-datasets/wikistat"},next:{title:"Integrations",permalink:"/docs/en/integrations"}},r={},u=[{value:"Step-by-step instructions",id:"step-by-step-instructions",level:2},{value:"Questions",id:"questions",level:2},{value:"If someone disables comments does it lower the chance someone will actually click like or dislike?",id:"if-someone-disables-comments-does-it-lower-the-chance-someone-will-actually-click-like-or-dislike",level:3},{value:"How do like ratio changes as views go up?",id:"how-do-like-ratio-changes-as-views-go-up",level:3},{value:"How are views distributed?",id:"how-are-views-distributed",level:3}],d={toc:u},c="wrapper";function p(e){let{components:n,...t}=e;return(0,l.kt)(c,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"youtube-dataset-of-dislikes"},"YouTube dataset of dislikes"),(0,l.kt)("p",null,"In November of 2021, YouTube removed the public ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"dislike"))," count from all of its videos. While creators can still see the number of dislikes, viewers can only see how many ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"likes"))," a video has received."),(0,l.kt)("admonition",{type:"important"},(0,l.kt)("p",{parentName:"admonition"},"The dataset has over 4.55 billion records, so be careful just copying-and-pasting the commands below unless your resources can handle that type of volume. The commands below were executed on a ",(0,l.kt)("strong",{parentName:"p"},"Production")," instance of ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.cloud"},"ClickHouse Cloud"),".")),(0,l.kt)("p",null,"The data is in a JSON format and can be downloaded from ",(0,l.kt)("a",{parentName:"p",href:"https://archive.org/download/dislikes_youtube_2021_12_video_json_files"},"archive.org"),". We have made this same data available in S3 so that it can be downloaded more efficiently into a ClickHouse Cloud instance."),(0,l.kt)("p",null,"Here are the steps to create a table in ClickHouse Cloud and insert the data."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The steps below will easily work on a local install of ClickHouse too. The only change would be to use the ",(0,l.kt)("inlineCode",{parentName:"p"},"s3")," function instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"s3cluster")," (unless you have a cluster configured - in which case change ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," to the name of your cluster).")),(0,l.kt)("h2",{id:"step-by-step-instructions"},"Step-by-step instructions"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Let's see what the data looks like. The ",(0,l.kt)("inlineCode",{parentName:"li"},"s3cluster")," table function returns a table, so we can ",(0,l.kt)("inlineCode",{parentName:"li"},"DESCRIBE")," the reult:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE s3Cluster(\n    'default',\n    'https://clickhouse-public-datasets.s3.amazonaws.com/youtube/original/files/*.zst',\n    'JSONLines'\n);\n")),(0,l.kt)("p",null,"ClickHouse infers the following schema from the JSON file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id                  \u2502 Nullable(String)                     \u2502\n\u2502 fetch_date          \u2502 Nullable(Int64)                      \u2502\n\u2502 upload_date         \u2502 Nullable(String)                     \u2502\n\u2502 title               \u2502 Nullable(String)                     \u2502\n\u2502 uploader_id         \u2502 Nullable(String)                     \u2502\n\u2502 uploader            \u2502 Nullable(String)                     \u2502\n\u2502 uploader_sub_count  \u2502 Nullable(Int64)                      \u2502\n\u2502 is_age_limit        \u2502 Nullable(Bool)                       \u2502\n\u2502 view_count          \u2502 Nullable(Int64)                      \u2502\n\u2502 like_count          \u2502 Nullable(Int64)                      \u2502\n\u2502 dislike_count       \u2502 Nullable(Int64)                      \u2502\n\u2502 is_crawlable        \u2502 Nullable(Bool)                       \u2502\n\u2502 is_live_content     \u2502 Nullable(Bool)                       \u2502\n\u2502 has_subtitles       \u2502 Nullable(Bool)                       \u2502\n\u2502 is_ads_enabled      \u2502 Nullable(Bool)                       \u2502\n\u2502 is_comments_enabled \u2502 Nullable(Bool)                       \u2502\n\u2502 description         \u2502 Nullable(String)                     \u2502\n\u2502 rich_metadata       \u2502 Array(Map(String, Nullable(String))) \u2502\n\u2502 super_titles        \u2502 Array(Map(String, Nullable(String))) \u2502\n\u2502 uploader_badges     \u2502 Nullable(String)                     \u2502\n\u2502 video_badges        \u2502 Nullable(String)                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Based on the inferred schema, we cleaned up the data types and added a primary key. Define the following table:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE youtube\n(\n    `id` String,\n    `fetch_date` DateTime,\n    `upload_date` String,\n    `title` String,\n    `uploader_id` String,\n    `uploader` String,\n    `uploader_sub_count` Int64,\n    `is_age_limit` Bool,\n    `view_count` Int64,\n    `like_count` Int64,\n    `dislike_count` Int64,\n    `is_crawlable` Bool,\n    `has_subtitles` Bool,\n    `is_ads_enabled` Bool,\n    `is_comments_enabled` Bool,\n    `description` String,\n    `rich_metadata` Array(Map(String, String)),\n    `super_titles` Array(Map(String, String)),\n    `uploader_badges` String,\n    `video_badges` String\n)\nENGINE = MergeTree\nORDER BY (upload_date, uploader);\n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"The following command streams the records from the S3 files into the ",(0,l.kt)("inlineCode",{parentName:"li"},"youtube")," table.")),(0,l.kt)("admonition",{type:"important"},(0,l.kt)("p",{parentName:"admonition"},"This inserts a lot of data - 4.65 billion rows. If you do not want the entire dataset, simply add a ",(0,l.kt)("inlineCode",{parentName:"p"},"LIMIT")," clause with the desired number of rows.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO youtube\nSETTINGS input_format_null_as_default = 1\nSELECT\n    id,\n    parseDateTimeBestEffortUS(toString(fetch_date)) AS fetch_date,\n    upload_date,\n    ifNull(title, '') AS title,\n    uploader_id,\n    ifNull(uploader, '') AS uploader,\n    uploader_sub_count,\n    is_age_limit,\n    view_count,\n    like_count,\n    dislike_count,\n    is_crawlable,\n    has_subtitles,\n    is_ads_enabled,\n    is_comments_enabled,\n    ifNull(description, '') AS description,\n    rich_metadata,\n    super_titles,\n    ifNull(uploader_badges, '') AS uploader_badges,\n    ifNull(video_badges, '') AS video_badges\nFROM s3Cluster(\n       'default',\n       'https://clickhouse-public-datasets.s3.amazonaws.com/youtube/original/files/*.zst',\n       'JSONLines'\n    );\n")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"Open a new tab in the SQL Console of ClickHouse Cloud (or a new ",(0,l.kt)("inlineCode",{parentName:"li"},"clickhouse-client")," window) and watch the count increase. It will take a while to insert 4.56B rows, depending on your server resources. (Withtout any tweaking of settings, it takes about 4.5 hours.)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT formatReadableQuantity(count())\nFROM youtube\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500formatReadableQuantity(count())\u2500\u2510\n\u2502 4.56 billion                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("ol",{start:5},(0,l.kt)("li",{parentName:"ol"},"Once the data is inserted, go ahead and count the number of dislikes of your favorite videos or channels. Let's see how many videos were uploaded by ClickHouse:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count()\nFROM youtube\nWHERE uploader = 'ClickHouse';\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500count()\u2500\u2510\n\u2502      84 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 row in set. Elapsed: 0.570 sec. Processed 237.57 thousand rows, 5.77 MB (416.54 thousand rows/s., 10.12 MB/s.)\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The query above runs so quickly because we chose ",(0,l.kt)("inlineCode",{parentName:"p"},"uploader")," as the first column of the primary key - so it only had to process 237k rows.")),(0,l.kt)("ol",{start:6},(0,l.kt)("li",{parentName:"ol"},"Let's look and likes and dislikes of ClickHouse videos:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    title,\n    like_count,\n    dislike_count\nFROM youtube\nWHERE uploader = 'ClickHouse'\nORDER BY dislike_count DESC;\n")),(0,l.kt)("p",null,"The response looks like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500title\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500like_count\u2500\u252c\u2500dislike_count\u2500\u2510\n\u2502 ClickHouse v21.11 Release Webinar                                                                    \u2502         52 \u2502             3 \u2502\n\u2502 ClickHouse Introduction                                                                              \u2502         97 \u2502             3 \u2502\n\u2502 Casa Modelo Algarve                                                                                  \u2502        180 \u2502             3 \u2502\n\u2502 \u041f\u0440\u043e\u0444\u0430\u0439\u043b\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432:  \u0442\u0440\u0443\u0434\u043d\u044b\u0439 \u043f\u0443\u0442\u044c                                                                    \u2502         33 \u2502             3 \u2502\n\u2502 ClickHouse \u0432 \u041a\u0443\u0440\u0441\u043e\u043c\u0435\u0442\u0440\u0435                                                                              \u2502          4 \u2502             2 \u2502\n\u2502 10 Good Reasons to Use ClickHouse                                                                    \u2502         27 \u2502             2 \u2502\n...\n\n84 rows in set. Elapsed: 0.013 sec. Processed 155.65 thousand rows, 16.94 MB (11.96 million rows/s., 1.30 GB/s.)\n")),(0,l.kt)("ol",{start:7},(0,l.kt)("li",{parentName:"ol"},"Here is a search for videos with ",(0,l.kt)("strong",{parentName:"li"},"ClickHouse")," in the ",(0,l.kt)("inlineCode",{parentName:"li"},"title")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"description")," fields:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    view_count,\n    like_count,\n    dislike_count,\n    concat('https://youtu.be/', id) AS url,\n    title\nFROM youtube\nWHERE (title ILIKE '%ClickHouse%') OR (description ILIKE '%ClickHouse%')\nORDER BY\n    like_count DESC,\n    view_count DESC\n")),(0,l.kt)("p",null,"This query has to process every row, and also parse through two columns of strings. Even then, we get decent performance at 4.15M rows/second:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"1174 rows in set. Elapsed: 1099.368 sec. Processed 4.56 billion rows, 1.98 TB (4.15 million rows/s., 1.80 GB/s.)\n")),(0,l.kt)("p",null,"The results look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500view_count\u2500\u252c\u2500like_count\u2500\u252c\u2500dislike_count\u2500\u252c\u2500url\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500title\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       1919 \u2502         63 \u2502             1 \u2502 https://youtu.be/b9MeoOtAivQ \u2502 ClickHouse v21.10 Release Webinar                                                                      \u2502\n\u2502       8710 \u2502         62 \u2502             4 \u2502 https://youtu.be/PeV1mC2z--M \u2502 What is JDBC DriverManager? | JDBC                                                                     \u2502\n\u2502       3534 \u2502         62 \u2502             1 \u2502 https://youtu.be/8nWRhK9gw10 \u2502 CLICKHOUSE - Arquitetura Modular                                                                       \u2502\n")),(0,l.kt)("h2",{id:"questions"},"Questions"),(0,l.kt)("h3",{id:"if-someone-disables-comments-does-it-lower-the-chance-someone-will-actually-click-like-or-dislike"},"If someone disables comments does it lower the chance someone will actually click like or dislike?"),(0,l.kt)("p",null,"When commenting is disabled, are people more likely to like or dislike to express their feelings about a video?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    concat('< ', formatReadableQuantity(view_range)) AS views,\n    is_comments_enabled,\n    total_clicks / num_views AS prob_like_dislike\nFROM\n(\n    SELECT\n        is_comments_enabled,\n        power(10, CEILING(log10(view_count + 1))) AS view_range,\n        sum(like_count + dislike_count) AS total_clicks,\n        sum(view_count) AS num_views\n    FROM youtube\n    GROUP BY\n        view_range,\n        is_comments_enabled\n) WHERE view_range > 1\nORDER BY\n    is_comments_enabled ASC,\n    num_views ASC;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500views\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500is_comments_enabled\u2500\u252c\u2500\u2500\u2500\u2500prob_like_dislike\u2500\u2510\n\u2502 < 10.00           \u2502 false               \u2502  0.08224180712685371 \u2502\n\u2502 < 100.00          \u2502 false               \u2502  0.06346337759167248 \u2502\n\u2502 < 1.00 thousand   \u2502 false               \u2502  0.03201883652987105 \u2502\n\u2502 < 10.00 thousand  \u2502 false               \u2502  0.01716073540410903 \u2502\n\u2502 < 10.00 billion   \u2502 false               \u2502 0.004555639481829971 \u2502\n\u2502 < 100.00 thousand \u2502 false               \u2502  0.01293351460515323 \u2502\n\u2502 < 1.00 billion    \u2502 false               \u2502 0.004761811192464957 \u2502\n\u2502 < 1.00 million    \u2502 false               \u2502 0.010472604018980551 \u2502\n\u2502 < 10.00 million   \u2502 false               \u2502  0.00788902538420125 \u2502\n\u2502 < 100.00 million  \u2502 false               \u2502  0.00579152804250582 \u2502\n\u2502 < 10.00           \u2502 true                \u2502  0.09819517478134059 \u2502\n\u2502 < 100.00          \u2502 true                \u2502  0.07403784478585775 \u2502\n\u2502 < 1.00 thousand   \u2502 true                \u2502  0.03846294910067627 \u2502\n\u2502 < 10.00 billion   \u2502 true                \u2502 0.005615217329358215 \u2502\n\u2502 < 10.00 thousand  \u2502 true                \u2502  0.02505881391701455 \u2502\n\u2502 < 1.00 billion    \u2502 true                \u2502 0.007434998802482997 \u2502\n\u2502 < 100.00 thousand \u2502 true                \u2502 0.022694648130822004 \u2502\n\u2502 < 100.00 million  \u2502 true                \u2502 0.011761563746575625 \u2502\n\u2502 < 1.00 million    \u2502 true                \u2502 0.020776022304589435 \u2502\n\u2502 < 10.00 million   \u2502 true                \u2502 0.016917095718089584 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n22 rows in set. Elapsed: 8.460 sec. Processed 4.56 billion rows, 77.48 GB (538.73 million rows/s., 9.16 GB/s.)\n")),(0,l.kt)("p",null,"Enabling comments seems to be correlated with a higher rate of engagement."),(0,l.kt)("h3",{id:"how-do-like-ratio-changes-as-views-go-up"},"How do like ratio changes as views go up?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    concat('< ', formatReadableQuantity(view_range)) AS view_range,\n    is_comments_enabled,\n    round(like_ratio, 2) AS like_ratio\nFROM\n(\nSELECT\n    power(10, CEILING(log10(view_count + 1))) as view_range,\n    is_comments_enabled,\n    avg(like_count / dislike_count) as like_ratio\nFROM youtube WHERE dislike_count > 0\nGROUP BY\n    view_range,\n    is_comments_enabled HAVING view_range > 1\nORDER BY\n    view_range ASC,\n    is_comments_enabled ASC\n);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500view_range\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500is_comments_enabled\u2500\u252c\u2500like_ratio\u2500\u2510\n\u2502 < 10.00           \u2502 false               \u2502       0.66 \u2502\n\u2502 < 10.00           \u2502 true                \u2502       0.66 \u2502\n\u2502 < 100.00          \u2502 false               \u2502          3 \u2502\n\u2502 < 100.00          \u2502 true                \u2502       3.95 \u2502\n\u2502 < 1.00 thousand   \u2502 false               \u2502       8.45 \u2502\n\u2502 < 1.00 thousand   \u2502 true                \u2502      13.07 \u2502\n\u2502 < 10.00 thousand  \u2502 false               \u2502      18.57 \u2502\n\u2502 < 10.00 thousand  \u2502 true                \u2502      30.92 \u2502\n\u2502 < 100.00 thousand \u2502 false               \u2502      23.55 \u2502\n\u2502 < 100.00 thousand \u2502 true                \u2502      42.13 \u2502\n\u2502 < 1.00 million    \u2502 false               \u2502      19.23 \u2502\n\u2502 < 1.00 million    \u2502 true                \u2502      37.86 \u2502\n\u2502 < 10.00 million   \u2502 false               \u2502      12.13 \u2502\n\u2502 < 10.00 million   \u2502 true                \u2502      30.72 \u2502\n\u2502 < 100.00 million  \u2502 false               \u2502       6.67 \u2502\n\u2502 < 100.00 million  \u2502 true                \u2502      23.32 \u2502\n\u2502 < 1.00 billion    \u2502 false               \u2502       3.08 \u2502\n\u2502 < 1.00 billion    \u2502 true                \u2502      20.69 \u2502\n\u2502 < 10.00 billion   \u2502 false               \u2502       1.77 \u2502\n\u2502 < 10.00 billion   \u2502 true                \u2502       19.5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n20 rows in set. Elapsed: 63.664 sec. Processed 4.56 billion rows, 113.93 GB (71.59 million rows/s., 1.79 GB/s.)\n")),(0,l.kt)("h3",{id:"how-are-views-distributed"},"How are views distributed?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    labels AS percentile,\n    round(quantiles) AS views\nFROM\n(\n    SELECT\n        quantiles(0.999, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1)(view_count) AS quantiles,\n        ['99.9th', '99th', '95th', '90th', '80th', '70th','60th', '50th', '40th', '30th', '20th', '10th'] AS labels\n    FROM youtube\n)\nARRAY JOIN\n    quantiles,\n    labels;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"\u250c\u2500percentile\u2500\u252c\u2500\u2500\u2500views\u2500\u2510\n\u2502 99.9th     \u2502 1216624 \u2502\n\u2502 99th       \u2502  143519 \u2502\n\u2502 95th       \u2502   13542 \u2502\n\u2502 90th       \u2502    4054 \u2502\n\u2502 80th       \u2502     950 \u2502\n\u2502 70th       \u2502     363 \u2502\n\u2502 60th       \u2502     177 \u2502\n\u2502 50th       \u2502      97 \u2502\n\u2502 40th       \u2502      57 \u2502\n\u2502 30th       \u2502      32 \u2502\n\u2502 20th       \u2502      16 \u2502\n\u2502 10th       \u2502       6 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n12 rows in set. Elapsed: 1.864 sec. Processed 4.56 billion rows, 36.46 GB (2.45 billion rows/s., 19.56 GB/s.)\n")))}p.isMDXComponent=!0}}]);
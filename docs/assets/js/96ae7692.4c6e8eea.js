"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[22475],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=r.createContext({}),u=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(i.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(t),b=s,f=m["".concat(i,".").concat(b)]||m[b]||p[b]||a;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=b;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[m]="string"==typeof e?e:s,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},66929:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(87462),s=(t(67294),t(3905));const a={slug:"/en/sql-reference/table-functions/numbers",sidebar_position:39,sidebar_label:"numbers"},o="numbers",l={unversionedId:"en/sql-reference/table-functions/numbers",id:"en/sql-reference/table-functions/numbers",title:"numbers",description:"numbers(N) \u2013 Returns a table with the single \u2018number\u2019 column (UInt64) that contains integers from 0 to N-1.",source:"@site/docs/en/sql-reference/table-functions/numbers.md",sourceDirName:"en/sql-reference/table-functions",slug:"/en/sql-reference/table-functions/numbers",permalink:"/docs/en/sql-reference/table-functions/numbers",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/table-functions/numbers.md",tags:[],version:"current",sidebarPosition:39,frontMatter:{slug:"/en/sql-reference/table-functions/numbers",sidebar_position:39,sidebar_label:"numbers"},sidebar:"sqlreference",previous:{title:"merge",permalink:"/docs/en/sql-reference/table-functions/merge"},next:{title:"remote",permalink:"/docs/en/sql-reference/table-functions/remote"}},i={},u=[],c={toc:u},m="wrapper";function p(e){let{components:n,...t}=e;return(0,s.kt)(m,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"numbers"},"numbers"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"numbers(N)")," \u2013 Returns a table with the single \u2018number\u2019 column (UInt64) that contains integers from 0 to N-1.\n",(0,s.kt)("inlineCode",{parentName:"p"},"numbers(N, M)")," - Returns a table with the single \u2018number\u2019 column (UInt64) that contains integers from N to (N + M - 1)."),(0,s.kt)("p",null,"Similar to the ",(0,s.kt)("inlineCode",{parentName:"p"},"system.numbers")," table, it can be used for testing and generating successive values, ",(0,s.kt)("inlineCode",{parentName:"p"},"numbers(N, M)")," more efficient than ",(0,s.kt)("inlineCode",{parentName:"p"},"system.numbers"),"."),(0,s.kt)("p",null,"The following queries are equivalent:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM numbers(10);\nSELECT * FROM numbers(0, 10);\nSELECT * FROM system.numbers LIMIT 10;\n")),(0,s.kt)("p",null,"Examples:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- Generate a sequence of dates from 2010-01-01 to 2010-12-31\nselect toDate('2010-01-01') + number as d FROM numbers(365);\n")))}p.isMDXComponent=!0}}]);
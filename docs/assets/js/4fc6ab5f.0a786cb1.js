"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[92077],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return m}});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function o(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),s=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},u=function(e){var r=s(e.components);return t.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),f=s(n),m=a,b=f["".concat(c,".").concat(m)]||f[m]||p[m]||i;return n?t.createElement(b,l(l({ref:r},u),{},{components:n})):t.createElement(b,l({ref:r},u))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=f;var o={};for(var c in r)hasOwnProperty.call(r,c)&&(o[c]=r[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},77833:function(e,r,n){n.r(r),n.d(r,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var t=n(87462),a=n(63366),i=(n(67294),n(3905)),l=["components"],o={sidebar_position:38,sidebar_label:"merge"},c="merge",s={unversionedId:"en/reference/sql-reference/table-functions/merge",id:"en/reference/sql-reference/table-functions/merge",title:"merge",description:"merge}",source:"@site/docs/en/reference/sql-reference/table-functions/merge.md",sourceDirName:"en/reference/sql-reference/table-functions",slug:"/en/reference/sql-reference/table-functions/merge",permalink:"/en/reference/sql-reference/table-functions/merge",editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/reference/sql-reference/table-functions/merge.md",tags:[],version:"current",sidebarPosition:38,frontMatter:{sidebar_position:38,sidebar_label:"merge"},sidebar:"english",previous:{title:"file",permalink:"/en/reference/sql-reference/table-functions/file"},next:{title:"numbers",permalink:"/en/reference/sql-reference/table-functions/numbers"}},u={},p=[],f={toc:p};function m(e){var r=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,t.Z)({},f,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"merge"},"merge"),(0,i.kt)("p",null,"Creates a temporary ",(0,i.kt)("a",{parentName:"p",href:"/en/reference/engines/table-engines/special/merge"},"Merge")," table. The table structure is taken from the first table encountered that matches the regular expression."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"merge('db_name', 'tables_regexp')\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"db_name")," \u2014 Possible values:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"database name, "),(0,i.kt)("li",{parentName:"ul"},"constant expression that returns a string with a database name, for example, ",(0,i.kt)("inlineCode",{parentName:"li"},"currentDatabase()"),","),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"REGEXP(expression)"),", where ",(0,i.kt)("inlineCode",{parentName:"li"},"expression")," is a regular expression to match the DB names."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"tables_regexp")," \u2014 A regular expression to match the table names in the specified DB or DBs."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"See Also")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/engines/table-engines/special/merge"},"Merge")," table engine")))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[10221],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=c(a),m=l,k=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return a?n.createElement(k,o(o({ref:t},u),{},{components:a})):n.createElement(k,o({ref:t},u))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,o=new Array(i);o[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[p]="string"==typeof e?e:l,o[1]=r;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},40823:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var n=a(87462),l=(a(67294),a(3905));const i={slug:"/en/operations/utilities/clickhouse-local",sidebar_position:60,sidebar_label:"clickhouse-local"},o="clickhouse-local",r={unversionedId:"en/operations/utilities/clickhouse-local",id:"en/operations/utilities/clickhouse-local",title:"clickhouse-local",description:"When to use clickhouse-local vs. ClickHouse",source:"@site/docs/en/operations/utilities/clickhouse-local.md",sourceDirName:"en/operations/utilities",slug:"/en/operations/utilities/clickhouse-local",permalink:"/docs/en/operations/utilities/clickhouse-local",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/operations/utilities/clickhouse-local.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{slug:"/en/operations/utilities/clickhouse-local",sidebar_position:60,sidebar_label:"clickhouse-local"},sidebar:"docs",previous:{title:"clickhouse-client (CLI)",permalink:"/docs/en/integrations/sql-clients/clickhouse-client-local"},next:{title:"SQL Console",permalink:"/docs/en/integrations/sql-clients/sql-console"}},s={},c=[{value:"When to use clickhouse-local vs. ClickHouse",id:"when-to-use-clickhouse-local-vs-clickhouse",level:2},{value:"Download clickhouse-local",id:"download-clickhouse-local",level:2},{value:"Query data in a CSV file using SQL",id:"query-data-in-a-csv-file-using-sql",level:2},{value:"Query data in a Parquet file in AWS S3",id:"query-data-in-a-parquet-file-in-aws-s3",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2},{value:"Related Content",id:"related-content",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...a}=e;return(0,l.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"clickhouse-local"},"clickhouse-local"),(0,l.kt)("h2",{id:"when-to-use-clickhouse-local-vs-clickhouse"},"When to use clickhouse-local vs. ClickHouse"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," is an easy-to-use version of ClickHouse that is ideal for developers who need to perform fast processing on local and remote files using SQL without having to install a full database server. With ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local"),", developers can use SQL commands (using the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/"},"ClickHouse SQL dialect"),") directly from the command line, providing a simple and efficient way to access ClickHouse features without the need for a full ClickHouse installation. One of the main benefits of ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," is that it is already included when installing ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/integrations/sql-clients/clickhouse-client-local"},"clickhouse-client"),". This means that developers can get started with ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," quickly, without the need for a complex installation process."),(0,l.kt)("p",null,"While ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," is a great tool for development and testing purposes, and for processing files, it is not suitable for serving end users or applications. In these scenarios, it is recommended to use the open-source ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/install"},"ClickHouse"),". ClickHouse is a powerful OLAP database that is designed to handle large-scale analytical workloads. It provides fast and efficient processing of complex queries on large datasets, making it ideal for use in production environments where high-performance is critical. Additionally, ClickHouse offers a wide range of features such as replication, sharding, and high availability, which are essential for scaling up to handle large datasets and serving applications. If you need to handle larger datasets or serve end users or applications, we recommend using open-source ClickHouse instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local"),"."),(0,l.kt)("p",null,"Please read the docs below that show example use cases for ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local"),", such as ",(0,l.kt)("a",{parentName:"p",href:"#query-data-in-a-csv-file-using-sql"},"querying local CSVs")," or ",(0,l.kt)("a",{parentName:"p",href:"#query-data-in-a-parquet-file-in-aws-s3"},"reading a parquet file in S3"),"."),(0,l.kt)("h2",{id:"download-clickhouse-local"},"Download clickhouse-local"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," is executed using the same ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse")," binary that runs the ClickHouse server and ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-client"),". The easiest way to download the latest version is with the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://clickhouse.com/ | sh\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The binary you just downloaded can run all sorts of ClickHouse tools and utilities. If you want to run ClickHouse as a database server, check out the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/getting-started/quick-start"},"Quick Start"),".")),(0,l.kt)("h2",{id:"query-data-in-a-csv-file-using-sql"},"Query data in a CSV file using SQL"),(0,l.kt)("p",null,"A common use of ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," is to run ad-hoc queries on files: where you don't have to insert the data into a table. ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," can stream the data from a file into a temporary table and execute your SQL."),(0,l.kt)("p",null,"If the file is sitting on the same machine as ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local"),", use the ",(0,l.kt)("inlineCode",{parentName:"p"},"file")," table engine. The following ",(0,l.kt)("inlineCode",{parentName:"p"},"reviews.tsv")," file contains a sampling of Amazon product reviews:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./clickhouse local -q \"SELECT * FROM file('reviews.tsv')\"\n")),(0,l.kt)("p",null,"ClickHouse knows the file uses a tab-separated format from filename extension. If you need to explicitly specify the format, simply add one of the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/interfaces/formats"},"many ClickHouse input formats"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"```bash\n./clickhouse local -q \"SELECT * FROM file('reviews.tsv', 'TabSeparated')\"\n```\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"file")," table function creates a table, and you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"DESCRIBE")," to see the inferred schema:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./clickhouse local -q \"DESCRIBE file('reviews.tsv')\"\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"marketplace Nullable(String)\ncustomer_id Nullable(Int64)\nreview_id   Nullable(String)\nproduct_id  Nullable(String)\nproduct_parent  Nullable(Int64)\nproduct_title   Nullable(String)\nproduct_category    Nullable(String)\nstar_rating Nullable(Int64)\nhelpful_votes   Nullable(Int64)\ntotal_votes Nullable(Int64)\nvine    Nullable(String)\nverified_purchase   Nullable(String)\nreview_headline Nullable(String)\nreview_body Nullable(String)\nreview_date Nullable(Date)\n")),(0,l.kt)("p",null,"Let's find a product with the highest rating:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./clickhouse local -q \"SELECT\n    argMax(product_title,star_rating),\n    max(star_rating)\nFROM file('reviews.tsv')\"\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"Monopoly Junior Board Game  5\n")),(0,l.kt)("h2",{id:"query-data-in-a-parquet-file-in-aws-s3"},"Query data in a Parquet file in AWS S3"),(0,l.kt)("p",null,"If you have a file in S3, use ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," and the ",(0,l.kt)("inlineCode",{parentName:"p"},"s3")," table function to query the file in place (without inserting the data into a ClickHouse table). We have a file named ",(0,l.kt)("inlineCode",{parentName:"p"},"house_0.parquet")," in a public bucket that contains home prices of property sold in the United Kingdom. Let's see how many rows it has:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./clickhouse local -q \"\nSELECT count()\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/house_parquet/house_0.parquet')\"\n")),(0,l.kt)("p",null,"The file has 2.7M rows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"2772030\n")),(0,l.kt)("p",null,"It's always useful to see what the inferred schema that ClickHouse determines from the file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./clickhouse local -q \"DESCRIBE s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/house_parquet/house_0.parquet')\"\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"price   Nullable(Int64)\ndate    Nullable(UInt16)\npostcode1   Nullable(String)\npostcode2   Nullable(String)\ntype    Nullable(String)\nis_new  Nullable(UInt8)\nduration    Nullable(String)\naddr1   Nullable(String)\naddr2   Nullable(String)\nstreet  Nullable(String)\nlocality    Nullable(String)\ntown    Nullable(String)\ndistrict    Nullable(String)\ncounty  Nullable(String)\n")),(0,l.kt)("p",null,"Let's see what the most expensive neighborhoods are:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./clickhouse local -q \"\nSELECT\n    town,\n    district,\n    count() AS c,\n    round(avg(price)) AS price,\n    bar(price, 0, 5000000, 100)\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/house_parquet/house_0.parquet')\nGROUP BY\n    town,\n    district\nHAVING c >= 100\nORDER BY price DESC\nLIMIT 10\"\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-response"},"LONDON  CITY OF LONDON  886 2271305 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d\nLEATHERHEAD ELMBRIDGE   206 1176680 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\nLONDON  CITY OF WESTMINSTER 12577   1108221 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f\nLONDON  KENSINGTON AND CHELSEA  8728    1094496 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589\nHYTHE   FOLKESTONE AND HYTHE    130 1023980 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d\nCHALFONT ST GILES   CHILTERN    113 835754  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b\nAMERSHAM    BUCKINGHAMSHIRE 113 799596  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589\nVIRGINIA WATER  RUNNYMEDE   356 789301  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a\nBARNET  ENFIELD 282 740514  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a\nNORTHWOOD   THREE RIVERS    184 731609  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"When you are ready to insert your files into ClickHouse, startup a ClickHouse server and insert the results of your ",(0,l.kt)("inlineCode",{parentName:"p"},"file")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"s3")," table functions into a ",(0,l.kt)("inlineCode",{parentName:"p"},"MergeTree")," table. View the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/getting-started/quick-start"},"Quick Start")," for more details.")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"By default ",(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," has access to data of a ClickHouse server on the same host, and it does not depend on the server's configuration. It also supports loading server configuration using ",(0,l.kt)("inlineCode",{parentName:"p"},"--config-file")," argument. For temporary data, a unique temporary data directory is created by default."),(0,l.kt)("p",null,"Basic usage (Linux):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ clickhouse-local --structure "table_structure" --input-format "format_of_incoming_data" --query "query"\n')),(0,l.kt)("p",null,"Basic usage (Mac):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ ./clickhouse local --structure "table_structure" --input-format "format_of_incoming_data" --query "query"\n')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"clickhouse-local")," is also supported on Windows through WSL2.")),(0,l.kt)("p",null,"Arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-S"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"--structure")," \u2014 table structure for input data."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--input-format")," \u2014 input format, ",(0,l.kt)("inlineCode",{parentName:"li"},"TSV")," by default."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-f"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"--file")," \u2014 path to data, ",(0,l.kt)("inlineCode",{parentName:"li"},"stdin")," by default."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-q"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"--query")," \u2014 queries to execute with ",(0,l.kt)("inlineCode",{parentName:"li"},";")," as delimeter. You must specify either ",(0,l.kt)("inlineCode",{parentName:"li"},"query")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"queries-file")," option."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--queries-file")," - file path with queries to execute. You must specify either ",(0,l.kt)("inlineCode",{parentName:"li"},"query")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"queries-file")," option."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-N"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"--table")," \u2014 table name where to put output data, ",(0,l.kt)("inlineCode",{parentName:"li"},"table")," by default."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--format"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"--output-format")," \u2014 output format, ",(0,l.kt)("inlineCode",{parentName:"li"},"TSV")," by default."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-d"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"--database")," \u2014 default database, ",(0,l.kt)("inlineCode",{parentName:"li"},"_local")," by default."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--stacktrace")," \u2014 whether to dump debug output in case of exception."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--echo")," \u2014 print query before execution."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--verbose")," \u2014 more details on query execution."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--logger.console")," \u2014 Log to console."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--logger.log")," \u2014 Log file name."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--logger.level")," \u2014 Log level."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--ignore-error")," \u2014 do not stop processing if a query failed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-c"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"--config-file")," \u2014 path to configuration file in same format as for ClickHouse server, by default the configuration empty."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--no-system-tables")," \u2014 do not attach system tables."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--help")," \u2014 arguments references for ",(0,l.kt)("inlineCode",{parentName:"li"},"clickhouse-local"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-V"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"--version")," \u2014 print version information and exit.")),(0,l.kt)("p",null,"Also there are arguments for each ClickHouse configuration variable which are more commonly used instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"--config-file"),"."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ echo -e "1,2\\n3,4" | clickhouse-local --structure "a Int64, b Int64" \\\n    --input-format "CSV" --query "SELECT * FROM table"\nRead 2 rows, 32.00 B in 0.000 sec., 5182 rows/sec., 80.97 KiB/sec.\n1   2\n3   4\n')),(0,l.kt)("p",null,"Previous example is the same as:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ echo -e "1,2\\n3,4" | clickhouse-local --query "\n    CREATE TABLE table (a Int64, b Int64) ENGINE = File(CSV, stdin);\n    SELECT a, b FROM table;\n    DROP TABLE table"\nRead 2 rows, 32.00 B in 0.000 sec., 4987 rows/sec., 77.93 KiB/sec.\n1   2\n3   4\n')),(0,l.kt)("p",null,"You don't have to use ",(0,l.kt)("inlineCode",{parentName:"p"},"stdin")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"--file")," argument, and can open any number of files using the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/table-functions/file"},(0,l.kt)("inlineCode",{parentName:"a"},"file")," table function"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ echo 1 | tee 1.tsv\n1\n\n$ echo 2 | tee 2.tsv\n2\n\n$ clickhouse-local --query \"\n    select * from file('1.tsv', TSV, 'a int') t1\n    cross join file('2.tsv', TSV, 'b int') t2\"\n1   2\n")),(0,l.kt)("p",null,"Now let\u2019s output memory user for each Unix user:"),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ ps aux | tail -n +2 | awk \'{ printf("%s\\t%s\\n", $1, $4) }\' \\\n    | clickhouse-local --structure "user String, mem Float64" \\\n        --query "SELECT user, round(sum(mem), 2) as memTotal\n            FROM table GROUP BY user ORDER BY memTotal DESC FORMAT Pretty"\n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Read 186 rows, 4.15 KiB in 0.035 sec., 5302 rows/sec., 118.34 KiB/sec.\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 user     \u2503 memTotal \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 bayonet  \u2502    113.5 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 root     \u2502      8.8 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n...\n")),(0,l.kt)("h2",{id:"related-content"},"Related Content"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://clickhouse.com/blog/extracting-converting-querying-local-files-with-sql-clickhouse-local"},"Extracting, converting, and querying data in local files using clickhouse-local")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://clickhouse.com/blog/getting-data-into-clickhouse-part-1"},"Getting Data Into ClickHouse - Part 1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://clickhouse.com/blog/real-world-data-noaa-climate-data"},"Exploring massive, real-world data sets: 100+ Years of Weather Records in ClickHouse"))))}d.isMDXComponent=!0}}]);
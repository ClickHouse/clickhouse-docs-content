"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[98699],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),p=l(n),u=i,b=p["".concat(d,".").concat(u)]||p[u]||c[u]||o;return n?a.createElement(b,s(s({ref:t},m),{},{components:n})):a.createElement(b,s({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=p;var r={};for(var d in t)hasOwnProperty.call(t,d)&&(r[d]=t[d]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},25213:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const o={sidebar_label:"Setup",sidebar_position:2,slug:"/en/integrations/dbt/dbt-setup",description:"Setup of dbt and the ClickHouse plugin"},s="Installation",r={unversionedId:"en/integrations/data-ingestion/etl-tools/dbt/dbt-setup",id:"en/integrations/data-ingestion/etl-tools/dbt/dbt-setup",title:"Installation",description:"Setup of dbt and the ClickHouse plugin",source:"@site/docs/en/integrations/data-ingestion/etl-tools/dbt/dbt-setup.md",sourceDirName:"en/integrations/data-ingestion/etl-tools/dbt",slug:"/en/integrations/dbt/dbt-setup",permalink:"/docs/en/integrations/dbt/dbt-setup",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/data-ingestion/etl-tools/dbt/dbt-setup.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Setup",sidebar_position:2,slug:"/en/integrations/dbt/dbt-setup",description:"Setup of dbt and the ClickHouse plugin"},sidebar:"english",previous:{title:"Introduction",permalink:"/docs/en/integrations/dbt/dbt-intro"},next:{title:"Connecting to ClickHouse",permalink:"/docs/en/integrations/dbt/dbt-connecting"}},d={},l=[{value:"dbt",id:"dbt",level:2},{value:"ClickHouse plugin",id:"clickhouse-plugin",level:2}],m={toc:l};function c(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"installation"},"Installation"),(0,i.kt)("h2",{id:"dbt"},"dbt"),(0,i.kt)("p",null,"We assume the use of the dbt CLI for the following examples. Users may also wish to consider",(0,i.kt)("a",{parentName:"p",href:"https://docs.getdbt.com/docs/dbt-cloud/cloud-overview"}," dbt Cloud"),", which offers a web-based Integrated Development Environment (IDE) allowing users to edit and run projects."),(0,i.kt)("p",null,"dbt offers a number of options for CLI installation. Follow the instructions described",(0,i.kt)("a",{parentName:"p",href:"https://docs.getdbt.com/dbt-cli/install/overview"}," here"),". At this stage install dbt-core only. We recommend the use of ",(0,i.kt)("inlineCode",{parentName:"p"},"pip"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install dbt-core\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Important: The following is tested under python 3.9.")),(0,i.kt)("h2",{id:"clickhouse-plugin"},"ClickHouse plugin"),(0,i.kt)("p",null,"Install the dbt ClickHouse plugin:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install dbt-clickhouse\n")),(0,i.kt)("h1",{id:"prepare-clickhouse"},"Prepare ClickHouse"),(0,i.kt)("p",null,"dbt excels when modeling highly relational data. For the purposes of example, we provide a small IMDB dataset with the following relational schema. This dataset originates from the",(0,i.kt)("a",{parentName:"p",href:"https://relational.fit.cvut.cz/dataset/IMDb"}," relational dataset repository"),". This is trivial relative to common schemas used with dbt but represents a manageable sample:"),(0,i.kt)("img",{src:n(97988).Z,class:"image",alt:"IMDB table schema",style:{width:"100%"}}),(0,i.kt)("p",null,"We use a subset of these tables as shown."),(0,i.kt)("p",null,"Create the following tables:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE imdb;\n\nCREATE TABLE imdb.actors\n(\n    id         UInt32,\n    first_name String,\n    last_name  String,\n    gender     FixedString(1)\n) ENGINE = MergeTree ORDER BY (id, first_name, last_name, gender);\n\nCREATE TABLE imdb.directors\n(\n    id         UInt32,\n    first_name String,\n    last_name  String\n) ENGINE = MergeTree ORDER BY (id, first_name, last_name);\n\nCREATE TABLE imdb.genres\n(\n    movie_id UInt32,\n    genre    String\n) ENGINE = MergeTree ORDER BY (movie_id, genre);\n\nCREATE TABLE imdb.movie_directors\n(\n    director_id UInt32,\n    movie_id    UInt64\n) ENGINE = MergeTree ORDER BY (director_id, movie_id);\n\nCREATE TABLE imdb.movies\n(\n    id   UInt32,\n    name String,\n    year UInt32,\n    rank Float32 DEFAULT 0\n) ENGINE = MergeTree ORDER BY (id, name, year);\n\nCREATE TABLE imdb.roles\n(\n    created_at DateTime DEFAULT now(),\n    actor_id   UInt32,\n    movie_id   UInt32,\n    role       String\n) ENGINE = MergeTree ORDER BY (actor_id, movie_id);\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The column ",(0,i.kt)("inlineCode",{parentName:"p"},"created_at")," for the table ",(0,i.kt)("inlineCode",{parentName:"p"},"roles"),", which defaults to a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"now()"),". We use this later to identify incremental updates to our models - see ",(0,i.kt)("a",{parentName:"p",href:"./dbt-incremental-model"},"Incremental Models"),"."))),(0,i.kt)("p",null,"We use the ",(0,i.kt)("inlineCode",{parentName:"p"},"s3")," function to read the source data from public endpoints to insert data. Run the following commands to populate the tables:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO imdb.actors\nSELECT *\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/imdb/imdb_ijs_actors.tsv.gz',\n'TSVWithNames');\n\nINSERT INTO imdb.directors\nSELECT *\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/imdb/imdb_ijs_directors.tsv.gz',\n'TSVWithNames');\n\nINSERT INTO imdb.genres\nSELECT *\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/imdb/imdb_ijs_movies_genres.tsv.gz',\n'TSVWithNames');\n\nINSERT INTO imdb.movie_directors\nSELECT *\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/imdb/imdb_ijs_movies_directors.tsv.gz',\n        'TSVWithNames');\n\nINSERT INTO imdb.movies\nSELECT *\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/imdb/imdb_ijs_movies.tsv.gz',\n'TSVWithNames');\n\nINSERT INTO imdb.roles\n(* EXCEPT(created_at))\nSELECT *\nFROM s3('https://datasets-documentation.s3.eu-west-3.amazonaws.com/imdb/imdb_ijs_roles.tsv.gz',\n'TSVWithNames');\n\n")),(0,i.kt)("p",null,"The execution of these may vary depending on your bandwidth, but each should only take a few seconds to complete. Execute the following query to compute a summary of each actor, ordered by the most movie appearances, and to confirm the data was loaded successfully:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id,\n       any(actor_name)          as name,\n       uniqExact(movie_id)    as num_movies,\n       avg(rank)                as avg_rank,\n       uniqExact(genre)         as unique_genres,\n       uniqExact(director_name) as uniq_directors,\n       max(created_at)          as updated_at\nFROM (\n         SELECT imdb.actors.id  as id,\n                concat(imdb.actors.first_name, ' ', imdb.actors.last_name)  as actor_name,\n                imdb.movies.id as movie_id,\n                imdb.movies.rank as rank,\n                genre,\n                concat(imdb.directors.first_name, ' ', imdb.directors.last_name) as director_name,\n                created_at\n         FROM imdb.actors\n                  JOIN imdb.roles ON imdb.roles.actor_id = imdb.actors.id\n                  LEFT OUTER JOIN imdb.movies ON imdb.movies.id = imdb.roles.movie_id\n                  LEFT OUTER JOIN imdb.genres ON imdb.genres.movie_id = imdb.movies.id\n                  LEFT OUTER JOIN imdb.movie_directors ON imdb.movie_directors.movie_id = imdb.movies.id\n                  LEFT OUTER JOIN imdb.directors ON imdb.directors.id = imdb.movie_directors.director_id\n         )\nGROUP BY id\nORDER BY num_movies DESC\nLIMIT 5;\n")),(0,i.kt)("p",null,"The response should look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-response"},"+------+------------+----------+------------------+-------------+--------------+-------------------+\n|id    |name        |num_movies|avg_rank          |unique_genres|uniq_directors|updated_at         |\n+------+------------+----------+------------------+-------------+--------------+-------------------+\n|45332 |Mel Blanc   |832       |6.175853582979779 |18           |84            |2022-04-26 14:01:45|\n|621468|Bess Flowers|659       |5.57727638854796  |19           |293           |2022-04-26 14:01:46|\n|372839|Lee Phelps  |527       |5.032976449684617 |18           |261           |2022-04-26 14:01:46|\n|283127|Tom London  |525       |2.8721716524875673|17           |203           |2022-04-26 14:01:46|\n|356804|Bud Osborne |515       |2.0389507108727773|15           |149           |2022-04-26 14:01:46|\n+------+------------+----------+------------------+-------------+--------------+-------------------+\n")),(0,i.kt)("p",null,"In the later guides, we will convert this query into a model - materializing it in ClickHouse as a dbt view and table."))}c.isMDXComponent=!0},97988:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dbt_01-24a161b0216de65d39a8785fb345730e.png"}}]);
"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[97378],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),y=a,m=u["".concat(p,".").concat(y)]||u[y]||d[y]||i;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=y;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},66743:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const i={slug:"/en/interfaces/third-party/proxy",sidebar_position:29,sidebar_label:"Proxies"},o="Proxy Servers from Third-party Developers",l={unversionedId:"en/interfaces/third-party/proxy",id:"en/interfaces/third-party/proxy",title:"Proxy Servers from Third-party Developers",description:"chproxy",source:"@site/docs/en/interfaces/third-party/proxy.md",sourceDirName:"en/interfaces/third-party",slug:"/en/interfaces/third-party/proxy",permalink:"/docs/en/interfaces/third-party/proxy",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/interfaces/third-party/proxy.md",tags:[],version:"current",sidebarPosition:29,frontMatter:{slug:"/en/interfaces/third-party/proxy",sidebar_position:29,sidebar_label:"Proxies"},sidebar:"docs",previous:{title:"Visual Interfaces",permalink:"/docs/en/interfaces/third-party/gui"},next:{title:"DataGrip",permalink:"/docs/en/integrations/datagrip"}},p={},s=[{value:"chproxy",id:"chproxy",level:2},{value:"KittenHouse",id:"kittenhouse",level:2},{value:"ClickHouse-Bulk",id:"clickhouse-bulk",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"proxy-servers-from-third-party-developers"},"Proxy Servers from Third-party Developers"),(0,a.kt)("h2",{id:"chproxy"},"chproxy"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Vertamedia/chproxy"},"chproxy"),", is an HTTP proxy and load balancer for ClickHouse database."),(0,a.kt)("p",null,"Features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Per-user routing and response caching."),(0,a.kt)("li",{parentName:"ul"},"Flexible limits."),(0,a.kt)("li",{parentName:"ul"},"Automatic SSL certificate renewal.")),(0,a.kt)("p",null,"Implemented in Go."),(0,a.kt)("h2",{id:"kittenhouse"},"KittenHouse"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/VKCOM/kittenhouse"},"KittenHouse")," is designed to be a local proxy between ClickHouse and application server in case it\u2019s impossible or inconvenient to buffer INSERT data on your application side."),(0,a.kt)("p",null,"Features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In-memory and on-disk data buffering."),(0,a.kt)("li",{parentName:"ul"},"Per-table routing."),(0,a.kt)("li",{parentName:"ul"},"Load-balancing and health checking.")),(0,a.kt)("p",null,"Implemented in Go."),(0,a.kt)("h2",{id:"clickhouse-bulk"},"ClickHouse-Bulk"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/nikepan/clickhouse-bulk"},"ClickHouse-Bulk")," is a simple ClickHouse insert collector."),(0,a.kt)("p",null,"Features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Group requests and send by threshold or interval."),(0,a.kt)("li",{parentName:"ul"},"Multiple remote servers."),(0,a.kt)("li",{parentName:"ul"},"Basic authentication.")),(0,a.kt)("p",null,"Implemented in Go."))}d.isMDXComponent=!0}}]);
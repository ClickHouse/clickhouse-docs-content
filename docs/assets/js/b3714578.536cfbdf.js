"use strict";(self.webpackChunkclickhouse_docs_2_3_0=self.webpackChunkclickhouse_docs_2_3_0||[]).push([[20715],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},27666:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),o=(n(67294),n(3905));const r={toc:[]},i="wrapper";function l(e){let{components:t,...l}=e;return(0,o.kt)(i,(0,a.Z)({},r,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To connect to ClickHouse with native TCP you need this information:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The HOST and PORT: typically, the port is 9440 when using TLS, or 9000 when not using TLS.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The DATABASE NAME: out of the box there is a database named ",(0,o.kt)("inlineCode",{parentName:"p"},"default"),", use the name of the database that you want to connect to.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The USERNAME and PASSWORD: out of the box the username is ",(0,o.kt)("inlineCode",{parentName:"p"},"default"),". Use the username appropriate for your use case."))),(0,o.kt)("p",null,"The details for your ClickHouse Cloud service are available in the ClickHouse Cloud console.  Select the service that you will connect to and click ",(0,o.kt)("strong",{parentName:"p"},"Connect"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"ClickHouse Cloud service connect button",src:n(64872).Z,width:"939",height:"474"})),(0,o.kt)("p",null,"Choose ",(0,o.kt)("strong",{parentName:"p"},"Native"),", and the details are available in an example ",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse-client")," command. "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"ClickHouse Cloud Native TCP connection details",src:n(22998).Z,width:"581",height:"470"})),(0,o.kt)("p",null,"If you are using self-managed ClickHouse, the connection details are set by your ClickHouse administrator."))}l.isMDXComponent=!0},59528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(87462),o=(n(67294),n(3905)),r=n(27666);const i={sidebar_label:"Introduction",sidebar_position:1,keywords:["clickhouse","go","client","golang"],slug:"/en/integrations/go/intro",description:"The Go clients for ClickHouse allows users to connect to ClickHouse using either the Go standard database/sql interface or an optimized native interface."},l="ClickHouse Go",c={unversionedId:"en/integrations/language-clients/go/intro",id:"en/integrations/language-clients/go/intro",title:"ClickHouse Go",description:"The Go clients for ClickHouse allows users to connect to ClickHouse using either the Go standard database/sql interface or an optimized native interface.",source:"@site/docs/en/integrations/language-clients/go/intro.md",sourceDirName:"en/integrations/language-clients/go",slug:"/en/integrations/go/intro",permalink:"/docs/en/integrations/go/intro",draft:!1,editUrl:"https://github.com/ClickHouse/clickhouse-docs/blob/main/docs/en/integrations/language-clients/go/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Introduction",sidebar_position:1,keywords:["clickhouse","go","client","golang"],slug:"/en/integrations/go/intro",description:"The Go clients for ClickHouse allows users to connect to ClickHouse using either the Go standard database/sql interface or an optimized native interface."},sidebar:"english",previous:{title:"Go",permalink:"/docs/en/integrations/go"},next:{title:"Choosing a Client",permalink:"/docs/en/integrations/go/choosing-a-client"}},s={},u=[{value:"A simple example",id:"a-simple-example",level:2},{value:"Connection Details",id:"connection-details",level:3},{value:"Initialize a module",id:"initialize-a-module",level:3},{value:"Copy in some sample code",id:"copy-in-some-sample-code",level:3},{value:"Run go mod tidy",id:"run-go-mod-tidy",level:3},{value:"Set your connection details",id:"set-your-connection-details",level:3},{value:"Run the example",id:"run-the-example",level:3},{value:"Learn more",id:"learn-more",level:3},{value:"ClickHouse Go Client",id:"clickhouse-go-client",level:2}],d={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"clickhouse-go"},"ClickHouse Go"),(0,o.kt)("h2",{id:"a-simple-example"},"A simple example"),(0,o.kt)("p",null,"Let's Go with a simple example.  This will connect to ClickHouse and select from the system database.  To get started you will need your connection details."),(0,o.kt)("h3",{id:"connection-details"},"Connection Details"),(0,o.kt)(r.ZP,{mdxType:"ConnectionDetails"}),(0,o.kt)("h3",{id:"initialize-a-module"},"Initialize a module"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir clickhouse-golang-example\ncd clickhouse-golang-example\ngo mod init clickhouse-golang-example\n")),(0,o.kt)("h3",{id:"copy-in-some-sample-code"},"Copy in some sample code"),(0,o.kt)("p",null,"Copy this code into the ",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse-golang-example")," directory as ",(0,o.kt)("inlineCode",{parentName:"p"},"main.go"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"title=main.go",title:"main.go"},'package main\n\nimport (\n    "context"\n    "crypto/tls"\n    "fmt"\n    "log"\n\n    "github.com/ClickHouse/clickhouse-go/v2"\n    "github.com/ClickHouse/clickhouse-go/v2/lib/driver"\n)\n\nfunc main() {\n    conn, err := connect()\n    if err != nil {\n        panic((err))\n    }\n\n    ctx := context.Background()\n    rows, err := conn.Query(ctx, "SELECT name,toString(uuid) as uuid_str FROM system.tables LIMIT 5")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for rows.Next() {\n        var (\n            name, uuid string\n        )\n        if err := rows.Scan(\n            &name,\n            &uuid,\n        ); err != nil {\n            log.Fatal(err)\n        }\n        log.Printf("name: %s, uuid: %s",\n            name, uuid)\n    }\n\n}\n\nfunc connect() (driver.Conn, error) {\n    var (\n        ctx       = context.Background()\n        conn, err = clickhouse.Open(&clickhouse.Options{\n            Addr: []string{"<CLICKHOUSE_SECURE_NATIVE_HOSTNAME>:9440"},\n            Auth: clickhouse.Auth{\n                Database: "default",\n                Username: "default",\n                Password: "<DEFAULT_USER_PASSWORD>",\n            },\n            ClientInfo: clickhouse.ClientInfo{\n                Products: []struct {\n                    Name    string\n                    Version string\n                }{\n                    {Name: "an-example-go-client", Version: "0.1"},\n                },\n            },\n\n            Debugf: func(format string, v ...interface{}) {\n                fmt.Printf(format, v)\n            },\n            TLS: &tls.Config{\n                InsecureSkipVerify: true,\n            },\n        })\n    )\n\n    if err != nil {\n        return nil, err\n    }\n\n    if err := conn.Ping(ctx); err != nil {\n        if exception, ok := err.(*clickhouse.Exception); ok {\n            fmt.Printf("Exception [%d] %s \\n%s\\n", exception.Code, exception.Message, exception.StackTrace)\n        }\n        return nil, err\n    }\n    return conn, nil\n}\n')),(0,o.kt)("h3",{id:"run-go-mod-tidy"},"Run go mod tidy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go mod tidy\n")),(0,o.kt)("h3",{id:"set-your-connection-details"},"Set your connection details"),(0,o.kt)("p",null,"Earlier you looked up your connection details.  Set them in ",(0,o.kt)("inlineCode",{parentName:"p"},"main.go")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"connect()")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func connect() (driver.Conn, error) {\n  var (\n    ctx       = context.Background()\n    conn, err = clickhouse.Open(&clickhouse.Options{\n    #highlight-next-line\n      Addr: []string{"<CLICKHOUSE_SECURE_NATIVE_HOSTNAME>:9440"},\n      Auth: clickhouse.Auth{\n    #highlight-start\n        Database: "default",\n        Username: "default",\n        Password: "<DEFAULT_USER_PASSWORD>",\n    #highlight-end\n      },\n')),(0,o.kt)("h3",{id:"run-the-example"},"Run the example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go run .\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-response"},"2023/03/06 14:18:33 name: COLUMNS, uuid: 00000000-0000-0000-0000-000000000000\n2023/03/06 14:18:33 name: SCHEMATA, uuid: 00000000-0000-0000-0000-000000000000\n2023/03/06 14:18:33 name: TABLES, uuid: 00000000-0000-0000-0000-000000000000\n2023/03/06 14:18:33 name: VIEWS, uuid: 00000000-0000-0000-0000-000000000000\n2023/03/06 14:18:33 name: hourly_data, uuid: a4e36bd4-1e82-45b3-be77-74a0fe65c52b\n")),(0,o.kt)("h3",{id:"learn-more"},"Learn more"),(0,o.kt)("p",null,"The rest of the documentation in this category covers the details of the ClickHouse Go client."),(0,o.kt)("h2",{id:"clickhouse-go-client"},"ClickHouse Go Client"),(0,o.kt)("p",null,"ClickHouse supports two official Go clients. These clients are complementary and intentionally support different use cases."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/ClickHouse/clickhouse-go"},"clickhouse-go")," - High level language client which supports either the Go standard database/sql interface or the native interface."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/ClickHouse/ch-go"},"ch-go")," - Low level client. Native interface only.")),(0,o.kt)("p",null,"clickhouse-go provides a high-level interface, allowing users to query and insert data using row-orientated semantics and batching that are lenient with respect to data types - values will be converted provided no precision loss is potentially incurred. ch-go, meanwhile, provides an optimized column-orientated interface that provides fast data block streaming with low CPU and memory overhead at the expense of type strictness and more complex usage. "),(0,o.kt)("p",null,"From version 2.3, Clickhouse-go utilizes ch-go for low-level functions such as encoding, decoding, and compression. Note that clickhouse-go also supports the Go ",(0,o.kt)("inlineCode",{parentName:"p"},"database/sql")," interface standard. Both clients use the native format for their encoding to provide optimal performance and can communicate over the native ClickHouse protocol. clickhouse-go also supports HTTP as its transport mechanism for cases where users have a requirement to proxy or load balance traffic."),(0,o.kt)("p",null,"When choosing a client library, users should be aware of their respective pros and cons - see Choosing a Client Library."),(0,o.kt)("div",{class:"adopters-table"},(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"}),(0,o.kt)("th",{parentName:"tr",align:"center"},"Native format"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Native protocol"),(0,o.kt)("th",{parentName:"tr",align:"center"},"HTTP protocol"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Row Orientated API"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Column Orientated API"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Type flexibility"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Compression"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Query Placeholders"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"clickhouse-go"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"ch-go"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,o.kt)("td",{parentName:"tr",align:"center"}),(0,o.kt)("td",{parentName:"tr",align:"center"}),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,o.kt)("td",{parentName:"tr",align:"center"}),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u2705"),(0,o.kt)("td",{parentName:"tr",align:"center"}))))))}m.isMDXComponent=!0},64872:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cloud-connect-button-e2247559831d9d3549387ddfb0deee9b.png"},22998:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/connection-details-native-ea0d0d9f42237c5a9e10015473a069d6.png"}}]);
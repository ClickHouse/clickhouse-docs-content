"use strict";(self.webpackChunknew_nav_docusaurus_2_2=self.webpackChunknew_nav_docusaurus_2_2||[]).push([[85825],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,f=c["".concat(o,".").concat(u)]||c[u]||m[u]||i;return a?n.createElement(f,l(l({ref:t},d),{},{components:a})):n.createElement(f,l({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},41657:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={slug:"/en/sql-reference/data-types/",sidebar_label:"List of data types",sidebar_position:37},l="ClickHouse Data Types",s={unversionedId:"en/sql-reference/data-types/index",id:"en/sql-reference/data-types/index",title:"ClickHouse Data Types",description:"ClickHouse can store various kinds of data in table cells. This section describes the supported data types and special considerations for using and/or implementing them if any.",source:"@site/docs/en/sql-reference/data-types/index.md",sourceDirName:"en/sql-reference/data-types",slug:"/en/sql-reference/data-types/",permalink:"/docs/en/sql-reference/data-types/",draft:!1,editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/data-types/index.md",tags:[],version:"current",sidebarPosition:37,frontMatter:{slug:"/en/sql-reference/data-types/",sidebar_label:"List of data types",sidebar_position:37},sidebar:"sqlreference",previous:{title:"ANSI Compatibility",permalink:"/docs/en/sql-reference/ansi"},next:{title:"UInt8, UInt16, UInt32, UInt64, UInt128, UInt256, Int8, Int16, Int32, Int64, Int128, Int256",permalink:"/docs/en/sql-reference/data-types/int-uint"}},o={},p=[],d={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"clickhouse-data-types"},"ClickHouse Data Types"),(0,r.kt)("p",null,"ClickHouse can store various kinds of data in table cells. This section describes the supported data types and special considerations for using and/or implementing them if any."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can check whether a data type name is case-sensitive in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/operations/system-tables/data_type_families#system_tables-data_type_families"},"system.data_type_families")," table.")),(0,r.kt)("p",null,"ClickHouse data types include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Integer types"),": ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"signed and unsigned integers")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt8"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt16"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt32"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt64"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt128"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt256"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Int8"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Int16"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Int32"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Int64"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Int128"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Int256"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Floating-point numbers"),": ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/float"},"floats"),"(",(0,r.kt)("inlineCode",{parentName:"li"},"Float32")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Float64"),") and ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/decimal"},(0,r.kt)("inlineCode",{parentName:"a"},"Decimal")," values")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Boolean"),": ClickHouse has a ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/boolean"},(0,r.kt)("inlineCode",{parentName:"a"},"Boolean")," type")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Strings"),": ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/string"},(0,r.kt)("inlineCode",{parentName:"a"},"String"))," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/fixedstring"},(0,r.kt)("inlineCode",{parentName:"a"},"FixedString"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Dates"),": use ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/date"},(0,r.kt)("inlineCode",{parentName:"a"},"Date"))," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/date32"},(0,r.kt)("inlineCode",{parentName:"a"},"Date32"))," for days, and ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/datetime"},(0,r.kt)("inlineCode",{parentName:"a"},"DateTime"))," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/datetime64"},(0,r.kt)("inlineCode",{parentName:"a"},"DateTime64"))," for instances in time"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JSON"),": the ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/json"},(0,r.kt)("inlineCode",{parentName:"a"},"JSON")," object")," stores a JSON document in a single column"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"UUID"),": a performant option for storing ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/uuid"},(0,r.kt)("inlineCode",{parentName:"a"},"UUID")," values")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Low cardinality types"),": use an ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/enum"},(0,r.kt)("inlineCode",{parentName:"a"},"Enum"))," when you have a handful of unique values, or use ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/lowcardinality"},(0,r.kt)("inlineCode",{parentName:"a"},"LowCardinality"))," when you have up to 10,000 unique values of a column"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Arrays"),": any column can be defined as an ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/array"},(0,r.kt)("inlineCode",{parentName:"a"},"Array")," of values")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Maps"),": use ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/map"},(0,r.kt)("inlineCode",{parentName:"a"},"Map"))," for storing key/value pairs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Aggregation function types"),": use ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/simpleaggregatefunction"},(0,r.kt)("inlineCode",{parentName:"a"},"SimpleAggregateFunction"))," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/aggregatefunction"},(0,r.kt)("inlineCode",{parentName:"a"},"AggregateFunction"))," for storing the intermediate status of aggregate function results"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Nested data structures"),": A ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/nested-data-structures/nested"},(0,r.kt)("inlineCode",{parentName:"a"},"Nested")," data structure")," is like a table inside a cell"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Tuples"),": A ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},(0,r.kt)("inlineCode",{parentName:"a"},"Tuple")," of elements"),", each having an individual type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Nullable"),": ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/nullable"},(0,r.kt)("inlineCode",{parentName:"a"},"Nullbale"))," allows you to store a value as ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL"),' when a value is "missing" (instead of the column gettings its default value for the data type)'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IP addresses"),": use ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/domains/ipv4"},(0,r.kt)("inlineCode",{parentName:"a"},"IPv4"))," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/domains/ipv6"},(0,r.kt)("inlineCode",{parentName:"a"},"IPv6"))," to efficiently store IP addresses"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Geo types"),": for",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/geo"}," geographical data"),", including ",(0,r.kt)("inlineCode",{parentName:"li"},"Point"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Ring"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Polygon")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"MultiPolygon")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Special data types"),": including ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/special-data-types/expression"},(0,r.kt)("inlineCode",{parentName:"a"},"Expression")),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/special-data-types/set"},(0,r.kt)("inlineCode",{parentName:"a"},"Set")),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/special-data-types/nothing"},(0,r.kt)("inlineCode",{parentName:"a"},"Nothing"))," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/special-data-types/interval"},(0,r.kt)("inlineCode",{parentName:"a"},"Interval")))))}m.isMDXComponent=!0}}]);
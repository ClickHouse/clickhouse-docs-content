"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[13535],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),u=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),f=u(t),m=r,k=f["".concat(p,".").concat(m)]||f[m]||c[m]||l;return t?a.createElement(k,o(o({ref:n},s),{},{components:t})):a.createElement(k,o({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=f;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},95139:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var a=t(87462),r=t(63366),l=(t(67294),t(3905)),o=["components"],i={sidebar_position:37,sidebar_label:"Logical"},p="Logical Functions",u={unversionedId:"en/reference/sql-reference/functions/logical-functions",id:"en/reference/sql-reference/functions/logical-functions",title:"Logical Functions",description:"logical-functions}",source:"@site/docs/en/reference/sql-reference/functions/logical-functions.md",sourceDirName:"en/reference/sql-reference/functions",slug:"/en/reference/sql-reference/functions/logical-functions",permalink:"/en/reference/sql-reference/functions/logical-functions",editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/reference/sql-reference/functions/logical-functions.md",tags:[],version:"current",sidebarPosition:37,frontMatter:{sidebar_position:37,sidebar_label:"Logical"},sidebar:"english",previous:{title:"Comparison",permalink:"/en/reference/sql-reference/functions/comparison-functions"},next:{title:"Type Conversion",permalink:"/en/reference/sql-reference/functions/type-conversion-functions"}},s={},c=[{value:"and",id:"logical-and-function",level:2},{value:"or",id:"logical-or-function",level:2},{value:"not",id:"logical-not-function",level:2},{value:"xor",id:"logical-xor-function",level:2}],f={toc:c};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"logical-functions"},"Logical Functions"),(0,l.kt)("p",null,"Performs logical operations on arguments of any numeric types, but returns a ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8")," number equal to 0, 1 or ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," in some cases."),(0,l.kt)("p",null,"Zero as an argument is considered ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),", while any non-zero value is considered ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("h2",{id:"logical-and-function"},"and"),(0,l.kt)("p",null,"Calculates the result of the logical conjunction between two or more values. Corresponds to ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/operators/#logical-and-operator"},"Logical AND Operator"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"and(val1, val2...)\n")),(0,l.kt)("p",null,"You can use the ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/operations/settings/#short-circuit-function-evaluation"},"short_circuit_function_evaluation")," setting to calculate the ",(0,l.kt)("inlineCode",{parentName:"p"},"and")," function according to a short scheme. If this setting is enabled, ",(0,l.kt)("inlineCode",{parentName:"p"},"vali")," is evaluated only on rows where ",(0,l.kt)("inlineCode",{parentName:"p"},"(val1 AND val2 AND ... AND val{i-1})")," is true. For example, an exception about division by zero is not thrown when executing the query ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT and(number = 2, intDiv(1, number)) FROM numbers(10)"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"val1, val2, ...")," \u2014 List of at least two values. ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"Int"),", ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt"),", ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/float"},"Float")," or ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"0"),", if there is at least one zero value argument."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),", if there are no zero values arguments and there is at least one ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," argument."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1"),", otherwise.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8")," or ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),"(",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT and(0, 1, -2);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500and(0, 1, -2)\u2500\u2510\n\u2502             0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT and(NULL, 1, 10, -2);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500and(NULL, 1, 10, -2)\u2500\u2510\n\u2502                 \u1d3a\u1d41\u1d38\u1d38 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"logical-or-function"},"or"),(0,l.kt)("p",null,"Calculates the result of the logical disjunction between two or more values. Corresponds to ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/operators/#logical-or-operator"},"Logical OR Operator"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"or(val1, val2...)\n")),(0,l.kt)("p",null,"You can use the ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/operations/settings/#short-circuit-function-evaluation"},"short_circuit_function_evaluation")," setting to calculate the ",(0,l.kt)("inlineCode",{parentName:"p"},"or")," function according to a short scheme. If this setting is enabled, ",(0,l.kt)("inlineCode",{parentName:"p"},"vali")," is evaluated only on rows where ",(0,l.kt)("inlineCode",{parentName:"p"},"((NOT val1) AND (NOT val2) AND ... AND (NOT val{i-1}))")," is true. For example, an exception about division by zero is not thrown when executing the query ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT or(number = 0, intDiv(1, number) != 0) FROM numbers(10)"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"val1, val2, ...")," \u2014 List of at least two values. ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"Int"),", ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt"),", ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/float"},"Float")," or ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1"),", if there is at least one non-zero value."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"0"),", if there are only zero values."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),", if there are only zero values and ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),".")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8")," or ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),"(",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT or(1, 0, 0, 2, NULL);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500or(1, 0, 0, 2, NULL)\u2500\u2510\n\u2502                    1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT or(0, NULL);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500or(0, NULL)\u2500\u2510\n\u2502        \u1d3a\u1d41\u1d38\u1d38 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"logical-not-function"},"not"),(0,l.kt)("p",null,"Calculates the result of the logical negation of the value. Corresponds to ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/operators/#logical-negation-operator"},"Logical Negation Operator"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"not(val);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"val")," \u2014 The value. ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"Int"),", ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt"),", ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/float"},"Float")," or ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1"),", if the ",(0,l.kt)("inlineCode",{parentName:"li"},"val")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"0"),", if the ",(0,l.kt)("inlineCode",{parentName:"li"},"val")," is a non-zero value."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),", if the ",(0,l.kt)("inlineCode",{parentName:"li"},"val")," is a ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," value.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8")," or ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),"(",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT NOT(1);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-test"},"\u250c\u2500not(1)\u2500\u2510\n\u2502      0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"logical-xor-function"},"xor"),(0,l.kt)("p",null,"Calculates the result of the logical exclusive disjunction between two or more values. For more than two values the function works as if it calculates ",(0,l.kt)("inlineCode",{parentName:"p"},"XOR")," of the first two values and then uses the result with the next value to calculate ",(0,l.kt)("inlineCode",{parentName:"p"},"XOR")," and so on."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"xor(val1, val2...)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"val1, val2, ...")," \u2014 List of at least two values. ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"Int"),", ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt"),", ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/float"},"Float")," or ",(0,l.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1"),", for two values: if one of the values is zero and other is not."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"0"),", for two values: if both values are zero or non-zero at the same time."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),", if there is at least one ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," value.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8")," or ",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),"(",(0,l.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT xor(0, 1, 1);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500xor(0, 1, 1)\u2500\u2510\n\u2502            0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}m.isMDXComponent=!0}}]);
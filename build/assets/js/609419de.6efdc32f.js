"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[41192],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=c(t),m=a,d=f["".concat(s,".").concat(m)]||f[m]||u[m]||i;return t?r.createElement(d,l(l({ref:n},p),{},{components:t})):r.createElement(d,l({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},37542:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return u}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),l=["components"],o={sidebar_position:41,sidebar_label:"url"},s="url",c={unversionedId:"en/reference/sql-reference/table-functions/url",id:"en/reference/sql-reference/table-functions/url",title:"url",description:"url}",source:"@site/docs/en/reference/sql-reference/table-functions/url.md",sourceDirName:"en/reference/sql-reference/table-functions",slug:"/en/reference/sql-reference/table-functions/url",permalink:"/en/reference/sql-reference/table-functions/url",editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/reference/sql-reference/table-functions/url.md",tags:[],version:"current",sidebarPosition:41,frontMatter:{sidebar_position:41,sidebar_label:"url"},sidebar:"english",previous:{title:"remote",permalink:"/en/reference/sql-reference/table-functions/remote"},next:{title:"mysql",permalink:"/en/reference/sql-reference/table-functions/mysql"}},p={},u=[{value:"Globs in URL {globs-in-url}",id:"globs-in-url-globs-in-url",level:2}],f={toc:u};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"url"},"url"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"url")," function creates a table from the ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," with given ",(0,i.kt)("inlineCode",{parentName:"p"},"format")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"structure"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"url")," function may be used in ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT")," queries on data in ",(0,i.kt)("a",{parentName:"p",href:"/en/reference/engines/table-engines/special/url"},"URL")," tables."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"url(URL, format, structure)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"URL")," \u2014 HTTP or HTTPS server address, which can accept ",(0,i.kt)("inlineCode",{parentName:"li"},"GET")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"POST")," requests (for ",(0,i.kt)("inlineCode",{parentName:"li"},"SELECT")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"INSERT")," queries correspondingly). Type: ",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/string"},"String"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"format")," \u2014 ",(0,i.kt)("a",{parentName:"li",href:"/en/reference/interfaces/formats#formats"},"Format")," of the data. Type: ",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/string"},"String"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"structure")," \u2014 Table structure in ",(0,i.kt)("inlineCode",{parentName:"li"},"'UserID UInt64, Name String'")," format. Determines column names and types. Type: ",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/string"},"String"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returned value")),(0,i.kt)("p",null,"A table with the specified format and structure and with data from the defined ",(0,i.kt)("inlineCode",{parentName:"p"},"URL"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples")),(0,i.kt)("p",null,"Getting the first 3 lines of a table that contains columns of ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," and ",(0,i.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt32")," type from HTTP-server which answers in ",(0,i.kt)("a",{parentName:"p",href:"/en/reference/interfaces/formats#csv"},"CSV")," format."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM url('http://127.0.0.1:12345/', CSV, 'column1 String, column2 UInt32') LIMIT 3;\n")),(0,i.kt)("p",null,"Inserting data from a ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," into a table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test_table (column1 String, column2 UInt32) ENGINE=Memory;\nINSERT INTO FUNCTION url('http://127.0.0.1:8123/?query=INSERT+INTO+test_table+FORMAT+CSV', 'CSV', 'column1 String, column2 UInt32') VALUES ('http interface', 42);\nSELECT * FROM test_table;\n")),(0,i.kt)("h2",{id:"globs-in-url-globs-in-url"},"Globs in URL {globs-in-url}"),(0,i.kt)("p",null,"Patterns in curly brackets ",(0,i.kt)("inlineCode",{parentName:"p"},"{ }")," are used to generate a set of shards or to specify failover addresses. Supported pattern types and examples see in the description of the ",(0,i.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/table-functions/remote#globs-in-addresses"},"remote")," function.\nCharacter ",(0,i.kt)("inlineCode",{parentName:"p"},"|")," inside patterns is used to specify failover addresses. They are iterated in the same order as listed in the pattern. The number of generated addresses is limited by ",(0,i.kt)("a",{parentName:"p",href:"/en/reference/operations/settings/#glob_expansion_max_elements"},"glob_expansion_max_elements")," setting."))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[17859],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return m}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,d=p["".concat(c,".").concat(m)]||p[m]||f[m]||a;return r?t.createElement(d,i(i({ref:n},u),{},{components:r})):t.createElement(d,i({ref:n},u))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},39776:function(e,n,r){r.r(n),r.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return f}});var t=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],s={sidebar_position:36,sidebar_label:"Comparison"},c="Comparison Functions",l={unversionedId:"en/reference/sql-reference/functions/comparison-functions",id:"en/reference/sql-reference/functions/comparison-functions",title:"Comparison Functions",description:"comparison-functions}",source:"@site/docs/en/reference/sql-reference/functions/comparison-functions.md",sourceDirName:"en/reference/sql-reference/functions",slug:"/en/reference/sql-reference/functions/comparison-functions",permalink:"/en/reference/sql-reference/functions/comparison-functions",editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/reference/sql-reference/functions/comparison-functions.md",tags:[],version:"current",sidebarPosition:36,frontMatter:{sidebar_position:36,sidebar_label:"Comparison"},sidebar:"english",previous:{title:"Arrays",permalink:"/en/reference/sql-reference/functions/array-functions"},next:{title:"Logical",permalink:"/en/reference/sql-reference/functions/logical-functions"}},u={},f=[{value:"equals, a = b and a == b operator",id:"function-equals",level:2},{value:"notEquals, a != b and a &lt;&gt; b operator",id:"function-notequals",level:2},{value:"less, &lt; operator",id:"function-less",level:2},{value:"greater, &gt; operator",id:"function-greater",level:2},{value:"lessOrEquals, &lt;= operator",id:"function-lessorequals",level:2},{value:"greaterOrEquals, &gt;= operator",id:"function-greaterorequals",level:2}],p={toc:f};function m(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"comparison-functions"},"Comparison Functions"),(0,a.kt)("p",null,"Comparison functions always return 0 or 1 (Uint8)."),(0,a.kt)("p",null,"The following types can be compared:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"numbers"),(0,a.kt)("li",{parentName:"ul"},"strings and fixed strings"),(0,a.kt)("li",{parentName:"ul"},"dates"),(0,a.kt)("li",{parentName:"ul"},"dates with times")),(0,a.kt)("p",null,"within each group, but not between different groups."),(0,a.kt)("p",null,"For example, you can\u2019t compare a date with a string. You have to use a function to convert the string to a date, or vice versa."),(0,a.kt)("p",null,"Strings are compared by bytes. A shorter string is smaller than all strings that start with it and that contain at least one more character."),(0,a.kt)("h2",{id:"function-equals"},"equals, a = b and a == b operator"),(0,a.kt)("h2",{id:"function-notequals"},"notEquals, a != b and a \\<",">"," b operator"),(0,a.kt)("h2",{id:"function-less"},"less, \\< operator"),(0,a.kt)("h2",{id:"function-greater"},"greater, ",">"," operator"),(0,a.kt)("h2",{id:"function-lessorequals"},"lessOrEquals, \\<= operator"),(0,a.kt)("h2",{id:"function-greaterorequals"},"greaterOrEquals, ",">","= operator"))}m.isMDXComponent=!0}}]);
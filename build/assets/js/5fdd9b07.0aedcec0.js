"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[4263],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),c=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),f=a,d=u["".concat(o,".").concat(f)]||u[f]||m[f]||i;return t?r.createElement(d,l(l({ref:n},p),{},{components:t})):r.createElement(d,l({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=u;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},53117:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return o},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),l=["components"],s={},o="columns",c={unversionedId:"en/reference/operations/system-tables/columns",id:"en/reference/operations/system-tables/columns",title:"columns",description:"system-columns}",source:"@site/docs/en/reference/operations/system-tables/columns.md",sourceDirName:"en/reference/operations/system-tables",slug:"/en/reference/operations/system-tables/columns",permalink:"/en/reference/operations/system-tables/columns",editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/reference/operations/system-tables/columns.md",tags:[],version:"current",frontMatter:{},sidebar:"english",previous:{title:"clusters",permalink:"/en/reference/operations/system-tables/clusters"},next:{title:"contributors",permalink:"/en/reference/operations/system-tables/contributors"}},p={},m=[],u={toc:m};function f(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"system-columns"},"columns"),(0,i.kt)("p",null,"Contains information about columns in all the tables."),(0,i.kt)("p",null,"You can use this table to get information similar to the ",(0,i.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/statements/misc#misc-describe-table"},"DESCRIBE TABLE")," query, but for multiple tables at once."),(0,i.kt)("p",null,"Columns from ",(0,i.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/statements/create/table#temporary-tables"},"temporary tables")," are visible in the ",(0,i.kt)("inlineCode",{parentName:"p"},"system.columns")," only in those session where they have been created. They are shown with the empty ",(0,i.kt)("inlineCode",{parentName:"p"},"database")," field."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"system.columns")," table contains the following columns (the column type is shown in brackets):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"database")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/string"},"String"),") \u2014 Database name."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"table")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/string"},"String"),") \u2014 Table name."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/string"},"String"),") \u2014 Column name."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/string"},"String"),") \u2014 Column type."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"position")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 Ordinal position of a column in a table starting with 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default_kind")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/string"},"String"),") \u2014 Expression type (",(0,i.kt)("inlineCode",{parentName:"li"},"DEFAULT"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"MATERIALIZED"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ALIAS"),") for the default value, or an empty string if it is not defined."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default_expression")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/string"},"String"),") \u2014 Expression for the default value, or an empty string if it is not defined."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data_compressed_bytes")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 The size of compressed data, in bytes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data_uncompressed_bytes")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 The size of decompressed data, in bytes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"marks_bytes")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 The size of marks, in bytes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"comment")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/string"},"String"),") \u2014 Comment on the column, or an empty string if it is not defined."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is_in_partition_key")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8"),") \u2014 Flag that indicates whether the column is in the partition expression."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is_in_sorting_key")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8"),") \u2014 Flag that indicates whether the column is in the sorting key expression."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is_in_primary_key")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8"),") \u2014 Flag that indicates whether the column is in the primary key expression."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is_in_sampling_key")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt8"),") \u2014 Flag that indicates whether the column is in the sampling key expression."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"compression_codec")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/string"},"String"),") \u2014 Compression codec name."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"character_octet_length")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),"(",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt64"),")) \u2014 Maximum length in bytes for binary data, character data, or text data and images. In ClickHouse makes sense only for ",(0,i.kt)("inlineCode",{parentName:"li"},"FixedString")," data type. Otherwise, the ",(0,i.kt)("inlineCode",{parentName:"li"},"NULL")," value is returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"numeric_precision")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),"(",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt64"),")) \u2014 Accuracy of approximate numeric data, exact numeric data, integer data, or monetary data. In ClickHouse it is bitness for integer types and decimal precision for ",(0,i.kt)("inlineCode",{parentName:"li"},"Decimal")," types. Otherwise, the ",(0,i.kt)("inlineCode",{parentName:"li"},"NULL")," value is returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"numeric_precision_radix")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),"(",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt64"),")) \u2014 The base of the number system is the accuracy of approximate numeric data, exact numeric data, integer data or monetary data. In ClickHouse it's 2 for integer types and 10 for ",(0,i.kt)("inlineCode",{parentName:"li"},"Decimal")," types. Otherwise, the ",(0,i.kt)("inlineCode",{parentName:"li"},"NULL")," value is returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"numeric_scale")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),"(",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt64"),")) \u2014 The scale of approximate numeric data, exact numeric data, integer data, or monetary data. In ClickHouse makes sense only for ",(0,i.kt)("inlineCode",{parentName:"li"},"Decimal")," types. Otherwise, the ",(0,i.kt)("inlineCode",{parentName:"li"},"NULL")," value is returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"datetime_precision")," (",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/nullable"},"Nullable"),"(",(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/data-types/int-uint"},"UInt64"),")) \u2014 Decimal precision of ",(0,i.kt)("inlineCode",{parentName:"li"},"DateTime64")," data type. For other data types, the ",(0,i.kt)("inlineCode",{parentName:"li"},"NULL")," value is returned.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM system.columns LIMIT 2 FORMAT Vertical;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Row 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\ndatabase:                INFORMATION_SCHEMA\ntable:                   COLUMNS\nname:                    table_catalog\ntype:                    String\nposition:                1\ndefault_kind:\ndefault_expression:\ndata_compressed_bytes:   0\ndata_uncompressed_bytes: 0\nmarks_bytes:             0\ncomment:\nis_in_partition_key:     0\nis_in_sorting_key:       0\nis_in_primary_key:       0\nis_in_sampling_key:      0\ncompression_codec:\ncharacter_octet_length:  \u1d3a\u1d41\u1d38\u1d38\nnumeric_precision:       \u1d3a\u1d41\u1d38\u1d38\nnumeric_precision_radix: \u1d3a\u1d41\u1d38\u1d38\nnumeric_scale:           \u1d3a\u1d41\u1d38\u1d38\ndatetime_precision:      \u1d3a\u1d41\u1d38\u1d38\n\nRow 2:\n\u2500\u2500\u2500\u2500\u2500\u2500\ndatabase:                INFORMATION_SCHEMA\ntable:                   COLUMNS\nname:                    table_schema\ntype:                    String\nposition:                2\ndefault_kind:\ndefault_expression:\ndata_compressed_bytes:   0\ndata_uncompressed_bytes: 0\nmarks_bytes:             0\ncomment:\nis_in_partition_key:     0\nis_in_sorting_key:       0\nis_in_primary_key:       0\nis_in_sampling_key:      0\ncompression_codec:\ncharacter_octet_length:  \u1d3a\u1d41\u1d38\u1d38\nnumeric_precision:       \u1d3a\u1d41\u1d38\u1d38\nnumeric_precision_radix: \u1d3a\u1d41\u1d38\u1d38\nnumeric_scale:           \u1d3a\u1d41\u1d38\u1d38\ndatetime_precision:      \u1d3a\u1d41\u1d38\u1d38\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/operations/system-tables/columns"},"Original article")," "))}f.isMDXComponent=!0}}]);
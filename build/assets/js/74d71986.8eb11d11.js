"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[76340],{3905:function(e,n,t){t.d(n,{Zo:function(){return f},kt:function(){return u}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},f=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,f=p(e,["components","mdxType","originalType","parentName"]),s=c(t),u=a,m=s["".concat(l,".").concat(u)]||s[u]||g[u]||i;return t?r.createElement(m,o(o({ref:n},f),{},{components:t})):r.createElement(m,o({ref:n},f))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=s;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},75016:function(e,n,t){t.r(n),t.d(n,{assets:function(){return f},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return g}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],p={},l="SimpleAggregateFunction",c={unversionedId:"en/reference/sql-reference/data-types/simpleaggregatefunction",id:"en/reference/sql-reference/data-types/simpleaggregatefunction",title:"SimpleAggregateFunction",description:"data-type-simpleaggregatefunction}",source:"@site/docs/en/reference/sql-reference/data-types/simpleaggregatefunction.md",sourceDirName:"en/reference/sql-reference/data-types",slug:"/en/reference/sql-reference/data-types/simpleaggregatefunction",permalink:"/en/reference/sql-reference/data-types/simpleaggregatefunction",editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/reference/sql-reference/data-types/simpleaggregatefunction.md",tags:[],version:"current",frontMatter:{},sidebar:"english",previous:{title:"Map(key, value)",permalink:"/en/reference/sql-reference/data-types/map"},next:{title:"Operators",permalink:"/en/reference/sql-reference/operators/"}},f={},g=[],s={toc:g};function u(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"data-type-simpleaggregatefunction"},"SimpleAggregateFunction"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"SimpleAggregateFunction(name, types_of_arguments\u2026)")," data type stores current value of the aggregate function, and does not store its full state as ",(0,i.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/data-types/aggregatefunction"},(0,i.kt)("inlineCode",{parentName:"a"},"AggregateFunction"))," does. This optimization can be applied to functions for which the following property holds: the result of applying a function ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to a row set ",(0,i.kt)("inlineCode",{parentName:"p"},"S1 UNION ALL S2")," can be obtained by applying ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to parts of the row set separately, and then again applying ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to the results: ",(0,i.kt)("inlineCode",{parentName:"p"},"f(S1 UNION ALL S2) = f(f(S1) UNION ALL f(S2))"),". This property guarantees that partial aggregation results are enough to compute the combined one, so we do not have to store and process any extra data."),(0,i.kt)("p",null,"The common way to produce an aggregate function value is by calling the aggregate function with the ",(0,i.kt)("a",{parentName:"p",href:"/en/reference/sql-reference/aggregate-functions/combinators#agg-functions-combinator-simplestate"},"-SimpleState")," suffix."),(0,i.kt)("p",null,"The following aggregate functions are supported:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/any#agg_function-any"},(0,i.kt)("inlineCode",{parentName:"a"},"any"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/anylast#anylastx"},(0,i.kt)("inlineCode",{parentName:"a"},"anyLast"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/min#agg_function-min"},(0,i.kt)("inlineCode",{parentName:"a"},"min"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/max#agg_function-max"},(0,i.kt)("inlineCode",{parentName:"a"},"max"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/sum#agg_function-sum"},(0,i.kt)("inlineCode",{parentName:"a"},"sum"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/sumwithoverflow#sumwithoverflowx"},(0,i.kt)("inlineCode",{parentName:"a"},"sumWithOverflow"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/groupbitand#groupbitand"},(0,i.kt)("inlineCode",{parentName:"a"},"groupBitAnd"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/groupbitor#groupbitor"},(0,i.kt)("inlineCode",{parentName:"a"},"groupBitOr"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/groupbitxor#groupbitxor"},(0,i.kt)("inlineCode",{parentName:"a"},"groupBitXor"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/grouparray#agg_function-grouparray"},(0,i.kt)("inlineCode",{parentName:"a"},"groupArrayArray"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/groupuniqarray"},(0,i.kt)("inlineCode",{parentName:"a"},"groupUniqArrayArray"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/summap#agg_functions-summap"},(0,i.kt)("inlineCode",{parentName:"a"},"sumMap"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/minmap#agg_functions-minmap"},(0,i.kt)("inlineCode",{parentName:"a"},"minMap"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/reference/sql-reference/aggregate-functions/reference/maxmap#agg_functions-maxmap"},(0,i.kt)("inlineCode",{parentName:"a"},"maxMap")))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Values of the ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleAggregateFunction(func, Type)")," look and stored the same way as ",(0,i.kt)("inlineCode",{parentName:"p"},"Type"),", so you do not need to apply functions with ",(0,i.kt)("inlineCode",{parentName:"p"},"-Merge"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"-State")," suffixes."),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"SimpleAggregateFunction")," has better performance than ",(0,i.kt)("inlineCode",{parentName:"p"},"AggregateFunction")," with same aggregation function."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Name of the aggregate function."),(0,i.kt)("li",{parentName:"ul"},"Types of the aggregate function arguments.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE simple (id UInt64, val SimpleAggregateFunction(sum, Double)) ENGINE=AggregatingMergeTree ORDER BY id;\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/data_types/simpleaggregatefunction/"},"Original article")," "))}u.isMDXComponent=!0}}]);